memberSearchIndex = [{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"AbstractBottomUpParser(POSTagger, Chunker, HeadRules, int, double)","url":"%3Cinit%3E(opennlp.tools.postag.POSTagger,opennlp.tools.chunker.Chunker,opennlp.tools.parser.HeadRules,int,double)"},{"p":"opennlp.tools.parser","c":"AbstractContextGenerator","l":"AbstractContextGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"AbstractDataIndexer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml","c":"AbstractEventModelSequenceTrainer","l":"AbstractEventModelSequenceTrainer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util","c":"AbstractEventStream","l":"AbstractEventStream(ObjectStream<T>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"AbstractEventTrainer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"AbstractEventTrainer(TrainingParameters)","url":"%3Cinit%3E(opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.ml.model","c":"AbstractModel","l":"AbstractModel(Context[], String[], String[])","url":"%3Cinit%3E(opennlp.tools.ml.model.Context[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.ml.model","c":"AbstractModelReader","l":"AbstractModelReader(DataReader)","url":"%3Cinit%3E(opennlp.tools.ml.model.DataReader)"},{"p":"opennlp.tools.ml.model","c":"AbstractModelReader","l":"AbstractModelReader(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.model","c":"AbstractModelWriter","l":"AbstractModelWriter()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser","c":"AbstractParserEventStream","l":"AbstractParserEventStream(ObjectStream<Parse>, HeadRules, ParserEventTypeEnum, Dictionary)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.parser.ParserEventTypeEnum,opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.parser","c":"AbstractParserEventStream","l":"AbstractParserEventStream(ObjectStream<Parse>, HeadRules, ParserEventTypeEnum)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.parser.ParserEventTypeEnum)"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"AbstractTrainer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"AbstractTrainer(TrainingParameters)","url":"%3Cinit%3E(opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"AbstractXmlFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats.ad","c":"ADChunkSampleStream","l":"ADChunkSampleStream(InputStreamFactory, String)","url":"%3Cinit%3E(opennlp.tools.util.InputStreamFactory,java.lang.String)"},{"p":"opennlp.tools.formats.ad","c":"ADChunkSampleStream","l":"ADChunkSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"add(char)"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"add(CharSequence, int, int)","url":"add(java.lang.CharSequence,int,int)"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"add(CharSequence, int, int)","url":"add(java.lang.CharSequence,int,int)"},{"p":"opennlp.tools.util.eval","c":"Mean","l":"add(double, long)","url":"add(double,long)"},{"p":"opennlp.tools.util.eval","c":"Mean","l":"add(double)"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument","l":"add(IrishSentenceBankDocument.IrishSentenceBankSentence)","url":"add(opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument.IrishSentenceBankSentence)"},{"p":"opennlp.tools.parser","c":"Parse","l":"add(Parse, HeadRules)","url":"add(opennlp.tools.parser.Parse,opennlp.tools.parser.HeadRules)"},{"p":"opennlp.tools.util","c":"Sequence","l":"add(String, double)","url":"add(java.lang.String,double)"},{"p":"opennlp.tools.languagemodel","c":"NGramLanguageModel","l":"add(String...)","url":"add(java.lang.String...)"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"add(String)","url":"add(java.lang.String)"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"add(StringList, int, int)","url":"add(opennlp.tools.util.StringList,int,int)"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"add(StringList)","url":"add(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.util.model","c":"ModelUtil","l":"addCutoffAndIterations(Map<String, String>, int, int)","url":"addCutoffAndIterations(java.util.Map,int,int)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Node","l":"addElement(ADSentenceStream.SentenceParser.TreeElement)","url":"addElement(opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.TreeElement)"},{"p":"opennlp.tools.namefind","c":"DefaultNameContextGenerator","l":"addFeatureGenerator(AdaptiveFeatureGenerator)","url":"addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator)"},{"p":"opennlp.tools.namefind","c":"NameContextGenerator","l":"addFeatureGenerator(AdaptiveFeatureGenerator)","url":"addFeatureGenerator(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"addIn(double)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"addIn(double)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbabilities","l":"addIn(T, double, int)","url":"addIn(T,double,int)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"addIn(T, double, int)","url":"addIn(T,double,int)"},{"p":"opennlp.tools.namefind","c":"NameFinderEventStream","l":"additionalContext(String[], Map<String, String>)","url":"additionalContext(java.lang.String[],java.util.Map)"},{"p":"opennlp.tools.util.featuregen","c":"AdditionalContextFeatureGenerator","l":"AdditionalContextFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser","c":"Parse","l":"addNames(String, Span[], Parse[])","url":"addNames(java.lang.String,opennlp.tools.util.Span[],opennlp.tools.parser.Parse[])"},{"p":"opennlp.tools.parser","c":"Parse","l":"addNextPunctuation(Parse)","url":"addNextPunctuation(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.parser","c":"Parse","l":"addPreviousPunctuation(Parse)","url":"addPreviousPunctuation(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.parser","c":"Parse","l":"addProb(double)"},{"p":"opennlp.tools.parser","c":"Parse","l":"adjoin(Parse, HeadRules)","url":"adjoin(opennlp.tools.parser.Parse,opennlp.tools.parser.HeadRules)"},{"p":"opennlp.tools.parser","c":"Parse","l":"adjoinRoot(Parse, HeadRules, int)","url":"adjoinRoot(opennlp.tools.parser.Parse,opennlp.tools.parser.HeadRules,int)"},{"p":"opennlp.tools.formats.ad","c":"ADNameSampleStream","l":"ADNameSampleStream(InputStreamFactory, String, boolean)","url":"%3Cinit%3E(opennlp.tools.util.InputStreamFactory,java.lang.String,boolean)"},{"p":"opennlp.tools.formats.ad","c":"ADNameSampleStream","l":"ADNameSampleStream(ObjectStream<String>, boolean)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,boolean)"},{"p":"opennlp.tools.formats.ad","c":"ADPOSSampleStream","l":"ADPOSSampleStream(InputStreamFactory, String, boolean, boolean)","url":"%3Cinit%3E(opennlp.tools.util.InputStreamFactory,java.lang.String,boolean,boolean)"},{"p":"opennlp.tools.formats.ad","c":"ADPOSSampleStream","l":"ADPOSSampleStream(ObjectStream<String>, boolean, boolean)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,boolean,boolean)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceSampleStream","l":"ADSentenceSampleStream(InputStreamFactory, String, boolean)","url":"%3Cinit%3E(opennlp.tools.util.InputStreamFactory,java.lang.String,boolean)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceSampleStream","l":"ADSentenceSampleStream(ObjectStream<String>, boolean)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,boolean)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream","l":"ADSentenceStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.util.normalizer","c":"AggregateCharSequenceNormalizer","l":"AggregateCharSequenceNormalizer(CharSequenceNormalizer...)","url":"%3Cinit%3E(opennlp.tools.util.normalizer.CharSequenceNormalizer...)"},{"p":"opennlp.tools.util.featuregen","c":"AggregatedFeatureGenerator","l":"AggregatedFeatureGenerator(AdaptiveFeatureGenerator...)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator...)"},{"p":"opennlp.tools.util.featuregen","c":"AggregatedFeatureGenerator","l":"AggregatedFeatureGenerator(Collection<AdaptiveFeatureGenerator>)","url":"%3Cinit%3E(java.util.Collection)"},{"p":"opennlp.tools.util.featuregen","c":"AggregatedFeatureGeneratorFactory","l":"AggregatedFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"ALGORITHM_PARAM"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"ALGORITHM_PARAM"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"algorithm()"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"algorithm(String)","url":"algorithm(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"TokenizerME","l":"alphaNumeric"},{"p":"opennlp.tools.parser.lang.es","c":"AncoraSpanishHeadRules","l":"AncoraSpanishHeadRules(Reader)","url":"%3Cinit%3E(java.io.Reader)"},{"p":"opennlp.tools.formats.brat","c":"AnnotationConfiguration","l":"AnnotationConfiguration(Map<String, String>)","url":"%3Cinit%3E(java.util.Map)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"ARABIC"},{"p":"opennlp.tools.stemmer.snowball","c":"arabicStemmer","l":"arabicStemmer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"BilouCodec","l":"areOutcomesCompatible(String[])","url":"areOutcomesCompatible(java.lang.String[])"},{"p":"opennlp.tools.namefind","c":"BioCodec","l":"areOutcomesCompatible(String[])","url":"areOutcomesCompatible(java.lang.String[])"},{"p":"opennlp.tools.util","c":"SequenceCodec","l":"areOutcomesCompatible(String[])","url":"areOutcomesCompatible(java.lang.String[])"},{"p":"opennlp.tools.ml","c":"ArrayMath","l":"argmax(double[])"},{"p":"opennlp.tools.ml","c":"ArrayMath","l":"ArrayMath()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"ArrayMath","l":"ArrayMath()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"asStringSet()"},{"p":"opennlp.tools.parser","c":"ParserEventTypeEnum","l":"ATTACH"},{"p":"opennlp.tools.parser.treeinsert","c":"Parser","l":"ATTACH_DAUGHTER"},{"p":"opennlp.tools.parser.treeinsert","c":"Parser","l":"ATTACH_SISTER"},{"p":"opennlp.tools.parser.treeinsert","c":"AttachContextGenerator","l":"AttachContextGenerator(Set<String>)","url":"%3Cinit%3E(java.util.Set)"},{"p":"opennlp.tools.formats.brat","c":"AnnotationConfiguration","l":"ATTRIBUTE_TYPE"},{"p":"opennlp.tools.dictionary.serializer","c":"Attributes","l":"Attributes()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util","c":"DownloadUtil","l":"available_models"},{"p":"opennlp.tools.doccat","c":"BagOfWordsFeatureGenerator","l":"BagOfWordsFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"BaseLink(String, String, String, String)","url":"%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},{"p":"opennlp.tools.util","c":"BaseToolFactory","l":"BaseToolFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.maxent","c":"BasicContextGenerator","l":"BasicContextGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.maxent","c":"BasicContextGenerator","l":"BasicContextGenerator(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.ml","c":"BeamSearch","l":"BEAM_SIZE_PARAMETER"},{"p":"opennlp.tools.ml","c":"BeamSearch","l":"BeamSearch(int, MaxentModel, int)","url":"%3Cinit%3E(int,opennlp.tools.ml.model.MaxentModel,int)"},{"p":"opennlp.tools.ml","c":"BeamSearch","l":"BeamSearch(int, MaxentModel)","url":"%3Cinit%3E(int,opennlp.tools.ml.model.MaxentModel)"},{"p":"opennlp.tools.ml","c":"BeamSearch","l":"bestSequence(T[], Object[], BeamSearchContextGenerator<T>, SequenceValidator<T>)","url":"bestSequence(T[],java.lang.Object[],opennlp.tools.util.BeamSearchContextGenerator,opennlp.tools.util.SequenceValidator)"},{"p":"opennlp.tools.ml.model","c":"SequenceClassificationModel","l":"bestSequence(T[], Object[], BeamSearchContextGenerator<T>, SequenceValidator<T>)","url":"bestSequence(T[],java.lang.Object[],opennlp.tools.util.BeamSearchContextGenerator,opennlp.tools.util.SequenceValidator)"},{"p":"opennlp.tools.ml","c":"BeamSearch","l":"bestSequences(int, T[], Object[], BeamSearchContextGenerator<T>, SequenceValidator<T>)","url":"bestSequences(int,T[],java.lang.Object[],opennlp.tools.util.BeamSearchContextGenerator,opennlp.tools.util.SequenceValidator)"},{"p":"opennlp.tools.ml.model","c":"SequenceClassificationModel","l":"bestSequences(int, T[], Object[], BeamSearchContextGenerator<T>, SequenceValidator<T>)","url":"bestSequences(int,T[],java.lang.Object[],opennlp.tools.util.BeamSearchContextGenerator,opennlp.tools.util.SequenceValidator)"},{"p":"opennlp.tools.ml","c":"BeamSearch","l":"bestSequences(int, T[], Object[], double, BeamSearchContextGenerator<T>, SequenceValidator<T>)","url":"bestSequences(int,T[],java.lang.Object[],double,opennlp.tools.util.BeamSearchContextGenerator,opennlp.tools.util.SequenceValidator)"},{"p":"opennlp.tools.ml.model","c":"SequenceClassificationModel","l":"bestSequences(int, T[], Object[], double, BeamSearchContextGenerator<T>, SequenceValidator<T>)","url":"bestSequences(int,T[],java.lang.Object[],double,opennlp.tools.util.BeamSearchContextGenerator,opennlp.tools.util.SequenceValidator)"},{"p":"opennlp.tools.util.featuregen","c":"BigramNameFeatureGenerator","l":"BigramNameFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"BigramNameFeatureGeneratorFactory","l":"BigramNameFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"BilouCodec","l":"BilouCodec()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"BilouNameFinderSequenceValidator","l":"BilouNameFinderSequenceValidator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.model","c":"BinaryFileDataReader","l":"BinaryFileDataReader(DataInputStream)","url":"%3Cinit%3E(java.io.DataInputStream)"},{"p":"opennlp.tools.ml.model","c":"BinaryFileDataReader","l":"BinaryFileDataReader(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.model","c":"BinaryFileDataReader","l":"BinaryFileDataReader(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryGISModelReader","l":"BinaryGISModelReader(DataInputStream)","url":"%3Cinit%3E(java.io.DataInputStream)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryGISModelWriter","l":"BinaryGISModelWriter(AbstractModel, DataOutputStream)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.DataOutputStream)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryGISModelWriter","l":"BinaryGISModelWriter(AbstractModel, File)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.File)"},{"p":"opennlp.tools.ml.naivebayes","c":"BinaryNaiveBayesModelReader","l":"BinaryNaiveBayesModelReader(DataInputStream)","url":"%3Cinit%3E(java.io.DataInputStream)"},{"p":"opennlp.tools.ml.naivebayes","c":"BinaryNaiveBayesModelReader","l":"BinaryNaiveBayesModelReader(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.naivebayes","c":"BinaryNaiveBayesModelWriter","l":"BinaryNaiveBayesModelWriter(AbstractModel, DataOutputStream)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.DataOutputStream)"},{"p":"opennlp.tools.ml.naivebayes","c":"BinaryNaiveBayesModelWriter","l":"BinaryNaiveBayesModelWriter(AbstractModel, File)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.File)"},{"p":"opennlp.tools.ml.perceptron","c":"BinaryPerceptronModelReader","l":"BinaryPerceptronModelReader(DataInputStream)","url":"%3Cinit%3E(java.io.DataInputStream)"},{"p":"opennlp.tools.ml.perceptron","c":"BinaryPerceptronModelReader","l":"BinaryPerceptronModelReader(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.perceptron","c":"BinaryPerceptronModelWriter","l":"BinaryPerceptronModelWriter(AbstractModel, DataOutputStream)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.DataOutputStream)"},{"p":"opennlp.tools.ml.perceptron","c":"BinaryPerceptronModelWriter","l":"BinaryPerceptronModelWriter(AbstractModel, File)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.File)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryQNModelReader","l":"BinaryQNModelReader(DataInputStream)","url":"%3Cinit%3E(java.io.DataInputStream)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryQNModelWriter","l":"BinaryQNModelWriter(AbstractModel, DataOutputStream)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.DataOutputStream)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryQNModelWriter","l":"BinaryQNModelWriter(AbstractModel, File)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.File)"},{"p":"opennlp.tools.namefind","c":"BioCodec","l":"BioCodec()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats","c":"BioNLP2004NameSampleStream","l":"BioNLP2004NameSampleStream(InputStreamFactory, int)","url":"%3Cinit%3E(opennlp.tools.util.InputStreamFactory,int)"},{"p":"opennlp.tools.parser","c":"Parse","l":"BRACKET_LCB"},{"p":"opennlp.tools.parser","c":"Parse","l":"BRACKET_LRB"},{"p":"opennlp.tools.parser","c":"Parse","l":"BRACKET_LSB"},{"p":"opennlp.tools.parser","c":"Parse","l":"BRACKET_RCB"},{"p":"opennlp.tools.parser","c":"Parse","l":"BRACKET_RRB"},{"p":"opennlp.tools.parser","c":"Parse","l":"BRACKET_RSB"},{"p":"opennlp.tools.formats.brat","c":"BratDocument","l":"BratDocument(AnnotationConfiguration, String, String, Collection<BratAnnotation>)","url":"%3Cinit%3E(opennlp.tools.formats.brat.AnnotationConfiguration,java.lang.String,java.lang.String,java.util.Collection)"},{"p":"opennlp.tools.formats.brat","c":"BratDocumentParser","l":"BratDocumentParser(SentenceDetector, Tokenizer, Set<String>)","url":"%3Cinit%3E(opennlp.tools.sentdetect.SentenceDetector,opennlp.tools.tokenize.Tokenizer,java.util.Set)"},{"p":"opennlp.tools.formats.brat","c":"BratDocumentParser","l":"BratDocumentParser(SentenceDetector, Tokenizer)","url":"%3Cinit%3E(opennlp.tools.sentdetect.SentenceDetector,opennlp.tools.tokenize.Tokenizer)"},{"p":"opennlp.tools.formats.brat","c":"BratDocumentStream","l":"BratDocumentStream(AnnotationConfiguration, File, boolean, FileFilter)","url":"%3Cinit%3E(opennlp.tools.formats.brat.AnnotationConfiguration,java.io.File,boolean,java.io.FileFilter)"},{"p":"opennlp.tools.formats.brat","c":"BratNameSampleStream","l":"BratNameSampleStream(SentenceDetector, Tokenizer, ObjectStream<BratDocument>, Set<String>)","url":"%3Cinit%3E(opennlp.tools.sentdetect.SentenceDetector,opennlp.tools.tokenize.Tokenizer,opennlp.tools.util.ObjectStream,java.util.Set)"},{"p":"opennlp.tools.formats.brat","c":"BratNameSampleStream","l":"BratNameSampleStream(SentenceDetector, Tokenizer, ObjectStream<BratDocument>)","url":"%3Cinit%3E(opennlp.tools.sentdetect.SentenceDetector,opennlp.tools.tokenize.Tokenizer,opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats.brat","c":"BratNameSampleStream","l":"BratNameSampleStream(SentenceModel, TokenizerModel, ObjectStream<BratDocument>, Set<String>)","url":"%3Cinit%3E(opennlp.tools.sentdetect.SentenceModel,opennlp.tools.tokenize.TokenizerModel,opennlp.tools.util.ObjectStream,java.util.Set)"},{"p":"opennlp.tools.formats.brat","c":"BratNameSampleStream","l":"BratNameSampleStream(SentenceModel, TokenizerModel, ObjectStream<BratDocument>)","url":"%3Cinit%3E(opennlp.tools.sentdetect.SentenceModel,opennlp.tools.tokenize.TokenizerModel,opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.util.featuregen","c":"BrownBigramFeatureGenerator","l":"BrownBigramFeatureGenerator(BrownCluster)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.BrownCluster)"},{"p":"opennlp.tools.util.featuregen","c":"BrownCluster","l":"BrownCluster(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterBigramFeatureGeneratorFactory","l":"BrownClusterBigramFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"BrownCluster.BrownClusterSerializer","l":"BrownClusterSerializer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterTokenClassFeatureGeneratorFactory","l":"BrownClusterTokenClassFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterTokenFeatureGeneratorFactory","l":"BrownClusterTokenFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"BrownTokenClasses","l":"BrownTokenClasses()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"BrownTokenClassFeatureGenerator","l":"BrownTokenClassFeatureGenerator(BrownCluster)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.BrownCluster)"},{"p":"opennlp.tools.util.featuregen","c":"BrownTokenFeatureGenerator","l":"BrownTokenFeatureGenerator(BrownCluster)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.BrownCluster)"},{"p":"opennlp.tools.parser","c":"ParserEventTypeEnum","l":"BUILD"},{"p":"opennlp.tools.parser.chunking","c":"BuildContextGenerator","l":"BuildContextGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser.treeinsert","c":"BuildContextGenerator","l":"BuildContextGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser.chunking","c":"BuildContextGenerator","l":"BuildContextGenerator(Dictionary)","url":"%3Cinit%3E(opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"buildDictionary(ObjectStream<Parse>, HeadRules, int)","url":"buildDictionary(opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,int)"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"buildDictionary(ObjectStream<Parse>, HeadRules, TrainingParameters)","url":"buildDictionary(opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.cmdline.parser","c":"BuildModelUpdaterTool","l":"BuildModelUpdaterTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"buildNGramDictionary(ObjectStream<POSSample>, int)","url":"buildNGramDictionary(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.parser.treeinsert","c":"Parser","l":"BUILT"},{"p":"opennlp.tools.util.model","c":"ByteArraySerializer","l":"ByteArraySerializer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util","c":"Cache","l":"Cache(int)","url":"%3Cinit%3E(int)"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGenerator","l":"CachedFeatureGenerator(AdaptiveFeatureGenerator...)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator...)"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGenerator","l":"CachedFeatureGenerator(AdaptiveFeatureGenerator)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator)"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGeneratorFactory","l":"CachedFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"calculateBigramMLProbability(String, String, Collection<StringList>)","url":"calculateBigramMLProbability(java.lang.String,java.lang.String,java.util.Collection)"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"calculateBigramPriorSmoothingProbability(String, String, Collection<StringList>, Double)","url":"calculateBigramPriorSmoothingProbability(java.lang.String,java.lang.String,java.util.Collection,java.lang.Double)"},{"p":"opennlp.tools.ml.model","c":"HashSumEventStream","l":"calculateHashSum()"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"calculateLaplaceSmoothingProbability(StringList, Iterable<StringList>, Double)","url":"calculateLaplaceSmoothingProbability(opennlp.tools.util.StringList,java.lang.Iterable,java.lang.Double)"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"calculateMissingNgramProbabilityMass(StringList, Double, Iterable<StringList>)","url":"calculateMissingNgramProbabilityMass(opennlp.tools.util.StringList,java.lang.Double,java.lang.Iterable)"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"calculateNgramMLProbability(StringList, Iterable<StringList>)","url":"calculateNgramMLProbability(opennlp.tools.util.StringList,java.lang.Iterable)"},{"p":"opennlp.tools.languagemodel","c":"LanguageModel","l":"calculateProbability(String...)","url":"calculateProbability(java.lang.String...)"},{"p":"opennlp.tools.languagemodel","c":"NGramLanguageModel","l":"calculateProbability(String...)","url":"calculateProbability(java.lang.String...)"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"calculateTrigramLinearInterpolationProbability(String, String, String, Collection<StringList>, Double, Double, Double)","url":"calculateTrigramLinearInterpolationProbability(java.lang.String,java.lang.String,java.lang.String,java.util.Collection,java.lang.Double,java.lang.Double,java.lang.Double)"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"calculateTrigramMLProbability(String, String, String, Iterable<StringList>)","url":"calculateTrigramMLProbability(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"calculateUnigramMLProbability(String, Collection<StringList>)","url":"calculateUnigramMLProbability(java.lang.String,java.util.Collection)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"CATALAN"},{"p":"opennlp.tools.stemmer.snowball","c":"catalanStemmer","l":"catalanStemmer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizer","l":"categorize(String[], Map<String, Object>)","url":"categorize(java.lang.String[],java.util.Map)"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerME","l":"categorize(String[], Map<String, Object>)","url":"categorize(java.lang.String[],java.util.Map)"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizer","l":"categorize(String[])","url":"categorize(java.lang.String[])"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerME","l":"categorize(String[])","url":"categorize(java.lang.String[])"},{"p":"opennlp.tools.cmdline.namefind","c":"CensusDictionaryCreatorTool","l":"CensusDictionaryCreatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"CharacterNgramFeatureGenerator","l":"CharacterNgramFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"CharacterNgramFeatureGenerator","l":"CharacterNgramFeatureGenerator(int, int)","url":"%3Cinit%3E(int,int)"},{"p":"opennlp.tools.util.featuregen","c":"CharacterNgramFeatureGeneratorFactory","l":"CharacterNgramFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats.letsmt","c":"LetsmtDocument.LetsmtDocumentHandler","l":"characters(char[], int, int)","url":"characters(char[],int,int)"},{"p":"opennlp.tools.formats.muc","c":"MucNameContentHandler","l":"characters(CharSequence)","url":"characters(java.lang.CharSequence)"},{"p":"opennlp.tools.formats.muc","c":"SgmlParser.ContentHandler","l":"characters(CharSequence)","url":"characters(java.lang.CharSequence)"},{"p":"opennlp.tools.parser","c":"ParserEventTypeEnum","l":"CHECK"},{"p":"opennlp.tools.parser.chunking","c":"CheckContextGenerator","l":"CheckContextGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser.treeinsert","c":"CheckContextGenerator","l":"CheckContextGenerator(Set<String>)","url":"%3Cinit%3E(java.util.Set)"},{"p":"opennlp.tools.ml.maxent.io","c":"GISModelReader","l":"checkModelType()"},{"p":"opennlp.tools.ml.maxent.io","c":"QNModelReader","l":"checkModelType()"},{"p":"opennlp.tools.ml.model","c":"AbstractModelReader","l":"checkModelType()"},{"p":"opennlp.tools.ml.model","c":"GenericModelReader","l":"checkModelType()"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModelReader","l":"checkModelType()"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModelReader","l":"checkModelType()"},{"p":"opennlp.tools.cmdline.parser","c":"CheckModelUpdaterTool","l":"CheckModelUpdaterTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser","c":"ParserEventTypeEnum","l":"CHUNK"},{"p":"opennlp.tools.chunker","c":"Chunker","l":"chunk(String[], String[])","url":"chunk(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.chunker","c":"ChunkerME","l":"chunk(String[], String[])","url":"chunk(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.chunker","c":"Chunker","l":"chunkAsSpans(String[], String[])","url":"chunkAsSpans(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.chunker","c":"ChunkerME","l":"chunkAsSpans(String[], String[])","url":"chunkAsSpans(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.parser","c":"ChunkContextGenerator","l":"ChunkContextGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser","c":"ChunkContextGenerator","l":"ChunkContextGenerator(int)","url":"%3Cinit%3E(int)"},{"p":"opennlp.tools.util","c":"DownloadUtil.ModelType","l":"CHUNKER"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerConverterTool","l":"ChunkerConverterTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.chunker","c":"ChunkerCrossValidator","l":"ChunkerCrossValidator(String, TrainingParameters, ChunkerFactory, ChunkerEvaluationMonitor...)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.util.TrainingParameters,opennlp.tools.chunker.ChunkerFactory,opennlp.tools.chunker.ChunkerEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerCrossValidatorTool","l":"ChunkerCrossValidatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerDetailedFMeasureListener","l":"ChunkerDetailedFMeasureListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.chunker","c":"ChunkerEvaluator","l":"ChunkerEvaluator(Chunker, ChunkerEvaluationMonitor...)","url":"%3Cinit%3E(opennlp.tools.chunker.Chunker,opennlp.tools.chunker.ChunkerEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerEvaluatorTool","l":"ChunkerEvaluatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.chunker","c":"ChunkerEventStream","l":"ChunkerEventStream(ObjectStream<ChunkSample>, ChunkerContextGenerator)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.chunker.ChunkerContextGenerator)"},{"p":"opennlp.tools.chunker","c":"ChunkerFactory","l":"ChunkerFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.chunker","c":"ChunkerME","l":"ChunkerME(ChunkerModel)","url":"%3Cinit%3E(opennlp.tools.chunker.ChunkerModel)"},{"p":"opennlp.tools.chunker","c":"ChunkerME","l":"ChunkerME(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerMETool","l":"ChunkerMETool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.chunker","c":"ChunkerModel","l":"ChunkerModel(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.chunker","c":"ChunkerModel","l":"ChunkerModel(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.chunker","c":"ChunkerModel","l":"ChunkerModel(Path)","url":"%3Cinit%3E(java.nio.file.Path)"},{"p":"opennlp.tools.chunker","c":"ChunkerModel","l":"ChunkerModel(String, MaxentModel, ChunkerFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,opennlp.tools.chunker.ChunkerFactory)"},{"p":"opennlp.tools.chunker","c":"ChunkerModel","l":"ChunkerModel(String, MaxentModel, int, Map<String, String>, ChunkerFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,int,java.util.Map,opennlp.tools.chunker.ChunkerFactory)"},{"p":"opennlp.tools.chunker","c":"ChunkerModel","l":"ChunkerModel(String, MaxentModel, Map<String, String>, ChunkerFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,java.util.Map,opennlp.tools.chunker.ChunkerFactory)"},{"p":"opennlp.tools.chunker","c":"ChunkerModel","l":"ChunkerModel(String, SequenceClassificationModel<String>, Map<String, String>, ChunkerFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.SequenceClassificationModel,java.util.Map,opennlp.tools.chunker.ChunkerFactory)"},{"p":"opennlp.tools.chunker","c":"ChunkerModel","l":"ChunkerModel(URL)","url":"%3Cinit%3E(java.net.URL)"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerModelLoader","l":"ChunkerModelLoader()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.model","c":"ChunkerModelSerializer","l":"ChunkerModelSerializer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerTrainerTool","l":"ChunkerTrainerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkEvaluationErrorListener","l":"ChunkEvaluationErrorListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkEvaluationErrorListener","l":"ChunkEvaluationErrorListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.parser","c":"ParserType","l":"CHUNKING"},{"p":"opennlp.tools.chunker","c":"ChunkSample","l":"ChunkSample(List<String>, List<String>, List<String>)","url":"%3Cinit%3E(java.util.List,java.util.List,java.util.List)"},{"p":"opennlp.tools.chunker","c":"ChunkSample","l":"ChunkSample(String[], String[], String[])","url":"%3Cinit%3E(java.lang.String[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.chunker","c":"ChunkSampleSequenceStream","l":"ChunkSampleSequenceStream(ObjectStream<ChunkSample>, ChunkerContextGenerator)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.chunker.ChunkerContextGenerator)"},{"p":"opennlp.tools.parser","c":"ChunkSampleStream","l":"ChunkSampleStream(ObjectStream<Parse>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.chunker","c":"ChunkSampleStream","l":"ChunkSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.namefind","c":"DefaultNameContextGenerator","l":"clearAdaptiveData()"},{"p":"opennlp.tools.namefind","c":"DictionaryNameFinder","l":"clearAdaptiveData()"},{"p":"opennlp.tools.namefind","c":"NameContextGenerator","l":"clearAdaptiveData()"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"clearAdaptiveData()"},{"p":"opennlp.tools.namefind","c":"RegexNameFinder","l":"clearAdaptiveData()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinder","l":"clearAdaptiveData()"},{"p":"opennlp.tools.util.featuregen","c":"AdaptiveFeatureGenerator","l":"clearAdaptiveData()"},{"p":"opennlp.tools.util.featuregen","c":"AggregatedFeatureGenerator","l":"clearAdaptiveData()"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGenerator","l":"clearAdaptiveData()"},{"p":"opennlp.tools.util.featuregen","c":"DocumentBeginFeatureGenerator","l":"clearAdaptiveData()"},{"p":"opennlp.tools.util.featuregen","c":"PreviousMapFeatureGenerator","l":"clearAdaptiveData()"},{"p":"opennlp.tools.util.featuregen","c":"PreviousTwoMapFeatureGenerator","l":"clearAdaptiveData()"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGenerator","l":"clearAdaptiveData()"},{"p":"opennlp.tools.parser","c":"Parse","l":"clone()"},{"p":"opennlp.tools.parser","c":"Parse","l":"clone(Parse)","url":"clone(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.parser","c":"Parse","l":"cloneRoot(Parse, int)","url":"cloneRoot(opennlp.tools.parser.Parse,int)"},{"p":"opennlp.tools.chunker","c":"ChunkSampleSequenceStream","l":"close()"},{"p":"opennlp.tools.formats","c":"BioNLP2004NameSampleStream","l":"close()"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream","l":"close()"},{"p":"opennlp.tools.formats","c":"Conll03NameSampleStream","l":"close()"},{"p":"opennlp.tools.formats","c":"DirectorySampleStream","l":"close()"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream","l":"close()"},{"p":"opennlp.tools.formats","c":"NameFinderCensus90NameStream","l":"close()"},{"p":"opennlp.tools.formats","c":"TwentyNewsgroupSampleStream","l":"close()"},{"p":"opennlp.tools.formats.ad","c":"ADChunkSampleStream","l":"close()"},{"p":"opennlp.tools.formats.ad","c":"ADNameSampleStream","l":"close()"},{"p":"opennlp.tools.formats.ad","c":"ADPOSSampleStream","l":"close()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceSampleStream","l":"close()"},{"p":"opennlp.tools.formats.brat","c":"BratAnnotationStream","l":"close()"},{"p":"opennlp.tools.formats.brat","c":"BratDocumentStream","l":"close()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluStream","l":"close()"},{"p":"opennlp.tools.formats.masc","c":"MascDocumentStream","l":"close()"},{"p":"opennlp.tools.formats.masc","c":"MascNamedEntitySampleStream","l":"close()"},{"p":"opennlp.tools.formats.masc","c":"MascPOSSampleStream","l":"close()"},{"p":"opennlp.tools.formats.masc","c":"MascSentenceSampleStream","l":"close()"},{"p":"opennlp.tools.formats.masc","c":"MascTokenSampleStream","l":"close()"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSampleSequenceStream","l":"close()"},{"p":"opennlp.tools.ml.maxent","c":"RealBasicEventStream","l":"close()"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryGISModelWriter","l":"close()"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryQNModelWriter","l":"close()"},{"p":"opennlp.tools.ml.model","c":"AbstractModelWriter","l":"close()"},{"p":"opennlp.tools.ml.model","c":"FileEventStream","l":"close()"},{"p":"opennlp.tools.ml.model","c":"GenericModelWriter","l":"close()"},{"p":"opennlp.tools.ml.model","c":"SequenceStreamEventStream","l":"close()"},{"p":"opennlp.tools.ml.naivebayes","c":"BinaryNaiveBayesModelWriter","l":"close()"},{"p":"opennlp.tools.ml.naivebayes","c":"PlainTextNaiveBayesModelWriter","l":"close()"},{"p":"opennlp.tools.ml.perceptron","c":"BinaryPerceptronModelWriter","l":"close()"},{"p":"opennlp.tools.namefind","c":"NameSampleSequenceStream","l":"close()"},{"p":"opennlp.tools.postag","c":"POSSampleSequenceStream","l":"close()"},{"p":"opennlp.tools.tokenize","c":"TokenizerStream","l":"close()"},{"p":"opennlp.tools.util","c":"AbstractEventStream","l":"close()"},{"p":"opennlp.tools.util","c":"AbstractObjectStream","l":"close()"},{"p":"opennlp.tools.util","c":"CollectionObjectStream","l":"close()"},{"p":"opennlp.tools.util","c":"FilterObjectStream","l":"close()"},{"p":"opennlp.tools.util","c":"ObjectStream","l":"close()"},{"p":"opennlp.tools.util","c":"PlainTextByLineStream","l":"close()"},{"p":"opennlp.tools.util.eval","c":"CrossValidationPartitioner.TrainingSampleStream","l":"close()"},{"p":"opennlp.tools.util.model","c":"UncloseableInputStream","l":"close()"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"collapsePunctuation(Parse[], Set<String>)","url":"collapsePunctuation(opennlp.tools.parser.Parse[],java.util.Set)"},{"p":"opennlp.tools.util","c":"CollectionObjectStream","l":"CollectionObjectStream(Collection<E>)","url":"%3Cinit%3E(java.util.Collection)"},{"p":"opennlp.tools.ml.model","c":"ComparableEvent","l":"ComparableEvent(int, int[], float[])","url":"%3Cinit%3E(int,int[],float[])"},{"p":"opennlp.tools.ml.model","c":"ComparableEvent","l":"ComparableEvent(int, int[])","url":"%3Cinit%3E(int,int[])"},{"p":"opennlp.tools.ml.model","c":"ComparablePredicate","l":"ComparablePredicate(String, int[], double[])","url":"%3Cinit%3E(java.lang.String,int[],double[])"},{"p":"opennlp.tools.ml.model","c":"ComparableEvent","l":"compareTo(ComparableEvent)","url":"compareTo(opennlp.tools.ml.model.ComparableEvent)"},{"p":"opennlp.tools.ml.model","c":"ComparablePredicate","l":"compareTo(ComparablePredicate)","url":"compareTo(opennlp.tools.ml.model.ComparablePredicate)"},{"p":"opennlp.tools.parser","c":"Parse","l":"compareTo(Parse)","url":"compareTo(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.util","c":"Sequence","l":"compareTo(Sequence)","url":"compareTo(opennlp.tools.util.Sequence)"},{"p":"opennlp.tools.util","c":"Span","l":"compareTo(Span)","url":"compareTo(opennlp.tools.util.Span)"},{"p":"opennlp.tools.util","c":"StringList","l":"compareToIgnoreCase(StringList)","url":"compareToIgnoreCase(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"COMPLETE"},{"p":"opennlp.tools.parser","c":"Parse","l":"complete()"},{"p":"opennlp.tools.util","c":"StringUtil","l":"computeShortestEditScript(String, String, int[][], StringBuffer)","url":"computeShortestEditScript(java.lang.String,java.lang.String,int[][],java.lang.StringBuffer)"},{"p":"opennlp.tools.util","c":"ObjectStreamUtils","l":"concatenateObjectStream(Collection<ObjectStream<T>>)","url":"concatenateObjectStream(java.util.Collection)"},{"p":"opennlp.tools.util","c":"ObjectStreamUtils","l":"concatenateObjectStream(ObjectStream<T>...)","url":"concatenateObjectStream(opennlp.tools.util.ObjectStream...)"},{"p":"opennlp.tools.postag","c":"ConfigurablePOSContextGenerator","l":"ConfigurablePOSContextGenerator(AdaptiveFeatureGenerator)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator)"},{"p":"opennlp.tools.postag","c":"ConfigurablePOSContextGenerator","l":"ConfigurablePOSContextGenerator(int, AdaptiveFeatureGenerator)","url":"%3Cinit%3E(int,opennlp.tools.util.featuregen.AdaptiveFeatureGenerator)"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream","l":"Conll02NameSampleStream(Conll02NameSampleStream.LANGUAGE, InputStreamFactory, int)","url":"%3Cinit%3E(opennlp.tools.formats.Conll02NameSampleStream.LANGUAGE,opennlp.tools.util.InputStreamFactory,int)"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream","l":"Conll02NameSampleStream(Conll02NameSampleStream.LANGUAGE, ObjectStream<String>, int)","url":"%3Cinit%3E(opennlp.tools.formats.Conll02NameSampleStream.LANGUAGE,opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.formats","c":"Conll03NameSampleStream","l":"Conll03NameSampleStream(Conll03NameSampleStream.LANGUAGE, InputStreamFactory, int)","url":"%3Cinit%3E(opennlp.tools.formats.Conll03NameSampleStream.LANGUAGE,opennlp.tools.util.InputStreamFactory,int)"},{"p":"opennlp.tools.formats","c":"Conll03NameSampleStream","l":"Conll03NameSampleStream(Conll03NameSampleStream.LANGUAGE, ObjectStream<String>, int)","url":"%3Cinit%3E(opennlp.tools.formats.Conll03NameSampleStream.LANGUAGE,opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.formats.conllu","c":"ConlluPOSSampleStreamFactory","l":"CONLLU_FORMAT"},{"p":"opennlp.tools.formats.conllu","c":"ConlluLemmaSampleStream","l":"ConlluLemmaSampleStream(ObjectStream<ConlluSentence>, ConlluTagset)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.formats.conllu.ConlluTagset)"},{"p":"opennlp.tools.formats.conllu","c":"ConlluPOSSampleStream","l":"ConlluPOSSampleStream(ObjectStream<ConlluSentence>, ConlluTagset)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.formats.conllu.ConlluTagset)"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentence","l":"ConlluSentence(List<ConlluWordLine>, String, String, boolean, String, boolean, String, Map<Locale, String>, String)","url":"%3Cinit%3E(java.util.List,java.lang.String,java.lang.String,boolean,java.lang.String,boolean,java.lang.String,java.util.Map,java.lang.String)"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentenceSampleStream","l":"ConlluSentenceSampleStream(ObjectStream<ConlluSentence>, int)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.formats.conllu","c":"ConlluStream","l":"ConlluStream(InputStreamFactory)","url":"%3Cinit%3E(opennlp.tools.util.InputStreamFactory)"},{"p":"opennlp.tools.formats.conllu","c":"ConlluTokenSampleStream","l":"ConlluTokenSampleStream(ObjectStream<ConlluSentence>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats","c":"ConllXPOSSampleStreamFactory","l":"CONLLX_FORMAT"},{"p":"opennlp.tools.formats","c":"ConllXPOSSampleStream","l":"ConllXPOSSampleStream(InputStreamFactory, Charset)","url":"%3Cinit%3E(opennlp.tools.util.InputStreamFactory,java.nio.charset.Charset)"},{"p":"opennlp.tools.formats","c":"ConllXPOSSampleStream","l":"ConllXPOSSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.parser","c":"Cons","l":"Cons(String, String, int, boolean)","url":"%3Cinit%3E(java.lang.String,java.lang.String,int,boolean)"},{"p":"opennlp.tools.parser","c":"Constituent","l":"Constituent(String, Span)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.util.Span)"},{"p":"opennlp.tools.ml.maxent.io","c":"GISModelReader","l":"constructModel()"},{"p":"opennlp.tools.ml.maxent.io","c":"QNModelReader","l":"constructModel()"},{"p":"opennlp.tools.ml.model","c":"AbstractModelReader","l":"constructModel()"},{"p":"opennlp.tools.ml.model","c":"GenericModelReader","l":"constructModel()"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModelReader","l":"constructModel()"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModelReader","l":"constructModel()"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"CONT"},{"p":"opennlp.tools.ml.model","c":"MutableContext","l":"contains(int)"},{"p":"opennlp.tools.util","c":"Span","l":"contains(int)"},{"p":"opennlp.tools.util","c":"Span","l":"contains(Span)","url":"contains(opennlp.tools.util.Span)"},{"p":"opennlp.tools.dictionary","c":"Index","l":"contains(String)","url":"contains(java.lang.String)"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"contains(String)","url":"contains(java.lang.String)"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"contains(StringList)","url":"contains(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"contains(StringList)","url":"contains(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"containsComma()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"containsDigit()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"containsHyphen()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"containsLetters()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"containsPeriod()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"containsSlash()"},{"p":"opennlp.tools.formats.muc","c":"SgmlParser.ContentHandler","l":"ContentHandler()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.model","c":"Context","l":"Context(int[], double[])","url":"%3Cinit%3E(int[],double[])"},{"p":"opennlp.tools.namefind","c":"BilouCodec","l":"CONTINUE"},{"p":"opennlp.tools.namefind","c":"BioCodec","l":"CONTINUE"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"CONTINUE"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"CONVERGE_TOLERANCE"},{"p":"opennlp.tools.formats.ad","c":"ADChunkSampleStream","l":"convertFuncTag(String, boolean)","url":"convertFuncTag(java.lang.String,boolean)"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatFineGrainedReportListener","l":"correctlyClassified(DocumentSample, DocumentSample)","url":"correctlyClassified(opennlp.tools.doccat.DocumentSample,opennlp.tools.doccat.DocumentSample)"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorFineGrainedReportListener","l":"correctlyClassified(LanguageSample, LanguageSample)","url":"correctlyClassified(opennlp.tools.langdetect.LanguageSample,opennlp.tools.langdetect.LanguageSample)"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerFineGrainedReportListener","l":"correctlyClassified(LemmaSample, LemmaSample)","url":"correctlyClassified(opennlp.tools.lemmatizer.LemmaSample,opennlp.tools.lemmatizer.LemmaSample)"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderFineGrainedReportListener","l":"correctlyClassified(NameSample, NameSample)","url":"correctlyClassified(opennlp.tools.namefind.NameSample,opennlp.tools.namefind.NameSample)"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerFineGrainedReportListener","l":"correctlyClassified(POSSample, POSSample)","url":"correctlyClassified(opennlp.tools.postag.POSSample,opennlp.tools.postag.POSSample)"},{"p":"opennlp.tools.util.eval","c":"EvaluationMonitor","l":"correctlyClassified(T, T)","url":"correctlyClassified(T,T)"},{"p":"opennlp.tools.util.eval","c":"Mean","l":"count()"},{"p":"opennlp.tools.util.featuregen","c":"AggregatedFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"BigramNameFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterBigramFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterTokenClassFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterTokenFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"CharacterNgramFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"DefinitionFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"DictionaryFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"DocumentBeginFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"POSTaggerNameFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"PosTaggerFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"PrefixFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"PreviousMapFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"SentenceFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"SuffixFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"TokenClassFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"TokenFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"TokenPatternFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"TrigramNameFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterFeatureGeneratorFactory","l":"create()"},{"p":"opennlp.tools.util","c":"BaseToolFactory","l":"create(Class<? extends BaseToolFactory>, ArtifactProvider)","url":"create(java.lang.Class,opennlp.tools.util.model.ArtifactProvider)"},{"p":"opennlp.tools.util.featuregen","c":"AggregatedFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"BigramNameFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterBigramFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterTokenClassFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterTokenFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"CharacterNgramFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"DefinitionFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"DictionaryFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"DocumentBeginFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"POSTaggerNameFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"PosTaggerFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"PrefixFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"PreviousMapFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"SentenceFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"SuffixFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"TokenClassFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"TokenFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"TokenPatternFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"TrigramNameFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterFeatureGeneratorFactory","l":"create(Element, FeatureGeneratorResourceProvider)","url":"create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.dictionary.serializer","c":"DictionaryEntryPersistor","l":"create(InputStream, EntryInserter)","url":"create(java.io.InputStream,opennlp.tools.dictionary.serializer.EntryInserter)"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory","l":"create(InputStream, FeatureGeneratorResourceProvider)","url":"create(java.io.InputStream,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules.HeadRulesSerializer","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.parser.lang.es","c":"AncoraSpanishHeadRules.HeadRulesSerializer","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory.POSDictionarySerializer","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.util.featuregen","c":"BrownCluster.BrownClusterSerializer","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterDictionary.WordClusterDictionarySerializer","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.util.model","c":"ArtifactSerializer","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.util.model","c":"ByteArraySerializer","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.util.model","c":"ChunkerModelSerializer","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.util.model","c":"DictionarySerializer","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.util.model","c":"GenericModelSerializer","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.util.model","c":"POSModelSerializer","l":"create(InputStream)","url":"create(java.io.InputStream)"},{"p":"opennlp.tools.parser","c":"ParserFactory","l":"create(ParserModel, int, double)","url":"create(opennlp.tools.parser.ParserModel,int,double)"},{"p":"opennlp.tools.parser","c":"ParserFactory","l":"create(ParserModel)","url":"create(opennlp.tools.parser.ParserModel)"},{"p":"opennlp.tools.util","c":"BaseToolFactory","l":"create(String, ArtifactProvider)","url":"create(java.lang.String,opennlp.tools.util.model.ArtifactProvider)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderFactory","l":"create(String, byte[], Map<String, Object>, SequenceCodec<String>)","url":"create(java.lang.String,byte[],java.util.Map,opennlp.tools.util.SequenceCodec)"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"create(String, byte[], Map<String, Object>, TagDictionary)","url":"create(java.lang.String,byte[],java.util.Map,opennlp.tools.postag.TagDictionary)"},{"p":"opennlp.tools.doccat","c":"DoccatFactory","l":"create(String, FeatureGenerator[])","url":"create(java.lang.String,opennlp.tools.doccat.FeatureGenerator[])"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"create(String, String, boolean, Dictionary, char[])","url":"create(java.lang.String,java.lang.String,boolean,opennlp.tools.dictionary.Dictionary,char[])"},{"p":"opennlp.tools.tokenize","c":"TokenizerFactory","l":"create(String, String, Dictionary, boolean, Pattern)","url":"create(java.lang.String,java.lang.String,opennlp.tools.dictionary.Dictionary,boolean,java.util.regex.Pattern)"},{"p":"opennlp.tools.chunker","c":"ChunkerFactory","l":"create(String)","url":"create(java.lang.String)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorFactory","l":"create(String)","url":"create(java.lang.String)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerFactory","l":"create(String)","url":"create(java.lang.String)"},{"p":"opennlp.tools.util","c":"TokenTag","l":"create(String[], String[])","url":"create(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.formats","c":"BioNLP2004NameSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"ChunkerSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"Conll03NameSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"ConllXPOSSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"ConllXSentenceSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"ConllXTokenSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"DocumentSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"LanguageDetectorSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"LemmatizerSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"NameSampleDataStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"ParseSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"SentenceSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"TokenSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"TwentyNewsgroupSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"WordTagSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.ad","c":"ADChunkSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.ad","c":"ADNameSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.ad","c":"ADPOSSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.ad","c":"ADTokenSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.brat","c":"BratNameSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.conllu","c":"ConlluLemmaSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.conllu","c":"ConlluPOSSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentenceSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.conllu","c":"ConlluTokenSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.convert","c":"NameToSentenceSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.convert","c":"NameToTokenSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.convert","c":"POSToSentenceSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.convert","c":"POSToTokenSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.convert","c":"ParseToPOSSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.convert","c":"ParseToSentenceSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.convert","c":"ParseToTokenSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.frenchtreebank","c":"ConstitParseSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankSentenceStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankTokenSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.leipzig","c":"LeipzigLanguageSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.letsmt","c":"LetsmtSentenceStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.masc","c":"MascNamedEntitySampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.masc","c":"MascPOSSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.masc","c":"MascSentenceSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.masc","c":"MascTokenSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.moses","c":"MosesSentenceSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.muc","c":"Muc6NameSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.nkjp","c":"NKJPSentenceSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesNameSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesPOSSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesParseSampleStreamFactory","l":"create(String[])","url":"create(java.lang.String[])"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"createArtifactMap()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"createArtifactMap()"},{"p":"opennlp.tools.tokenize","c":"TokenizerFactory","l":"createArtifactMap()"},{"p":"opennlp.tools.util","c":"BaseToolFactory","l":"createArtifactMap()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"createArtifactSerializers()"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"createArtifactSerializersMap()"},{"p":"opennlp.tools.util","c":"BaseToolFactory","l":"createArtifactSerializersMap()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderFactory","l":"createContextGenerator()"},{"p":"opennlp.tools.util.model","c":"ModelUtil","l":"createDefaultTrainingParameters()"},{"p":"opennlp.tools.cmdline.namefind","c":"CensusDictionaryCreatorTool","l":"createDictionary(ObjectStream<StringList>)","url":"createDictionary(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.util","c":"XmlUtil","l":"createDocumentBuilder()"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"createEmptyTagDictionary()"},{"p":"opennlp.tools.sentdetect.lang","c":"Factory","l":"createEndOfSentenceScanner(char[])"},{"p":"opennlp.tools.sentdetect.lang","c":"Factory","l":"createEndOfSentenceScanner(String)","url":"createEndOfSentenceScanner(java.lang.String)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderFactory","l":"createFeatureGenerators()"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"createFeatureGenerators()"},{"p":"opennlp.tools.util.featuregen","c":"AdaptiveFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"AdditionalContextFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"AggregatedFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"BigramNameFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"BrownBigramFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"BrownTokenClassFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"BrownTokenFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"CharacterNgramFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"DictionaryFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"DocumentBeginFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"InSpanGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"OutcomePriorFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"POSTaggerNameFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"PosTaggerFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"PrefixFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"PreviousMapFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"PreviousTwoMapFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"SentenceFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"SuffixFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"TokenClassFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"TokenFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"TokenPatternFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"TrigramNameFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterFeatureGenerator","l":"createFeatures(List<String>, String[], int, String[])","url":"createFeatures(java.util.List,java.lang.String[],int,java.lang.String[])"},{"p":"opennlp.tools.util","c":"InputStreamFactory","l":"createInputStream()"},{"p":"opennlp.tools.util","c":"MarkableFileInputStreamFactory","l":"createInputStream()"},{"p":"opennlp.tools.doccat","c":"DoccatFactory","l":"createManifestEntries()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"createManifestEntries()"},{"p":"opennlp.tools.tokenize","c":"TokenizerFactory","l":"createManifestEntries()"},{"p":"opennlp.tools.util","c":"BaseToolFactory","l":"createManifestEntries()"},{"p":"opennlp.tools.util","c":"ObjectStreamUtils","l":"createObjectStream(Collection<T>)","url":"createObjectStream(java.util.Collection)"},{"p":"opennlp.tools.util","c":"ObjectStreamUtils","l":"createObjectStream(T...)"},{"p":"opennlp.tools.util","c":"XmlUtil","l":"createSaxParser()"},{"p":"opennlp.tools.sentdetect.lang","c":"Factory","l":"createSentenceContextGenerator(Set<String>, char[])","url":"createSentenceContextGenerator(java.util.Set,char[])"},{"p":"opennlp.tools.sentdetect.lang","c":"Factory","l":"createSentenceContextGenerator(String, Set<String>)","url":"createSentenceContextGenerator(java.lang.String,java.util.Set)"},{"p":"opennlp.tools.sentdetect.lang","c":"Factory","l":"createSentenceContextGenerator(String)","url":"createSentenceContextGenerator(java.lang.String)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderFactory","l":"createSequenceCodec()"},{"p":"opennlp.tools.namefind","c":"BilouCodec","l":"createSequenceValidator()"},{"p":"opennlp.tools.namefind","c":"BioCodec","l":"createSequenceValidator()"},{"p":"opennlp.tools.util","c":"SequenceCodec","l":"createSequenceValidator()"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"createTagDictionary(File)","url":"createTagDictionary(java.io.File)"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"createTagDictionary(InputStream)","url":"createTagDictionary(java.io.InputStream)"},{"p":"opennlp.tools.tokenize.lang","c":"Factory","l":"createTokenContextGenerator(String, Set<String>)","url":"createTokenContextGenerator(java.lang.String,java.util.Set)"},{"p":"opennlp.tools.util","c":"Span","l":"crosses(Span)","url":"crosses(opennlp.tools.util.Span)"},{"p":"opennlp.tools.util.eval","c":"CrossValidationPartitioner","l":"CrossValidationPartitioner(Collection<E>, int)","url":"%3Cinit%3E(java.util.Collection,int)"},{"p":"opennlp.tools.util.eval","c":"CrossValidationPartitioner","l":"CrossValidationPartitioner(ObjectStream<E>, int)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.util","c":"Version","l":"currentVersion()"},{"p":"opennlp.tools.util.featuregen","c":"CustomFeatureGenerator","l":"CustomFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"CUTOFF_DEFAULT"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"CUTOFF_DEFAULT"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"CUTOFF_DEFAULT_VALUE"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"CUTOFF_PARAM"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"CUTOFF_PARAM"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"CUTOFF_PARAM"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"cutoff(int, int)","url":"cutoff(int,int)"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"cutoff(int, int)","url":"cutoff(int,int)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"DANISH"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"DATA_INDEXER_ONE_PASS_REAL_VALUE"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"DATA_INDEXER_ONE_PASS_VALUE"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"DATA_INDEXER_PARAM"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"DATA_INDEXER_TWO_PASS_VALUE"},{"p":"opennlp.tools.ml.model","c":"DataIndexerFactory","l":"DataIndexerFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats","c":"Conll03NameSampleStream.LANGUAGE","l":"DE"},{"p":"opennlp.tools.namefind","c":"BilouCodec","l":"decode(List<String>)","url":"decode(java.util.List)"},{"p":"opennlp.tools.namefind","c":"BioCodec","l":"decode(List<String>)","url":"decode(java.util.List)"},{"p":"opennlp.tools.util","c":"SequenceCodec","l":"decode(List<T>)","url":"decode(java.util.List)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"decodeLemmas(String[], String[])","url":"decodeLemmas(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.util","c":"StringUtil","l":"decodeShortestEditScript(String, String)","url":"decodeShortestEditScript(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.tokenize.lang","c":"Factory","l":"DEFAULT_ALPHANUMERIC"},{"p":"opennlp.tools.chunker","c":"ChunkerME","l":"DEFAULT_BEAM_SIZE"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"DEFAULT_BEAM_SIZE"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"DEFAULT_BEAM_SIZE"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"DEFAULT_BEAM_SIZE"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"DEFAULT_CHUNK_SIZE"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"DEFAULT_LANGUAGE_DETECTOR_CONFIG"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"DEFAULT_MAX_LENGTH"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"DEFAULT_MIN_CONSEC_IMPROVEMENTS"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"DEFAULT_MIN_DIFF"},{"p":"opennlp.tools.tokenize","c":"TokenSample","l":"DEFAULT_SEPARATOR_CHARS"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"DEFAULT_TYPE"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"defaultAdvancePercentage"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"defaultBeamSize"},{"p":"opennlp.tools.chunker","c":"DefaultChunkerContextGenerator","l":"DefaultChunkerContextGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.chunker","c":"DefaultChunkerSequenceValidator","l":"DefaultChunkerSequenceValidator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.sentdetect","c":"DefaultEndOfSentenceScanner","l":"DefaultEndOfSentenceScanner(char[])","url":"%3Cinit%3E(char[])"},{"p":"opennlp.tools.sentdetect.lang","c":"Factory","l":"defaultEosCharacters"},{"p":"opennlp.tools.langdetect","c":"DefaultLanguageDetectorContextGenerator","l":"DefaultLanguageDetectorContextGenerator(int, int, CharSequenceNormalizer...)","url":"%3Cinit%3E(int,int,opennlp.tools.util.normalizer.CharSequenceNormalizer...)"},{"p":"opennlp.tools.lemmatizer","c":"DefaultLemmatizerContextGenerator","l":"DefaultLemmatizerContextGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.lemmatizer","c":"DefaultLemmatizerSequenceValidator","l":"DefaultLemmatizerSequenceValidator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"DefaultNameContextGenerator","l":"DefaultNameContextGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"DefaultNameContextGenerator","l":"DefaultNameContextGenerator(AdaptiveFeatureGenerator...)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator...)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"defaultParams()"},{"p":"opennlp.tools.postag","c":"DefaultPOSContextGenerator","l":"DefaultPOSContextGenerator(Dictionary)","url":"%3Cinit%3E(opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.postag","c":"DefaultPOSContextGenerator","l":"DefaultPOSContextGenerator(int, Dictionary)","url":"%3Cinit%3E(int,opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.postag","c":"DefaultPOSSequenceValidator","l":"DefaultPOSSequenceValidator(TagDictionary)","url":"%3Cinit%3E(opennlp.tools.postag.TagDictionary)"},{"p":"opennlp.tools.sentdetect","c":"DefaultSDContextGenerator","l":"DefaultSDContextGenerator(char[])","url":"%3Cinit%3E(char[])"},{"p":"opennlp.tools.sentdetect","c":"DefaultSDContextGenerator","l":"DefaultSDContextGenerator(Set<String>, char[])","url":"%3Cinit%3E(java.util.Set,char[])"},{"p":"opennlp.tools.tokenize","c":"DefaultTokenContextGenerator","l":"DefaultTokenContextGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize","c":"DefaultTokenContextGenerator","l":"DefaultTokenContextGenerator(Set<String>)","url":"%3Cinit%3E(java.util.Set)"},{"p":"opennlp.tools.util.featuregen","c":"DefinitionFeatureGeneratorFactory","l":"DefinitionFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory.DEFAULT_REGEX_NAME_FINDER","l":"DEGREES_MIN_SEC_LAT_LON"},{"p":"opennlp.tools.cmdline.tokenizer","c":"DetokenEvaluationErrorListener","l":"DetokenEvaluationErrorListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"DetokenEvaluationErrorListener","l":"DetokenEvaluationErrorListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary","l":"DetokenizationDictionary(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary","l":"DetokenizationDictionary(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary","l":"DetokenizationDictionary(Path)","url":"%3Cinit%3E(java.nio.file.Path)"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary","l":"DetokenizationDictionary(String[], DetokenizationDictionary.Operation[])","url":"%3Cinit%3E(java.lang.String[],opennlp.tools.tokenize.DetokenizationDictionary.Operation[])"},{"p":"opennlp.tools.tokenize","c":"Detokenizer","l":"detokenize(String[], String)","url":"detokenize(java.lang.String[],java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"DictionaryDetokenizer","l":"detokenize(String[], String)","url":"detokenize(java.lang.String[],java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"Detokenizer","l":"detokenize(String[])","url":"detokenize(java.lang.String[])"},{"p":"opennlp.tools.tokenize","c":"DictionaryDetokenizer","l":"detokenize(String[])","url":"detokenize(java.lang.String[])"},{"p":"opennlp.tools.tokenize","c":"DetokenizerEvaluator","l":"DetokenizerEvaluator(Detokenizer, DetokenEvaluationErrorListener...)","url":"%3Cinit%3E(opennlp.tools.tokenize.Detokenizer,opennlp.tools.cmdline.tokenizer.DetokenEvaluationErrorListener...)"},{"p":"opennlp.tools.formats.letsmt","c":"DetokenizeSentenceSampleStream","l":"DetokenizeSentenceSampleStream(Detokenizer, ObjectStream<SentenceSample>)","url":"%3Cinit%3E(opennlp.tools.tokenize.Detokenizer,opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.util","c":"Version","l":"DEV_VERSION"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"Dictionary()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"Dictionary(boolean)","url":"%3Cinit%3E(boolean)"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"Dictionary(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.cmdline.dictionary","c":"DictionaryBuilderTool","l":"DictionaryBuilderTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize","c":"DictionaryDetokenizer","l":"DictionaryDetokenizer(DetokenizationDictionary)","url":"%3Cinit%3E(opennlp.tools.tokenize.DetokenizationDictionary)"},{"p":"opennlp.tools.cmdline.tokenizer","c":"DictionaryDetokenizerTool","l":"DictionaryDetokenizerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.dictionary.serializer","c":"DictionaryEntryPersistor","l":"DictionaryEntryPersistor()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"DictionaryFeatureGenerator","l":"DictionaryFeatureGenerator(Dictionary)","url":"%3Cinit%3E(opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.util.featuregen","c":"DictionaryFeatureGenerator","l":"DictionaryFeatureGenerator(String, Dictionary)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.util.featuregen","c":"DictionaryFeatureGeneratorFactory","l":"DictionaryFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.lemmatizer","c":"DictionaryLemmatizer","l":"DictionaryLemmatizer(File, Charset)","url":"%3Cinit%3E(java.io.File,java.nio.charset.Charset)"},{"p":"opennlp.tools.lemmatizer","c":"DictionaryLemmatizer","l":"DictionaryLemmatizer(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.lemmatizer","c":"DictionaryLemmatizer","l":"DictionaryLemmatizer(InputStream, Charset)","url":"%3Cinit%3E(java.io.InputStream,java.nio.charset.Charset)"},{"p":"opennlp.tools.lemmatizer","c":"DictionaryLemmatizer","l":"DictionaryLemmatizer(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.lemmatizer","c":"DictionaryLemmatizer","l":"DictionaryLemmatizer(Path)","url":"%3Cinit%3E(java.nio.file.Path)"},{"p":"opennlp.tools.namefind","c":"DictionaryNameFinder","l":"DictionaryNameFinder(Dictionary, String)","url":"%3Cinit%3E(opennlp.tools.dictionary.Dictionary,java.lang.String)"},{"p":"opennlp.tools.namefind","c":"DictionaryNameFinder","l":"DictionaryNameFinder(Dictionary)","url":"%3Cinit%3E(opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.util.model","c":"DictionarySerializer","l":"DictionarySerializer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"digits()"},{"p":"opennlp.tools.util.wordvector","c":"WordVector","l":"dimension()"},{"p":"opennlp.tools.util.wordvector","c":"WordVectorTable","l":"dimension()"},{"p":"opennlp.tools.formats","c":"DirectorySampleStream","l":"DirectorySampleStream(File, FileFilter, boolean)","url":"%3Cinit%3E(java.io.File,java.io.FileFilter,boolean)"},{"p":"opennlp.tools.formats","c":"DirectorySampleStream","l":"DirectorySampleStream(File[], FileFilter, boolean)","url":"%3Cinit%3E(java.io.File[],java.io.FileFilter,boolean)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbabilities","l":"discardCountsBelow(double)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"discardCountsBelow(double)"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatConverterTool","l":"DoccatConverterTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.doccat","c":"DoccatCrossValidator","l":"DoccatCrossValidator(String, TrainingParameters, DoccatFactory, DoccatEvaluationMonitor...)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.util.TrainingParameters,opennlp.tools.doccat.DoccatFactory,opennlp.tools.doccat.DoccatEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatCrossValidatorTool","l":"DoccatCrossValidatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatEvaluationErrorListener","l":"DoccatEvaluationErrorListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatEvaluationErrorListener","l":"DoccatEvaluationErrorListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatEvaluatorTool","l":"DoccatEvaluatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.doccat","c":"DoccatFactory","l":"DoccatFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.doccat","c":"DoccatFactory","l":"DoccatFactory(FeatureGenerator[])","url":"%3Cinit%3E(opennlp.tools.doccat.FeatureGenerator[])"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatFineGrainedReportListener","l":"DoccatFineGrainedReportListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatFineGrainedReportListener","l":"DoccatFineGrainedReportListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.doccat","c":"DoccatModel","l":"DoccatModel(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.doccat","c":"DoccatModel","l":"DoccatModel(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.doccat","c":"DoccatModel","l":"DoccatModel(Path)","url":"%3Cinit%3E(java.nio.file.Path)"},{"p":"opennlp.tools.doccat","c":"DoccatModel","l":"DoccatModel(String, MaxentModel, Map<String, String>, DoccatFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,java.util.Map,opennlp.tools.doccat.DoccatFactory)"},{"p":"opennlp.tools.doccat","c":"DoccatModel","l":"DoccatModel(URL)","url":"%3Cinit%3E(java.net.URL)"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatModelLoader","l":"DoccatModelLoader()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatTool","l":"DoccatTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatTrainerTool","l":"DoccatTrainerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch","l":"doConstrainedLineSearch(Function, double[], LineSearch.LineSearchResult, double, double)","url":"doConstrainedLineSearch(opennlp.tools.ml.maxent.quasinewton.Function,double[],opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult,double,double)"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream","l":"DOCSTART"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream","l":"DOCSTART"},{"p":"opennlp.tools.util.featuregen","c":"DocumentBeginFeatureGenerator","l":"DocumentBeginFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"DocumentBeginFeatureGeneratorFactory","l":"DocumentBeginFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerEvaluator","l":"DocumentCategorizerEvaluator(DocumentCategorizer, DoccatEvaluationMonitor...)","url":"%3Cinit%3E(opennlp.tools.doccat.DocumentCategorizer,opennlp.tools.doccat.DoccatEvaluationMonitor...)"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerEventStream","l":"DocumentCategorizerEventStream(ObjectStream<DocumentSample>, FeatureGenerator...)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.doccat.FeatureGenerator...)"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerEventStream","l":"DocumentCategorizerEventStream(ObjectStream<DocumentSample>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerME","l":"DocumentCategorizerME(DoccatModel)","url":"%3Cinit%3E(opennlp.tools.doccat.DoccatModel)"},{"p":"opennlp.tools.doccat","c":"DocumentSample","l":"DocumentSample(String, String[], Map<String, Object>)","url":"%3Cinit%3E(java.lang.String,java.lang.String[],java.util.Map)"},{"p":"opennlp.tools.doccat","c":"DocumentSample","l":"DocumentSample(String, String[])","url":"%3Cinit%3E(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.doccat","c":"DocumentSampleStream","l":"DocumentSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats.ontonotes","c":"DocumentToLineStream","l":"DocumentToLineStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch","l":"doLineSearch(Function, double[], LineSearch.LineSearchResult, double)","url":"doLineSearch(opennlp.tools.ml.maxent.quasinewton.Function,double[],opennlp.tools.ml.maxent.quasinewton.LineSearch.LineSearchResult,double)"},{"p":"opennlp.tools.parser.treeinsert","c":"Parser","l":"DONE"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"doTrain(DataIndexer)","url":"doTrain(opennlp.tools.ml.model.DataIndexer)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"doTrain(DataIndexer)","url":"doTrain(opennlp.tools.ml.model.DataIndexer)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"doTrain(DataIndexer)","url":"doTrain(opennlp.tools.ml.model.DataIndexer)"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesTrainer","l":"doTrain(DataIndexer)","url":"doTrain(opennlp.tools.ml.model.DataIndexer)"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"doTrain(DataIndexer)","url":"doTrain(opennlp.tools.ml.model.DataIndexer)"},{"p":"opennlp.tools.ml","c":"AbstractEventModelSequenceTrainer","l":"doTrain(SequenceStream<Event>)","url":"doTrain(opennlp.tools.ml.model.SequenceStream)"},{"p":"opennlp.tools.ml.perceptron","c":"SimplePerceptronSequenceTrainer","l":"doTrain(SequenceStream<Event>)","url":"doTrain(opennlp.tools.ml.model.SequenceStream)"},{"p":"opennlp.tools.util.wordvector","c":"WordVectorType","l":"DOUBLE"},{"p":"opennlp.tools.util","c":"DownloadUtil","l":"downloadModel(String, DownloadUtil.ModelType, Class<T>)","url":"downloadModel(java.lang.String,opennlp.tools.util.DownloadUtil.ModelType,java.lang.Class)"},{"p":"opennlp.tools.util","c":"DownloadUtil","l":"downloadModel(URL, Class<T>)","url":"downloadModel(java.net.URL,java.lang.Class)"},{"p":"opennlp.tools.util","c":"DownloadUtil","l":"DownloadUtil()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"dropOverlappingSpans(Span[])","url":"dropOverlappingSpans(opennlp.tools.util.Span[])"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"DUTCH"},{"p":"opennlp.tools.ml.model","c":"DynamicEvalParameters","l":"DynamicEvalParameters(List<? extends Context>, int)","url":"%3Cinit%3E(java.util.List,int)"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory.DEFAULT_REGEX_NAME_FINDER","l":"EMAIL"},{"p":"opennlp.tools.util.normalizer","c":"EmojiCharSequenceNormalizer","l":"EmojiCharSequenceNormalizer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.sentdetect","c":"EmptyLinePreprocessorStream","l":"EmptyLinePreprocessorStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats","c":"Conll03NameSampleStream.LANGUAGE","l":"EN"},{"p":"opennlp.tools.namefind","c":"BilouCodec","l":"encode(Span[], int)","url":"encode(opennlp.tools.util.Span[],int)"},{"p":"opennlp.tools.namefind","c":"BioCodec","l":"encode(Span[], int)","url":"encode(opennlp.tools.util.Span[],int)"},{"p":"opennlp.tools.util","c":"SequenceCodec","l":"encode(Span[], int)","url":"encode(opennlp.tools.util.Span[],int)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"encodeLemmas(String[], String[])","url":"encodeLemmas(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.namefind","c":"NameSampleDataStream","l":"END_TAG"},{"p":"opennlp.tools.formats.letsmt","c":"LetsmtDocument.LetsmtDocumentHandler","l":"endElement(String, String, String)","url":"endElement(java.lang.String,java.lang.String,java.lang.String)"},{"p":"opennlp.tools.formats.masc","c":"MascPennTagParser","l":"endElement(String, String, String)","url":"endElement(java.lang.String,java.lang.String,java.lang.String)"},{"p":"opennlp.tools.formats.muc","c":"MucNameContentHandler","l":"endElement(String)","url":"endElement(java.lang.String)"},{"p":"opennlp.tools.formats.muc","c":"SgmlParser.ContentHandler","l":"endElement(String)","url":"endElement(java.lang.String)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"ENGLISH"},{"p":"opennlp.tools.formats.brat","c":"AnnotationConfiguration","l":"ENTITY_TYPE"},{"p":"opennlp.tools.entitylinker","c":"EntityLinkerFactory","l":"EntityLinkerFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.entitylinker","c":"EntityLinkerProperties","l":"EntityLinkerProperties(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.entitylinker","c":"EntityLinkerProperties","l":"EntityLinkerProperties(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.cmdline.entitylinker","c":"EntityLinkerTool","l":"EntityLinkerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.dictionary.serializer","c":"Entry","l":"Entry(StringList, Attributes)","url":"%3Cinit%3E(opennlp.tools.util.StringList,opennlp.tools.dictionary.serializer.Attributes)"},{"p":"opennlp.tools.sentdetect.lang.th","c":"SentenceContextGenerator","l":"eosCharacters"},{"p":"opennlp.tools.chunker","c":"ChunkSample","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.doccat","c":"DocumentSample","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.langdetect","c":"Language","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.langdetect","c":"LanguageSample","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSample","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.ml.maxent","c":"GISModel","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.ml.model","c":"AbstractModel","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.ml.model","c":"ComparableEvent","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.ml.model","c":"ComparablePredicate","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.ml.model","c":"Context","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.ml.model","c":"EvalParameters","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.ml.model","c":"UniformPrior","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModel","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.parser","c":"Parse","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.parser.lang.es","c":"AncoraSpanishHeadRules","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.postag","c":"POSModel","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.postag","c":"POSSample","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.sentdetect","c":"SentenceSample","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.stemmer.snowball","c":"arabicStemmer","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.stemmer.snowball","c":"catalanStemmer","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.stemmer.snowball","c":"greekStemmer","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.stemmer.snowball","c":"indonesianStemmer","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.stemmer.snowball","c":"irishStemmer","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.tokenize","c":"TokenSample","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.tokenize","c":"TokenizerModel","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.util","c":"Sequence","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.util","c":"Span","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.util","c":"StringList","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.util","c":"TokenTag","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.util","c":"Version","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"opennlp.tools.ml.maxent","c":"GISModel","l":"eval(int[], double[], EvalParameters)","url":"eval(int[],double[],opennlp.tools.ml.model.EvalParameters)"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModel","l":"eval(int[], double[], EvalParameters)","url":"eval(int[],double[],opennlp.tools.ml.model.EvalParameters)"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModel","l":"eval(int[], double[], EvalParameters)","url":"eval(int[],double[],opennlp.tools.ml.model.EvalParameters)"},{"p":"opennlp.tools.ml.maxent","c":"GISModel","l":"eval(String[], double[])","url":"eval(java.lang.String[],double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNModel","l":"eval(String[], double[])","url":"eval(java.lang.String[],double[])"},{"p":"opennlp.tools.ml.model","c":"MaxentModel","l":"eval(String[], double[])","url":"eval(java.lang.String[],double[])"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModel","l":"eval(String[], double[])","url":"eval(java.lang.String[],double[])"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModel","l":"eval(String[], double[])","url":"eval(java.lang.String[],double[])"},{"p":"opennlp.tools.ml.maxent","c":"GISModel","l":"eval(String[], float[], double[])","url":"eval(java.lang.String[],float[],double[])"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModel","l":"eval(String[], float[], double[])","url":"eval(java.lang.String[],float[],double[])"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModel","l":"eval(String[], float[], double[])","url":"eval(java.lang.String[],float[],double[])"},{"p":"opennlp.tools.ml.maxent","c":"GISModel","l":"eval(String[], float[])","url":"eval(java.lang.String[],float[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNModel","l":"eval(String[], float[])","url":"eval(java.lang.String[],float[])"},{"p":"opennlp.tools.ml.model","c":"MaxentModel","l":"eval(String[], float[])","url":"eval(java.lang.String[],float[])"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModel","l":"eval(String[], float[])","url":"eval(java.lang.String[],float[])"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModel","l":"eval(String[], float[])","url":"eval(java.lang.String[],float[])"},{"p":"opennlp.tools.ml.maxent","c":"GISModel","l":"eval(String[])","url":"eval(java.lang.String[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNModel","l":"eval(String[])","url":"eval(java.lang.String[])"},{"p":"opennlp.tools.ml.model","c":"MaxentModel","l":"eval(String[])","url":"eval(java.lang.String[])"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModel","l":"eval(String[])","url":"eval(java.lang.String[])"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModel","l":"eval(String[])","url":"eval(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream","l":"EvalitaNameSampleStream(EvalitaNameSampleStream.LANGUAGE, InputStreamFactory, int)","url":"%3Cinit%3E(opennlp.tools.formats.EvalitaNameSampleStream.LANGUAGE,opennlp.tools.util.InputStreamFactory,int)"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream","l":"EvalitaNameSampleStream(EvalitaNameSampleStream.LANGUAGE, ObjectStream<String>, int)","url":"%3Cinit%3E(opennlp.tools.formats.EvalitaNameSampleStream.LANGUAGE,opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.ml.model","c":"EvalParameters","l":"EvalParameters(Context[], int)","url":"%3Cinit%3E(opennlp.tools.ml.model.Context[],int)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer.Evaluator","l":"evaluate(double[])"},{"p":"opennlp.tools.chunker","c":"ChunkerCrossValidator","l":"evaluate(ObjectStream<ChunkSample>, int)","url":"evaluate(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.doccat","c":"DoccatCrossValidator","l":"evaluate(ObjectStream<DocumentSample>, int)","url":"evaluate(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorCrossValidator","l":"evaluate(ObjectStream<LanguageSample>, int)","url":"evaluate(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderCrossValidator","l":"evaluate(ObjectStream<NameSample>, int)","url":"evaluate(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.parser","c":"ParserCrossValidator","l":"evaluate(ObjectStream<Parse>, int)","url":"evaluate(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.postag","c":"POSTaggerCrossValidator","l":"evaluate(ObjectStream<POSSample>, int)","url":"evaluate(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.sentdetect","c":"SDCrossValidator","l":"evaluate(ObjectStream<SentenceSample>, int)","url":"evaluate(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.util.eval","c":"Evaluator","l":"evaluate(ObjectStream<T>)","url":"evaluate(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.tokenize","c":"TokenizerCrossValidator","l":"evaluate(ObjectStream<TokenSample>, int)","url":"evaluate(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.util.eval","c":"Evaluator","l":"evaluateSample(T)"},{"p":"opennlp.tools.util.eval","c":"Evaluator","l":"Evaluator(EvaluationMonitor<T>...)","url":"%3Cinit%3E(opennlp.tools.util.eval.EvaluationMonitor...)"},{"p":"opennlp.tools.ml","c":"TrainerFactory.TrainerType","l":"EVENT_MODEL_SEQUENCE_TRAINER"},{"p":"opennlp.tools.ml","c":"TrainerFactory.TrainerType","l":"EVENT_MODEL_TRAINER"},{"p":"opennlp.tools.formats.brat","c":"AnnotationConfiguration","l":"EVENT_TYPE"},{"p":"opennlp.tools.ml","c":"EventTrainer","l":"EVENT_VALUE"},{"p":"opennlp.tools.ml.model","c":"Event","l":"Event(String, String[], float[])","url":"%3Cinit%3E(java.lang.String,java.lang.String[],float[])"},{"p":"opennlp.tools.ml.model","c":"Event","l":"Event(String, String[])","url":"%3Cinit%3E(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.util","c":"EventTraceStream","l":"EventTraceStream(ObjectStream<Event>, Writer)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,java.io.Writer)"},{"p":"opennlp.tools.parser","c":"Parse","l":"expandTopNode(Parse)","url":"expandTopNode(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.util.ext","c":"ExtensionNotLoadedException","l":"ExtensionNotLoadedException(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.util.ext","c":"ExtensionNotLoadedException","l":"ExtensionNotLoadedException(Throwable)","url":"%3Cinit%3E(java.lang.Throwable)"},{"p":"opennlp.tools.util.ext","c":"ExtensionServiceKeys","l":"ExtensionServiceKeys()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory","l":"extractArtifactSerializerMappings(InputStream)","url":"extractArtifactSerializerMappings(java.io.InputStream)"},{"p":"opennlp.tools.doccat","c":"BagOfWordsFeatureGenerator","l":"extractFeatures(String[], Map<String, Object>)","url":"extractFeatures(java.lang.String[],java.util.Map)"},{"p":"opennlp.tools.doccat","c":"FeatureGenerator","l":"extractFeatures(String[], Map<String, Object>)","url":"extractFeatures(java.lang.String[],java.util.Map)"},{"p":"opennlp.tools.doccat","c":"NGramFeatureGenerator","l":"extractFeatures(String[], Map<String, Object>)","url":"extractFeatures(java.lang.String[],java.util.Map)"},{"p":"opennlp.tools.util","c":"TokenTag","l":"extractTags(TokenTag[])","url":"extractTags(opennlp.tools.util.TokenTag[])"},{"p":"opennlp.tools.util","c":"TokenTag","l":"extractTokens(TokenTag[])","url":"extractTokens(opennlp.tools.util.TokenTag[])"},{"p":"opennlp.tools.sentdetect.lang","c":"Factory","l":"Factory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize.lang","c":"Factory","l":"Factory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"FeatureGeneratorUtil","l":"FeatureGeneratorUtil()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.model","c":"FileEventStream","l":"FileEventStream(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.model","c":"FileEventStream","l":"FileEventStream(Reader)","url":"%3Cinit%3E(java.io.Reader)"},{"p":"opennlp.tools.ml.model","c":"FileEventStream","l":"FileEventStream(String, String)","url":"%3Cinit%3E(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"FileEventStream","l":"FileEventStream(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.formats.convert","c":"FileToByteArraySampleStream","l":"FileToByteArraySampleStream(ObjectStream<File>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats.convert","c":"FileToStringSampleStream","l":"FileToStringSampleStream(ObjectStream<File>, Charset)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,java.nio.charset.Charset)"},{"p":"opennlp.tools.entitylinker","c":"EntityLinker","l":"find(String, Span[], Span[][], Span[][], int)","url":"find(java.lang.String,opennlp.tools.util.Span[],opennlp.tools.util.Span[][],opennlp.tools.util.Span[][],int)"},{"p":"opennlp.tools.entitylinker","c":"EntityLinker","l":"find(String, Span[], Span[][], Span[][])","url":"find(java.lang.String,opennlp.tools.util.Span[],opennlp.tools.util.Span[][],opennlp.tools.util.Span[][])"},{"p":"opennlp.tools.namefind","c":"RegexNameFinder","l":"find(String)","url":"find(java.lang.String)"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"find(String[], String[][])","url":"find(java.lang.String[],java.lang.String[][])"},{"p":"opennlp.tools.namefind","c":"DictionaryNameFinder","l":"find(String[])","url":"find(java.lang.String[])"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"find(String[])","url":"find(java.lang.String[])"},{"p":"opennlp.tools.namefind","c":"RegexNameFinder","l":"find(String[])","url":"find(java.lang.String[])"},{"p":"opennlp.tools.namefind","c":"TokenNameFinder","l":"find(String[])","url":"find(java.lang.String[])"},{"p":"opennlp.tools.namefind","c":"DocumentNameFinder","l":"find(String[][])","url":"find(java.lang.String[][])"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"FINNISH"},{"p":"opennlp.tools.parser","c":"Parse","l":"fixPossesives(Parse)","url":"fixPossesives(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.util.wordvector","c":"WordVectorType","l":"FLOAT"},{"p":"opennlp.tools.util.eval","c":"FMeasure","l":"FMeasure()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"FRENCH"},{"p":"opennlp.tools.formats","c":"BioNLP2004NameSampleStream","l":"GENERATE_CELLLINE_ENTITIES"},{"p":"opennlp.tools.formats","c":"BioNLP2004NameSampleStream","l":"GENERATE_CELLTYPE_ENTITIES"},{"p":"opennlp.tools.formats","c":"BioNLP2004NameSampleStream","l":"GENERATE_DNA_ENTITIES"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream","l":"GENERATE_GPE_ENTITIES"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream","l":"GENERATE_LOCATION_ENTITIES"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream","l":"GENERATE_LOCATION_ENTITIES"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream","l":"GENERATE_MISC_ENTITIES"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream","l":"GENERATE_ORGANIZATION_ENTITIES"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream","l":"GENERATE_ORGANIZATION_ENTITIES"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream","l":"GENERATE_PERSON_ENTITIES"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream","l":"GENERATE_PERSON_ENTITIES"},{"p":"opennlp.tools.formats","c":"BioNLP2004NameSampleStream","l":"GENERATE_PROTEIN_ENTITIES"},{"p":"opennlp.tools.formats","c":"BioNLP2004NameSampleStream","l":"GENERATE_RNA_ENTITIES"},{"p":"opennlp.tools.ngram","c":"NGramGenerator","l":"generate(char[], int, String)","url":"generate(char[],int,java.lang.String)"},{"p":"opennlp.tools.ngram","c":"NGramGenerator","l":"generate(List<String>, int, String)","url":"generate(java.util.List,int,java.lang.String)"},{"p":"opennlp.tools.namefind","c":"NameFinderEventStream","l":"generateEvents(String[], String[], NameContextGenerator)","url":"generateEvents(java.lang.String[],java.lang.String[],opennlp.tools.namefind.NameContextGenerator)"},{"p":"opennlp.tools.postag","c":"POSSampleEventStream","l":"generateEvents(String[], String[], Object[], POSContextGenerator)","url":"generateEvents(java.lang.String[],java.lang.String[],java.lang.Object[],opennlp.tools.postag.POSContextGenerator)"},{"p":"opennlp.tools.postag","c":"POSSampleEventStream","l":"generateEvents(String[], String[], POSContextGenerator)","url":"generateEvents(java.lang.String[],java.lang.String[],opennlp.tools.postag.POSContextGenerator)"},{"p":"opennlp.tools.namefind","c":"NameFinderEventStream","l":"generateOutcomes(Span[], String, int)","url":"generateOutcomes(opennlp.tools.util.Span[],java.lang.String,int)"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory","l":"GeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.model","c":"GenericModelReader","l":"GenericModelReader(DataReader)","url":"%3Cinit%3E(opennlp.tools.ml.model.DataReader)"},{"p":"opennlp.tools.ml.model","c":"GenericModelReader","l":"GenericModelReader(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.util.model","c":"GenericModelSerializer","l":"GenericModelSerializer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.model","c":"GenericModelWriter","l":"GenericModelWriter(AbstractModel, DataOutputStream)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.DataOutputStream)"},{"p":"opennlp.tools.ml.model","c":"GenericModelWriter","l":"GenericModelWriter(AbstractModel, File)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.File)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"GERMAN"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"get()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"get()"},{"p":"opennlp.tools.util.wordvector","c":"WordVectorTable","l":"get(String)","url":"get(java.lang.String)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbabilities","l":"get(T)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"get(T)"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"getAbbreviationDictionary()"},{"p":"opennlp.tools.tokenize","c":"TokenizerFactory","l":"getAbbreviationDictionary()"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"getAbbreviations()"},{"p":"opennlp.tools.tokenize","c":"TokenizerModel","l":"getAbbreviations()"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerEvaluator","l":"getAccuracy()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorEvaluator","l":"getAccuracy()"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"getAdditionalContext()"},{"p":"opennlp.tools.postag","c":"POSSample","l":"getAdditionalContext()"},{"p":"opennlp.tools.util","c":"TokenTag","l":"getAdditionalData()"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"getAlgorithm()"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbabilities","l":"getAll()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"getAll()"},{"p":"opennlp.tools.ml.model","c":"AbstractModel","l":"getAllOutcomes(double[])"},{"p":"opennlp.tools.ml.model","c":"MaxentModel","l":"getAllOutcomes(double[])"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"getAllPosTags()"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizer","l":"getAllResults(double[])"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerME","l":"getAllResults(double[])"},{"p":"opennlp.tools.tokenize.lang","c":"Factory","l":"getAlphanumeric(String)","url":"getAlphanumeric(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"TokenizerFactory","l":"getAlphaNumericPattern()"},{"p":"opennlp.tools.formats.brat","c":"BratDocument","l":"getAnnotation(String)","url":"getAnnotation(java.lang.String)"},{"p":"opennlp.tools.formats.brat","c":"BratDocument","l":"getAnnotations()"},{"p":"opennlp.tools.formats.brat","c":"RelationAnnotation","l":"getArg1()"},{"p":"opennlp.tools.formats.brat","c":"RelationAnnotation","l":"getArg2()"},{"p":"opennlp.tools.formats.brat","c":"EventAnnotation","l":"getArguments()"},{"p":"opennlp.tools.util.model","c":"ArtifactProvider","l":"getArtifact(String)","url":"getArtifact(java.lang.String)"},{"p":"opennlp.tools.util.model","c":"BaseModel","l":"getArtifact(String)","url":"getArtifact(java.lang.String)"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"getArtifactSerializerClass()"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules","l":"getArtifactSerializerClass()"},{"p":"opennlp.tools.parser.lang.es","c":"AncoraSpanishHeadRules","l":"getArtifactSerializerClass()"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"getArtifactSerializerClass()"},{"p":"opennlp.tools.postag","c":"POSModel","l":"getArtifactSerializerClass()"},{"p":"opennlp.tools.util.featuregen","c":"BrownCluster","l":"getArtifactSerializerClass()"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterDictionary","l":"getArtifactSerializerClass()"},{"p":"opennlp.tools.util.model","c":"SerializableArtifact","l":"getArtifactSerializerClass()"},{"p":"opennlp.tools.util.featuregen","c":"ArtifactToSerializerMapper","l":"getArtifactSerializerMapping()"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterBigramFeatureGeneratorFactory","l":"getArtifactSerializerMapping()"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterTokenClassFeatureGeneratorFactory","l":"getArtifactSerializerMapping()"},{"p":"opennlp.tools.util.featuregen","c":"BrownClusterTokenFeatureGeneratorFactory","l":"getArtifactSerializerMapping()"},{"p":"opennlp.tools.util.featuregen","c":"DictionaryFeatureGeneratorFactory","l":"getArtifactSerializerMapping()"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getArtifactSerializerMapping()"},{"p":"opennlp.tools.util.featuregen","c":"POSTaggerNameFeatureGeneratorFactory","l":"getArtifactSerializerMapping()"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterFeatureGeneratorFactory","l":"getArtifactSerializerMapping()"},{"p":"opennlp.tools.util.wordvector","c":"WordVector","l":"getAsDouble(int)"},{"p":"opennlp.tools.util.wordvector","c":"WordVector","l":"getAsFloat(int)"},{"p":"opennlp.tools.formats.brat","c":"AnnotatorNoteAnnotation","l":"getAttachedId()"},{"p":"opennlp.tools.formats.brat","c":"AttributeAnnotation","l":"getAttachedTo()"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"getAttachModel()"},{"p":"opennlp.tools.dictionary.serializer","c":"Entry","l":"getAttributes()"},{"p":"opennlp.tools.formats.masc","c":"MascToken","l":"getBase()"},{"p":"opennlp.tools.formats.masc","c":"MascPennTagParser","l":"getBases()"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizer","l":"getBestCategory(double[])"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerME","l":"getBestCategory(double[])"},{"p":"opennlp.tools.ml.model","c":"AbstractModel","l":"getBestOutcome(double[])"},{"p":"opennlp.tools.ml.model","c":"MaxentModel","l":"getBestOutcome(double[])"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getBool(String, boolean)","url":"getBool(java.lang.String,boolean)"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getBool(String)","url":"getBool(java.lang.String)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"getBooleanParameter(String, boolean)","url":"getBooleanParameter(java.lang.String,boolean)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"getBooleanParameter(String, String, boolean)","url":"getBooleanParameter(java.lang.String,java.lang.String,boolean)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"getBuildModel()"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGenerator","l":"getCachedFeatureGenerator()"},{"p":"opennlp.tools.doccat","c":"DocumentSample","l":"getCategory()"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizer","l":"getCategory(int)"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerME","l":"getCategory(int)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"getCheckModel()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getChildCount()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getChildren()"},{"p":"opennlp.tools.chunker","c":"ChunkerModel","l":"getChunkerModel()"},{"p":"opennlp.tools.chunker","c":"ChunkerModel","l":"getChunkerSequenceModel()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"getChunkSize()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getCommonParent(Parse)","url":"getCommonParent(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.langdetect","c":"Language","l":"getConfidence()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"getConfidence()"},{"p":"opennlp.tools.formats.brat","c":"BratDocument","l":"getConfig()"},{"p":"opennlp.tools.langdetect","c":"LanguageSample","l":"getContext()"},{"p":"opennlp.tools.ml.model","c":"Event","l":"getContext()"},{"p":"opennlp.tools.sentdetect","c":"DefaultSDContextGenerator","l":"getContext(CharSequence, int)","url":"getContext(java.lang.CharSequence,int)"},{"p":"opennlp.tools.sentdetect","c":"SDContextGenerator","l":"getContext(CharSequence, int)","url":"getContext(java.lang.CharSequence,int)"},{"p":"opennlp.tools.langdetect","c":"DefaultLanguageDetectorContextGenerator","l":"getContext(CharSequence)","url":"getContext(java.lang.CharSequence)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorContextGenerator","l":"getContext(CharSequence)","url":"getContext(java.lang.CharSequence)"},{"p":"opennlp.tools.postag","c":"DefaultPOSContextGenerator","l":"getContext(int, Object[], String[])","url":"getContext(int,java.lang.Object[],java.lang.String[])"},{"p":"opennlp.tools.lemmatizer","c":"DefaultLemmatizerContextGenerator","l":"getContext(int, String[], String[], Object[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.namefind","c":"DefaultNameContextGenerator","l":"getContext(int, String[], String[], Object[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.parser","c":"ChunkContextGenerator","l":"getContext(int, String[], String[], Object[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.postag","c":"ConfigurablePOSContextGenerator","l":"getContext(int, String[], String[], Object[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.postag","c":"DefaultPOSContextGenerator","l":"getContext(int, String[], String[], Object[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.postag","c":"POSContextGenerator","l":"getContext(int, String[], String[], Object[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.chunker","c":"DefaultChunkerContextGenerator","l":"getContext(int, String[], String[], String[], Object[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.chunker","c":"ChunkerContextGenerator","l":"getContext(int, String[], String[], String[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.chunker","c":"DefaultChunkerContextGenerator","l":"getContext(int, String[], String[], String[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.lemmatizer","c":"DefaultLemmatizerContextGenerator","l":"getContext(int, String[], String[], String[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerContextGenerator","l":"getContext(int, String[], String[], String[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.parser","c":"ChunkContextGenerator","l":"getContext(int, String[], String[], String[])","url":"getContext(int,java.lang.String[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.util","c":"BeamSearchContextGenerator","l":"getContext(int, T[], String[], Object[])","url":"getContext(int,T[],java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.chunker","c":"DefaultChunkerContextGenerator","l":"getContext(int, TokenTag[], String[], Object[])","url":"getContext(int,opennlp.tools.util.TokenTag[],java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.parser","c":"ChunkContextGenerator","l":"getContext(int, TokenTag[], String[], Object[])","url":"getContext(int,opennlp.tools.util.TokenTag[],java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.parser","c":"ChunkContextGenerator","l":"getContext(Object)","url":"getContext(java.lang.Object)"},{"p":"opennlp.tools.parser.chunking","c":"BuildContextGenerator","l":"getContext(Object)","url":"getContext(java.lang.Object)"},{"p":"opennlp.tools.parser.chunking","c":"CheckContextGenerator","l":"getContext(Object)","url":"getContext(java.lang.Object)"},{"p":"opennlp.tools.parser.treeinsert","c":"AttachContextGenerator","l":"getContext(Object)","url":"getContext(java.lang.Object)"},{"p":"opennlp.tools.parser.treeinsert","c":"BuildContextGenerator","l":"getContext(Object)","url":"getContext(java.lang.Object)"},{"p":"opennlp.tools.parser.treeinsert","c":"CheckContextGenerator","l":"getContext(Object)","url":"getContext(java.lang.Object)"},{"p":"opennlp.tools.parser.treeinsert","c":"CheckContextGenerator","l":"getContext(Parse, Parse[], int, boolean)","url":"getContext(opennlp.tools.parser.Parse,opennlp.tools.parser.Parse[],int,boolean)"},{"p":"opennlp.tools.parser.treeinsert","c":"AttachContextGenerator","l":"getContext(Parse[], int, List<Parse>, int)","url":"getContext(opennlp.tools.parser.Parse[],int,java.util.List,int)"},{"p":"opennlp.tools.parser.chunking","c":"BuildContextGenerator","l":"getContext(Parse[], int)","url":"getContext(opennlp.tools.parser.Parse[],int)"},{"p":"opennlp.tools.parser.treeinsert","c":"BuildContextGenerator","l":"getContext(Parse[], int)","url":"getContext(opennlp.tools.parser.Parse[],int)"},{"p":"opennlp.tools.parser.chunking","c":"CheckContextGenerator","l":"getContext(Parse[], String, int, int)","url":"getContext(opennlp.tools.parser.Parse[],java.lang.String,int,int)"},{"p":"opennlp.tools.tokenize","c":"DefaultTokenContextGenerator","l":"getContext(String, int)","url":"getContext(java.lang.String,int)"},{"p":"opennlp.tools.tokenize","c":"TokenContextGenerator","l":"getContext(String, int)","url":"getContext(java.lang.String,int)"},{"p":"opennlp.tools.ml.maxent","c":"BasicContextGenerator","l":"getContext(String)","url":"getContext(java.lang.String)"},{"p":"opennlp.tools.ml.maxent","c":"ContextGenerator","l":"getContext(T)"},{"p":"opennlp.tools.chunker","c":"ChunkerFactory","l":"getContextGenerator()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorFactory","l":"getContextGenerator()"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerFactory","l":"getContextGenerator()"},{"p":"opennlp.tools.parser","c":"ParserChunkerFactory","l":"getContextGenerator()"},{"p":"opennlp.tools.tokenize","c":"TokenizerFactory","l":"getContextGenerator()"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"getContexts()"},{"p":"opennlp.tools.ml.model","c":"DataIndexer","l":"getContexts()"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"getCount(String)","url":"getCount(java.lang.String)"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"getCount(StringList)","url":"getCount(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.formats.brat","c":"SpanAnnotation","l":"getCoveredText()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getCoveredText()"},{"p":"opennlp.tools.util","c":"Span","l":"getCoveredText(CharSequence)","url":"getCoveredText(java.lang.CharSequence)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getCurrPoint()"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"getCutoff()"},{"p":"opennlp.tools.cmdline.params","c":"BasicFormatParams","l":"getData()"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"getDataIndexer(ObjectStream<Event>)","url":"getDataIndexer(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.ml.model","c":"DataIndexerFactory","l":"getDataIndexer(TrainingParameters, Map<String, String>)","url":"getDataIndexer(opennlp.tools.util.TrainingParameters,java.util.Map)"},{"p":"opennlp.tools.ml.model","c":"AbstractModel","l":"getDataStructures()"},{"p":"opennlp.tools.util.wordvector","c":"WordVector","l":"getDataType()"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory","l":"getDefaultRegexNameFinders(Map<String, Pattern[]>, RegexNameFinderFactory.DEFAULT_REGEX_NAME_FINDER...)","url":"getDefaultRegexNameFinders(java.util.Map,opennlp.tools.namefind.RegexNameFinderFactory.DEFAULT_REGEX_NAME_FINDER...)"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory","l":"getDefaultRegexNameFinders(RegexNameFinderFactory.DEFAULT_REGEX_NAME_FINDER...)","url":"getDefaultRegexNameFinders(opennlp.tools.namefind.RegexNameFinderFactory.DEFAULT_REGEX_NAME_FINDER...)"},{"p":"opennlp.tools.formats.conllu","c":"ConlluWordLine","l":"getDeprel()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluWordLine","l":"getDeps()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getDerivation()"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory","l":"getDescriptorElements(InputStream)","url":"getDescriptorElements(java.io.InputStream)"},{"p":"opennlp.tools.cmdline.params","c":"DetailedFMeasureEvaluatorParams","l":"getDetailedF()"},{"p":"opennlp.tools.cmdline.params","c":"DetokenizerParameter","l":"getDetokenizer()"},{"p":"opennlp.tools.lemmatizer","c":"DictionaryLemmatizer","l":"getDictMap()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"Function","l":"getDimension()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"NegLogLikelihood","l":"getDimension()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer.L2RegFunction","l":"getDimension()"},{"p":"opennlp.tools.sentdetect","c":"SentenceSample","l":"getDocument()"},{"p":"opennlp.tools.doccat","c":"DoccatCrossValidator","l":"getDocumentAccuracy()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorCrossValidator","l":"getDocumentAccuracy()"},{"p":"opennlp.tools.doccat","c":"DoccatCrossValidator","l":"getDocumentCount()"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerEvaluator","l":"getDocumentCount()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorCrossValidator","l":"getDocumentCount()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorEvaluator","l":"getDocumentCount()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentence","l":"getDocumentId()"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getDouble(String, double)","url":"getDouble(java.lang.String,double)"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getDouble(String)","url":"getDouble(java.lang.String)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"getDoubleParameter(String, double)","url":"getDoubleParameter(java.lang.String,double)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"getDoubleParameter(String, String, double)","url":"getDoubleParameter(java.lang.String,java.lang.String,double)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser","l":"getElement(String)","url":"getElement(java.lang.String)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Node","l":"getElements()"},{"p":"opennlp.tools.cmdline.params","c":"EncodingParameter","l":"getEncoding()"},{"p":"opennlp.tools.util","c":"Span","l":"getEnd()"},{"p":"opennlp.tools.sentdetect","c":"DefaultEndOfSentenceScanner","l":"getEndOfSentenceCharacters()"},{"p":"opennlp.tools.sentdetect","c":"EndOfSentenceScanner","l":"getEndOfSentenceCharacters()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"getEndOfSentenceScanner()"},{"p":"opennlp.tools.formats.masc","c":"MascNamedEntityParser","l":"getEntityIDsToTokens()"},{"p":"opennlp.tools.formats.masc","c":"MascNamedEntityParser","l":"getEntityIDtoEntityType()"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"getEosCharacters()"},{"p":"opennlp.tools.sentdetect","c":"DefaultEndOfSentenceScanner","l":"getEOSCharacters()"},{"p":"opennlp.tools.sentdetect","c":"EndOfSentenceScanner","l":"getEOSCharacters()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"getEOSCharacters()"},{"p":"opennlp.tools.sentdetect.lang","c":"Factory","l":"getEOSCharacters(String)","url":"getEOSCharacters(java.lang.String)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"getEvaluator()"},{"p":"opennlp.tools.ml","c":"TrainerFactory","l":"getEventModelSequenceTrainer(TrainingParameters, Map<String, String>)","url":"getEventModelSequenceTrainer(opennlp.tools.util.TrainingParameters,java.util.Map)"},{"p":"opennlp.tools.ml.model","c":"Sequence","l":"getEvents()"},{"p":"opennlp.tools.ml","c":"TrainerFactory","l":"getEventTrainer(TrainingParameters, Map<String, String>)","url":"getEventTrainer(opennlp.tools.util.TrainingParameters,java.util.Map)"},{"p":"opennlp.tools.formats.brat","c":"EventAnnotation","l":"getEventTrigger()"},{"p":"opennlp.tools.doccat","c":"DocumentSample","l":"getExtraInformation()"},{"p":"opennlp.tools.chunker","c":"ChunkerModel","l":"getFactory()"},{"p":"opennlp.tools.doccat","c":"DoccatModel","l":"getFactory()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorModel","l":"getFactory()"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerModel","l":"getFactory()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"getFactory()"},{"p":"opennlp.tools.postag","c":"POSModel","l":"getFactory()"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"getFactory()"},{"p":"opennlp.tools.tokenize","c":"TokenizerModel","l":"getFactory()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getFctEvalCount()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluWordLine","l":"getFeats()"},{"p":"opennlp.tools.doccat","c":"DoccatFactory","l":"getFeatureGenerators()"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument.IrishSentenceBankFlex","l":"getFlex()"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument.IrishSentenceBankSentence","l":"getFlex()"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getFloat(String, float)","url":"getFloat(java.lang.String,float)"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getFloat(String)","url":"getFloat(java.lang.String)"},{"p":"opennlp.tools.chunker","c":"ChunkerCrossValidator","l":"getFMeasure()"},{"p":"opennlp.tools.chunker","c":"ChunkerEvaluator","l":"getFMeasure()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderCrossValidator","l":"getFMeasure()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderEvaluator","l":"getFMeasure()"},{"p":"opennlp.tools.parser","c":"ParserCrossValidator","l":"getFMeasure()"},{"p":"opennlp.tools.parser","c":"ParserEvaluator","l":"getFMeasure()"},{"p":"opennlp.tools.sentdetect","c":"SDCrossValidator","l":"getFMeasure()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorEvaluator","l":"getFMeasure()"},{"p":"opennlp.tools.tokenize","c":"DetokenizerEvaluator","l":"getFMeasure()"},{"p":"opennlp.tools.tokenize","c":"TokenizerCrossValidator","l":"getFMeasure()"},{"p":"opennlp.tools.tokenize","c":"TokenizerEvaluator","l":"getFMeasure()"},{"p":"opennlp.tools.util.eval","c":"FMeasure","l":"getFMeasure()"},{"p":"opennlp.tools.cmdline.params","c":"CVParams","l":"getFolds()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluWordLine","l":"getForm()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getFuncChangeRate()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Leaf","l":"getFunctionalTag()"},{"p":"opennlp.tools.util.featuregen","c":"AggregatedFeatureGenerator","l":"getGenerators()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getGradAtCurr()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getGradAtNext()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluWordLine","l":"getHead()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getHead()"},{"p":"opennlp.tools.parser","c":"HeadRules","l":"getHead(Parse[], String)","url":"getHead(opennlp.tools.parser.Parse[],java.lang.String)"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules","l":"getHead(Parse[], String)","url":"getHead(opennlp.tools.parser.Parse[],java.lang.String)"},{"p":"opennlp.tools.parser.lang.es","c":"AncoraSpanishHeadRules","l":"getHead(Parse[], String)","url":"getHead(opennlp.tools.parser.Parse[],java.lang.String)"},{"p":"opennlp.tools.parser","c":"Parse","l":"getHeadIndex()"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"getHeadRules()"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerMETool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.dictionary","c":"DictionaryBuilderTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.entitylinker","c":"EntityLinkerTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.languagemodel","c":"NGramLanguageModelTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerMETool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.namefind","c":"CensusDictionaryCreatorTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.parser","c":"ParserTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.parser","c":"TaggerModelReplacerTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"DictionaryDetokenizerTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"SimpleTokenizerTool","l":"getHelp()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerMETool","l":"getHelp()"},{"p":"opennlp.tools.formats.brat","c":"BratAnnotation","l":"getId()"},{"p":"opennlp.tools.formats.brat","c":"BratDocument","l":"getId()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluWordLine","l":"getId()"},{"p":"opennlp.tools.formats.masc","c":"MascWord","l":"getId()"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"getId()"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizer","l":"getIndex(String)","url":"getIndex(java.lang.String)"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerME","l":"getIndex(String)","url":"getIndex(java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"AbstractModel","l":"getIndex(String)","url":"getIndex(java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"MaxentModel","l":"getIndex(String)","url":"getIndex(java.lang.String)"},{"p":"opennlp.tools.parser","c":"AbstractParserEventStream","l":"getInitialChunks(Parse)","url":"getInitialChunks(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.parser","c":"ChunkSampleStream","l":"getInitialChunks(Parse)","url":"getInitialChunks(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getInitialObject(double, double[], double[], double[], double[], int)","url":"getInitialObject(double,double[],double[],double[],double[],int)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getInitialObject(double, double[], double[])","url":"getInitialObject(double,double[],double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getInitialObjectForL1(double, double[], double[], double[])","url":"getInitialObjectForL1(double,double[],double[],double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"NegLogLikelihood","l":"getInitialPoint()"},{"p":"opennlp.tools.util.normalizer","c":"EmojiCharSequenceNormalizer","l":"getInstance()"},{"p":"opennlp.tools.util.normalizer","c":"NumberCharSequenceNormalizer","l":"getInstance()"},{"p":"opennlp.tools.util.normalizer","c":"ShrinkCharSequenceNormalizer","l":"getInstance()"},{"p":"opennlp.tools.util.normalizer","c":"TwitterCharSequenceNormalizer","l":"getInstance()"},{"p":"opennlp.tools.util.normalizer","c":"UrlCharSequenceNormalizer","l":"getInstance()"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getInt(String, int)","url":"getInt(java.lang.String,int)"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getInt(String)","url":"getInt(java.lang.String)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"getIntParameter(String, int)","url":"getIntParameter(java.lang.String,int)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"getIntParameter(String, String, int)","url":"getIntParameter(java.lang.String,java.lang.String,int)"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"getItemID()"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"getItemName()"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"getItemParentID()"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"getItemType()"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"getIterations()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"getKeys()"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"getLabel()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"getLabel()"},{"p":"opennlp.tools.parser","c":"Constituent","l":"getLabel()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getLabel()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderFineGrainedReportListener","l":"getLabelComparator(Map<String, FineGrainedReportListener.Counter>)","url":"getLabelComparator(java.util.Map)"},{"p":"opennlp.tools.cmdline.params","c":"LanguageParams","l":"getLang()"},{"p":"opennlp.tools.formats","c":"AbstractSampleStreamFactory","l":"getLang()"},{"p":"opennlp.tools.formats","c":"LanguageSampleStreamFactory","l":"getLang()"},{"p":"opennlp.tools.langdetect","c":"Language","l":"getLang()"},{"p":"opennlp.tools.langdetect","c":"LanguageSample","l":"getLanguage()"},{"p":"opennlp.tools.util.model","c":"ArtifactProvider","l":"getLanguage()"},{"p":"opennlp.tools.util.model","c":"BaseModel","l":"getLanguage()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"getLanguageCode()"},{"p":"opennlp.tools.tokenize","c":"TokenizerFactory","l":"getLanguageCode()"},{"p":"opennlp.tools.langdetect","c":"ProbingLanguageDetectionResult","l":"getLanguages()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Leaf","l":"getLemma()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluWordLine","l":"getLemma()"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSample","l":"getLemmas()"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerModel","l":"getLemmatizerSequenceModel()"},{"p":"opennlp.tools.langdetect","c":"ProbingLanguageDetectionResult","l":"getLength()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.TreeElement","l":"getLevel()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Leaf","l":"getLexeme()"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"getLinkedEntries()"},{"p":"opennlp.tools.entitylinker","c":"EntityLinkerFactory","l":"getLinker(EntityLinkerProperties)","url":"getLinker(opennlp.tools.entitylinker.EntityLinkerProperties)"},{"p":"opennlp.tools.entitylinker","c":"EntityLinkerFactory","l":"getLinker(String, EntityLinkerProperties)","url":"getLinker(java.lang.String,opennlp.tools.entitylinker.EntityLinkerProperties)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"getLog()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"getLog()"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbabilities","l":"getLog(T)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"getLog(T)"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getLong(String, long)","url":"getLong(java.lang.String,long)"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getLong(String)","url":"getLong(java.lang.String)"},{"p":"opennlp.tools.util","c":"Version","l":"getMajor()"},{"p":"opennlp.tools.util.model","c":"ArtifactProvider","l":"getManifestProperty(String)","url":"getManifestProperty(java.lang.String)"},{"p":"opennlp.tools.util.model","c":"BaseModel","l":"getManifestProperty(String)","url":"getManifestProperty(java.lang.String)"},{"p":"opennlp.tools.namefind","c":"RegexNameFinder","l":"getMatchingPatterns()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderFineGrainedReportListener","l":"getMatrixLabelComparator(Map<String, FineGrainedReportListener.ConfusionMatrixLine>)","url":"getMatrixLabelComparator(java.util.Map)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbabilities","l":"getMax()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"getMax()"},{"p":"opennlp.tools.doccat","c":"DoccatModel","l":"getMaxentModel()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorModel","l":"getMaxentModel()"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"getMaxentModel()"},{"p":"opennlp.tools.tokenize","c":"TokenizerModel","l":"getMaxentModel()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"getMaxLength()"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"getMaxTokenCount()"},{"p":"opennlp.tools.tokenize","c":"WordpieceTokenizer","l":"getMaxTokenLength()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"getMaxValue()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.Sentence","l":"getMetadata()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"getMinConsecImprovements()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"getMinDiff()"},{"p":"opennlp.tools.util","c":"Version","l":"getMinor()"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"getMinTokenCount()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluWordLine","l":"getMisc()"},{"p":"opennlp.tools.cmdline.params","c":"CVParams","l":"getMisclassified()"},{"p":"opennlp.tools.cmdline.params","c":"EvaluatorParams","l":"getMisclassified()"},{"p":"opennlp.tools.cmdline.params","c":"EvaluatorParams","l":"getModel()"},{"p":"opennlp.tools.cmdline.params","c":"TrainingToolParams","l":"getModel()"},{"p":"opennlp.tools.ml.model","c":"AbstractModelReader","l":"getModel()"},{"p":"opennlp.tools.ml.model","c":"AbstractModel","l":"getModelType()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.TreeElement","l":"getMorphologicalTag()"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerTrainerTool","l":"getName()"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerTrainerTool","l":"getName()"},{"p":"opennlp.tools.cmdline.namefind","c":"NameSampleCountersStream","l":"getNameCounters()"},{"p":"opennlp.tools.formats.masc","c":"MascSentence","l":"getNamedEntities()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"getNameFinderSequenceModel()"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"getNames()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getNextPoint()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getNextPunctuationSet()"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"getNGrams(String[], int)","url":"getNGrams(java.lang.String[],int)"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"getNGrams(StringList, int)","url":"getNGrams(opennlp.tools.util.StringList,int)"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"getNMinusOneTokenFirst(StringList)","url":"getNMinusOneTokenFirst(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"getNMinusOneTokenLast(StringList)","url":"getNMinusOneTokenLast(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.formats.letsmt","c":"LetsmtDocument.LetsmtSentence","l":"getNonTokenizedText()"},{"p":"opennlp.tools.formats.brat","c":"BratAnnotation","l":"getNote()"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGenerator","l":"getNumberOfCacheHits()"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGenerator","l":"getNumberOfCacheMisses()"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizer","l":"getNumberOfCategories()"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerME","l":"getNumberOfCategories()"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"getNumEvents()"},{"p":"opennlp.tools.ml.model","c":"DataIndexer","l":"getNumEvents()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNModel","l":"getNumOutcomes()"},{"p":"opennlp.tools.ml.model","c":"AbstractModel","l":"getNumOutcomes()"},{"p":"opennlp.tools.ml.model","c":"DynamicEvalParameters","l":"getNumOutcomes()"},{"p":"opennlp.tools.ml.model","c":"EvalParameters","l":"getNumOutcomes()"},{"p":"opennlp.tools.ml.model","c":"MaxentModel","l":"getNumOutcomes()"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"getNumTimesEventsSeen()"},{"p":"opennlp.tools.ml.model","c":"DataIndexer","l":"getNumTimesEventsSeen()"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"getObjectSettings()"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"getObjectSettings(String)","url":"getObjectSettings(java.lang.String)"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesFormatParameters","l":"getOntoNotesDir()"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"getOrderedTags(List<String>, List<String>, int, double[])","url":"getOrderedTags(java.util.List,java.util.List,int,double[])"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"getOrderedTags(List<String>, List<String>, int)","url":"getOrderedTags(java.util.List,java.util.List,int)"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument.IrishSentenceBankSentence","l":"getOriginal()"},{"p":"opennlp.tools.ml.model","c":"Event","l":"getOutcome()"},{"p":"opennlp.tools.ml.model","c":"AbstractModel","l":"getOutcome(int)"},{"p":"opennlp.tools.ml.model","c":"MaxentModel","l":"getOutcome(int)"},{"p":"opennlp.tools.util","c":"Sequence","l":"getOutcome(int)"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"getOutcomeLabels()"},{"p":"opennlp.tools.ml.model","c":"DataIndexer","l":"getOutcomeLabels()"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"getOutcomeList()"},{"p":"opennlp.tools.ml.model","c":"DataIndexer","l":"getOutcomeList()"},{"p":"opennlp.tools.ml","c":"BeamSearch","l":"getOutcomes()"},{"p":"opennlp.tools.ml.model","c":"Context","l":"getOutcomes()"},{"p":"opennlp.tools.ml.model","c":"SequenceClassificationModel","l":"getOutcomes()"},{"p":"opennlp.tools.util","c":"Sequence","l":"getOutcomes()"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesEvalParameters","l":"getOutcomeTotals()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentence","l":"getParagraphId()"},{"p":"opennlp.tools.formats","c":"AbstractSampleStreamFactory","l":"getParameters()"},{"p":"opennlp.tools.ml.model","c":"Context","l":"getParameters()"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"getParameters(String)","url":"getParameters(java.lang.String)"},{"p":"opennlp.tools.cmdline.params","c":"BasicTrainingParams","l":"getParams()"},{"p":"opennlp.tools.ml.model","c":"DynamicEvalParameters","l":"getParams()"},{"p":"opennlp.tools.ml.model","c":"EvalParameters","l":"getParams()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getParent()"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"getParserChunkerModel()"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"getParserTaggerModel()"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"getParserType()"},{"p":"opennlp.tools.chunker","c":"ChunkSample","l":"getPhrasesAsSpanList()"},{"p":"opennlp.tools.formats.masc","c":"MascToken","l":"getPos()"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"getPOSContextGenerator()"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"getPOSContextGenerator(int)"},{"p":"opennlp.tools.sentdetect","c":"DefaultEndOfSentenceScanner","l":"getPositions(char[])"},{"p":"opennlp.tools.sentdetect","c":"EndOfSentenceScanner","l":"getPositions(char[])"},{"p":"opennlp.tools.sentdetect","c":"DefaultEndOfSentenceScanner","l":"getPositions(CharSequence)","url":"getPositions(java.lang.CharSequence)"},{"p":"opennlp.tools.sentdetect","c":"EndOfSentenceScanner","l":"getPositions(CharSequence)","url":"getPositions(java.lang.CharSequence)"},{"p":"opennlp.tools.sentdetect","c":"DefaultEndOfSentenceScanner","l":"getPositions(StringBuffer)","url":"getPositions(java.lang.StringBuffer)"},{"p":"opennlp.tools.sentdetect","c":"EndOfSentenceScanner","l":"getPositions(StringBuffer)","url":"getPositions(java.lang.StringBuffer)"},{"p":"opennlp.tools.postag","c":"POSModel","l":"getPosModel()"},{"p":"opennlp.tools.postag","c":"POSModel","l":"getPosSequenceModel()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluWordLine","l":"getPosTag(ConlluTagset)","url":"getPosTag(opennlp.tools.formats.conllu.ConlluTagset)"},{"p":"opennlp.tools.util.eval","c":"FMeasure","l":"getPrecisionScore()"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"getPredCounts()"},{"p":"opennlp.tools.ml.model","c":"DataIndexer","l":"getPredCounts()"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"getPredLabels()"},{"p":"opennlp.tools.ml.model","c":"DataIndexer","l":"getPredLabels()"},{"p":"opennlp.tools.chunker","c":"ChunkSample","l":"getPreds()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getPreviousPunctuationSet()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getProb()"},{"p":"opennlp.tools.util","c":"Span","l":"getProb()"},{"p":"opennlp.tools.util","c":"Sequence","l":"getProb(int)"},{"p":"opennlp.tools.util","c":"Sequence","l":"getProbs()"},{"p":"opennlp.tools.util","c":"Sequence","l":"getProbs(double[])"},{"p":"opennlp.tools.entitylinker","c":"EntityLinkerProperties","l":"getProperty(String, String)","url":"getProperty(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getPseudoGradAtNext()"},{"p":"opennlp.tools.parser","c":"HeadRules","l":"getPunctuationTags()"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules","l":"getPunctuationTags()"},{"p":"opennlp.tools.parser.lang.es","c":"AncoraSpanishHeadRules","l":"getPunctuationTags()"},{"p":"opennlp.tools.formats.masc","c":"MascToken","l":"getQuarks()"},{"p":"opennlp.tools.util.eval","c":"FMeasure","l":"getRecallScore()"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory.RegexAble","l":"getRegexMap()"},{"p":"opennlp.tools.cmdline.params","c":"FineGrainedEvaluatorParams","l":"getReportOutputFile()"},{"p":"opennlp.tools.util.featuregen","c":"FeatureGeneratorResourceProvider","l":"getResource(String)","url":"getResource(java.lang.String)"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"getResultBuffer()"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"getResultLength()"},{"p":"opennlp.tools.util","c":"Version","l":"getRevision()"},{"p":"opennlp.tools.parser.treeinsert","c":"Parser","l":"getRightFrontier(Parse, Set<String>)","url":"getRightFrontier(opennlp.tools.parser.Parse,java.util.Set)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.Sentence","l":"getRoot()"},{"p":"opennlp.tools.util","c":"Sequence","l":"getScore()"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"getScoreMap()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"getSDContextGenerator()"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"getSearchTerm()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Leaf","l":"getSecondaryTag()"},{"p":"opennlp.tools.formats.nkjp","c":"NKJPSegmentationDocument","l":"getSegments()"},{"p":"opennlp.tools.formats.masc","c":"MascSentence","l":"getSentDetectText()"},{"p":"opennlp.tools.chunker","c":"ChunkSample","l":"getSentence()"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"getSentence()"},{"p":"opennlp.tools.postag","c":"POSSample","l":"getSentence()"},{"p":"opennlp.tools.cmdline.namefind","c":"NameSampleCountersStream","l":"getSentenceCount()"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"getSentenceid()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentence","l":"getSentenceIdComment()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorME","l":"getSentenceProbabilities()"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument","l":"getSentences()"},{"p":"opennlp.tools.formats.letsmt","c":"LetsmtDocument","l":"getSentences()"},{"p":"opennlp.tools.sentdetect","c":"SentenceSample","l":"getSentences()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"getSequenceCodec()"},{"p":"opennlp.tools.ml","c":"TrainerFactory","l":"getSequenceModelTrainer(TrainingParameters, Map<String, String>)","url":"getSequenceModelTrainer(opennlp.tools.util.TrainingParameters,java.util.Map)"},{"p":"opennlp.tools.chunker","c":"ChunkerFactory","l":"getSequenceValidator()"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerFactory","l":"getSequenceValidator()"},{"p":"opennlp.tools.parser","c":"ParserChunkerFactory","l":"getSequenceValidator()"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"getSequenceValidator()"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerCrossValidatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerEvaluatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerMETool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerTrainerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.dictionary","c":"DictionaryBuilderTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatCrossValidatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatEvaluatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatTrainerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.entitylinker","c":"EntityLinkerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorCrossValidatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorEvaluatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorTrainerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.languagemodel","c":"NGramLanguageModelTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerEvaluatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerMETool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerTrainerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.namefind","c":"CensusDictionaryCreatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderCrossValidatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderEvaluatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderTrainerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.parser","c":"BuildModelUpdaterTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.parser","c":"CheckModelUpdaterTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.parser","c":"ParserEvaluatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.parser","c":"ParserTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.parser","c":"ParserTrainerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.parser","c":"TaggerModelReplacerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerCrossValidatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerEvaluatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerTrainerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorCrossValidatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorEvaluatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorTrainerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"SimpleTokenizerTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerCrossValidatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerMEEvaluatorTool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerMETool","l":"getShortDescription()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerTrainerTool","l":"getShortDescription()"},{"p":"opennlp.tools.util","c":"StringUtil","l":"getShortestEditScript(String, String)","url":"getShortestEditScript(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getSignVector()"},{"p":"opennlp.tools.util","c":"Sequence","l":"getSize()"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument.IrishSentenceBankSentence","l":"getSource()"},{"p":"opennlp.tools.ml.model","c":"Sequence","l":"getSource()"},{"p":"opennlp.tools.parser","c":"Constituent","l":"getSpan()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getSpan()"},{"p":"opennlp.tools.formats.brat","c":"SpanAnnotation","l":"getSpans()"},{"p":"opennlp.tools.namefind","c":"RegexNameFinder","l":"getSpanType()"},{"p":"opennlp.tools.util","c":"Span","l":"getStart()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getStepSize()"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getStr(String, String)","url":"getStr(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.util.featuregen","c":"GeneratorFactory.AbstractXmlFeatureGeneratorFactory","l":"getStr(String)","url":"getStr(java.lang.String)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"getStringParameter(String, String, String)","url":"getStringParameter(java.lang.String,java.lang.String,java.lang.String)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"getStringParameter(String, String)","url":"getStringParameter(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetector","l":"getSupportedLanguages()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorME","l":"getSupportedLanguages()"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument.IrishSentenceBankFlex","l":"getSurface()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.TreeElement","l":"getSyntacticTag()"},{"p":"opennlp.tools.util","c":"TokenTag","l":"getTag()"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"getTagDictionary()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getTagNodes()"},{"p":"opennlp.tools.chunker","c":"ChunkSample","l":"getTags()"},{"p":"opennlp.tools.formats.masc","c":"MascPennTagParser","l":"getTags()"},{"p":"opennlp.tools.formats.masc","c":"MascSentence","l":"getTags()"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSample","l":"getTags()"},{"p":"opennlp.tools.postag","c":"POSSample","l":"getTags()"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"getTags(String)","url":"getTags(java.lang.String)"},{"p":"opennlp.tools.postag","c":"TagDictionary","l":"getTags(String)","url":"getTags(java.lang.String)"},{"p":"opennlp.tools.parser","c":"Parse","l":"getTagSequenceProb()"},{"p":"opennlp.tools.util.eval","c":"CrossValidationPartitioner.TrainingSampleStream","l":"getTestSampleStream()"},{"p":"opennlp.tools.doccat","c":"DocumentSample","l":"getText()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.Sentence","l":"getText()"},{"p":"opennlp.tools.formats.brat","c":"BratDocument","l":"getText()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getText()"},{"p":"opennlp.tools.tokenize","c":"TokenSample","l":"getText()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentence","l":"getTextComment()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentence","l":"getTextLang()"},{"p":"opennlp.tools.util","c":"TokenTag","l":"getToken()"},{"p":"opennlp.tools.util","c":"StringList","l":"getToken(int)"},{"p":"opennlp.tools.cmdline.namefind","c":"NameSampleCountersStream","l":"getTokenCount()"},{"p":"opennlp.tools.formats.masc","c":"MascToken","l":"getTokenId()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getTokenNodes()"},{"p":"opennlp.tools.tokenize","c":"TokenizerME","l":"getTokenProbabilities()"},{"p":"opennlp.tools.dictionary.serializer","c":"Entry","l":"getTokens()"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument.IrishSentenceBankSentence","l":"getTokens()"},{"p":"opennlp.tools.formats.letsmt","c":"LetsmtDocument.LetsmtSentence","l":"getTokens()"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSample","l":"getTokens()"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument.IrishSentenceBankSentence","l":"getTokenSample()"},{"p":"opennlp.tools.tokenize","c":"TokenSample","l":"getTokenSpans()"},{"p":"opennlp.tools.formats.masc","c":"MascSentence","l":"getTokensSpans()"},{"p":"opennlp.tools.formats.masc","c":"MascSentence","l":"getTokenStrings()"},{"p":"opennlp.tools.formats.masc","c":"MascSentence","l":"getTokenText()"},{"p":"opennlp.tools.formats.masc","c":"MascPennTagParser","l":"getTokenToQuarks()"},{"p":"opennlp.tools.ml","c":"TrainerFactory","l":"getTrainerType(TrainingParameters)","url":"getTrainerType(opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument.IrishSentenceBankSentence","l":"getTranslation()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentence","l":"getTranslit()"},{"p":"opennlp.tools.formats.brat","c":"BratAnnotation","l":"getType()"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory.RegexAble","l":"getType()"},{"p":"opennlp.tools.parser","c":"Parse","l":"getType()"},{"p":"opennlp.tools.util","c":"Span","l":"getType()"},{"p":"opennlp.tools.formats.brat","c":"AnnotationConfiguration","l":"getTypeClass(String)","url":"getTypeClass(java.lang.String)"},{"p":"opennlp.tools.formats.brat","c":"AttributeAnnotation","l":"getValue()"},{"p":"opennlp.tools.util","c":"MutableInt","l":"getValue()"},{"p":"opennlp.tools.dictionary.serializer","c":"Attributes","l":"getValue(String)","url":"getValue(java.lang.String)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getValueAtCurr()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"getValueAtNext()"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"getValues()"},{"p":"opennlp.tools.ml.model","c":"DataIndexer","l":"getValues()"},{"p":"opennlp.tools.ml.model","c":"Event","l":"getValues()"},{"p":"opennlp.tools.ml.model","c":"OnePassRealValueDataIndexer","l":"getValues()"},{"p":"opennlp.tools.util.model","c":"BaseModel","l":"getVersion()"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesEvalParameters","l":"getVocabulary()"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerEvaluator","l":"getWordAccuracy()"},{"p":"opennlp.tools.postag","c":"POSEvaluator","l":"getWordAccuracy()"},{"p":"opennlp.tools.postag","c":"POSTaggerCrossValidator","l":"getWordAccuracy()"},{"p":"opennlp.tools.util.featuregen","c":"BrownTokenClasses","l":"getWordClasses(String, BrownCluster)","url":"getWordClasses(java.lang.String,opennlp.tools.util.featuregen.BrownCluster)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerEvaluator","l":"getWordCount()"},{"p":"opennlp.tools.postag","c":"POSEvaluator","l":"getWordCount()"},{"p":"opennlp.tools.postag","c":"POSTaggerCrossValidator","l":"getWordCount()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentence","l":"getWordLines()"},{"p":"opennlp.tools.ml.maxent","c":"GISModel","l":"GISModel(Context[], String[], String[], Prior)","url":"%3Cinit%3E(opennlp.tools.ml.model.Context[],java.lang.String[],java.lang.String[],opennlp.tools.ml.model.Prior)"},{"p":"opennlp.tools.ml.maxent","c":"GISModel","l":"GISModel(Context[], String[], String[])","url":"%3Cinit%3E(opennlp.tools.ml.model.Context[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.ml.maxent.io","c":"GISModelReader","l":"GISModelReader(DataReader)","url":"%3Cinit%3E(opennlp.tools.ml.model.DataReader)"},{"p":"opennlp.tools.ml.maxent.io","c":"GISModelReader","l":"GISModelReader(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.maxent.io","c":"GISModelWriter","l":"GISModelWriter(AbstractModel)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"GISTrainer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"Function","l":"gradientAt(double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"NegLogLikelihood","l":"gradientAt(double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"ParallelNegLogLikelihood","l":"gradientAt(double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer.L2RegFunction","l":"gradientAt(double[])"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"GREEK"},{"p":"opennlp.tools.stemmer.snowball","c":"greekStemmer","l":"greekStemmer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.chunker","c":"ChunkSample","l":"hashCode()"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"hashCode()"},{"p":"opennlp.tools.doccat","c":"DocumentSample","l":"hashCode()"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"hashCode()"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"hashCode()"},{"p":"opennlp.tools.langdetect","c":"Language","l":"hashCode()"},{"p":"opennlp.tools.langdetect","c":"LanguageSample","l":"hashCode()"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSample","l":"hashCode()"},{"p":"opennlp.tools.ml.maxent","c":"GISModel","l":"hashCode()"},{"p":"opennlp.tools.ml.model","c":"AbstractModel","l":"hashCode()"},{"p":"opennlp.tools.ml.model","c":"ComparableEvent","l":"hashCode()"},{"p":"opennlp.tools.ml.model","c":"ComparablePredicate","l":"hashCode()"},{"p":"opennlp.tools.ml.model","c":"Context","l":"hashCode()"},{"p":"opennlp.tools.ml.model","c":"EvalParameters","l":"hashCode()"},{"p":"opennlp.tools.ml.model","c":"UniformPrior","l":"hashCode()"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModel","l":"hashCode()"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"hashCode()"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"hashCode()"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"hashCode()"},{"p":"opennlp.tools.parser","c":"Parse","l":"hashCode()"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"hashCode()"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules","l":"hashCode()"},{"p":"opennlp.tools.parser.lang.es","c":"AncoraSpanishHeadRules","l":"hashCode()"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"hashCode()"},{"p":"opennlp.tools.postag","c":"POSModel","l":"hashCode()"},{"p":"opennlp.tools.postag","c":"POSSample","l":"hashCode()"},{"p":"opennlp.tools.sentdetect","c":"SentenceSample","l":"hashCode()"},{"p":"opennlp.tools.stemmer.snowball","c":"arabicStemmer","l":"hashCode()"},{"p":"opennlp.tools.stemmer.snowball","c":"catalanStemmer","l":"hashCode()"},{"p":"opennlp.tools.stemmer.snowball","c":"greekStemmer","l":"hashCode()"},{"p":"opennlp.tools.stemmer.snowball","c":"indonesianStemmer","l":"hashCode()"},{"p":"opennlp.tools.stemmer.snowball","c":"irishStemmer","l":"hashCode()"},{"p":"opennlp.tools.tokenize","c":"TokenSample","l":"hashCode()"},{"p":"opennlp.tools.tokenize","c":"TokenizerModel","l":"hashCode()"},{"p":"opennlp.tools.util","c":"Sequence","l":"hashCode()"},{"p":"opennlp.tools.util","c":"Span","l":"hashCode()"},{"p":"opennlp.tools.util","c":"StringList","l":"hashCode()"},{"p":"opennlp.tools.util","c":"TokenTag","l":"hashCode()"},{"p":"opennlp.tools.util","c":"Version","l":"hashCode()"},{"p":"opennlp.tools.ml.model","c":"HashSumEventStream","l":"HashSumEventStream(ObjectStream<Event>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats.masc","c":"MascDocument","l":"hasNamedEntities()"},{"p":"opennlp.tools.ml.maxent","c":"DataStream","l":"hasNext()"},{"p":"opennlp.tools.tokenize.lang.en","c":"TokenSampleStream","l":"hasNext()"},{"p":"opennlp.tools.util","c":"ReverseListIterator","l":"hasNext()"},{"p":"opennlp.tools.util.eval","c":"CrossValidationPartitioner","l":"hasNext()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"SimpleTokenizerTool","l":"hasParams()"},{"p":"opennlp.tools.formats.masc","c":"MascDocument","l":"hasPennTags()"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules","l":"HeadRules(Reader)","url":"%3Cinit%3E(java.io.Reader)"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules","l":"HeadRules(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules.HeadRulesSerializer","l":"HeadRulesSerializer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser.lang.es","c":"AncoraSpanishHeadRules.HeadRulesSerializer","l":"HeadRulesSerializer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"HUNGARIAN"},{"p":"opennlp.tools.util.ext","c":"ExtensionServiceKeys","l":"ID"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"INC_NODE"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"INCOMPLETE"},{"p":"opennlp.tools.util","c":"MutableInt","l":"increment()"},{"p":"opennlp.tools.dictionary","c":"Index","l":"Index(Iterator<StringList>)","url":"%3Cinit%3E(java.util.Iterator)"},{"p":"opennlp.tools.ml.model","c":"DataIndexer","l":"index(ObjectStream<Event>)","url":"index(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.ml.model","c":"OnePassDataIndexer","l":"index(ObjectStream<Event>)","url":"index(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.ml.model","c":"TwoPassDataIndexer","l":"index(ObjectStream<Event>)","url":"index(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.parser","c":"Parse","l":"indexOf(Parse)","url":"indexOf(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"INDONESIAN"},{"p":"opennlp.tools.stemmer.snowball","c":"indonesianStemmer","l":"indonesianStemmer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorFactory","l":"init()"},{"p":"opennlp.tools.parser.treeinsert","c":"ParserEventStream","l":"init()"},{"p":"opennlp.tools.entitylinker","c":"EntityLinker","l":"init(EntityLinkerProperties)","url":"init(opennlp.tools.entitylinker.EntityLinkerProperties)"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"init(Map<String, Object>, Map<String, String>)","url":"init(java.util.Map,java.util.Map)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"init(Map<String, Object>, Map<String, String>)","url":"init(java.util.Map,java.util.Map)"},{"p":"opennlp.tools.util.featuregen","c":"CustomFeatureGenerator","l":"init(Map<String, String>, FeatureGeneratorResourceProvider)","url":"init(java.util.Map,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"},{"p":"opennlp.tools.commons","c":"Trainer","l":"init(TrainingParameters, Map<String, String>)","url":"init(opennlp.tools.util.TrainingParameters,java.util.Map)"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"init(TrainingParameters, Map<String, String>)","url":"init(opennlp.tools.util.TrainingParameters,java.util.Map)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"init(TrainingParameters, Map<String, String>)","url":"init(opennlp.tools.util.TrainingParameters,java.util.Map)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"init(TrainingParameters, Map<String, String>)","url":"init(opennlp.tools.util.TrainingParameters,java.util.Map)"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"init(TrainingParameters, Map<String, String>)","url":"init(opennlp.tools.util.TrainingParameters,java.util.Map)"},{"p":"opennlp.tools.ml.model","c":"DataIndexer","l":"init(TrainingParameters, Map<String, String>)","url":"init(opennlp.tools.util.TrainingParameters,java.util.Map)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"INITIAL_STEP_SIZE"},{"p":"opennlp.tools.ml","c":"ArrayMath","l":"innerProduct(double[], double[])","url":"innerProduct(double[],double[])"},{"p":"opennlp.tools.dictionary.serializer","c":"EntryInserter","l":"insert(Entry)","url":"insert(opennlp.tools.dictionary.serializer.Entry)"},{"p":"opennlp.tools.parser","c":"Parse","l":"insert(Parse)","url":"insert(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.util.featuregen","c":"InSpanGenerator","l":"InSpanGenerator(String, TokenNameFinder)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.namefind.TokenNameFinder)"},{"p":"opennlp.tools.tokenize","c":"SimpleTokenizer","l":"INSTANCE"},{"p":"opennlp.tools.tokenize","c":"WhitespaceTokenizer","l":"INSTANCE"},{"p":"opennlp.tools.util.ext","c":"ExtensionLoader","l":"instantiateExtension(Class<T>, String)","url":"instantiateExtension(java.lang.Class,java.lang.String)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderFactory","l":"instantiateSequenceCodec(String)","url":"instantiateSequenceCodec(java.lang.String)"},{"p":"opennlp.tools.util","c":"InsufficientTrainingDataException","l":"InsufficientTrainingDataException(String, Throwable)","url":"%3Cinit%3E(java.lang.String,java.lang.Throwable)"},{"p":"opennlp.tools.util","c":"InsufficientTrainingDataException","l":"InsufficientTrainingDataException(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.util","c":"InsufficientTrainingDataException","l":"InsufficientTrainingDataException(Throwable)","url":"%3Cinit%3E(java.lang.Throwable)"},{"p":"opennlp.tools.util","c":"Span","l":"intersects(Span)","url":"intersects(opennlp.tools.util.Span)"},{"p":"opennlp.tools.util","c":"InvalidFormatException","l":"InvalidFormatException(String, Throwable)","url":"%3Cinit%3E(java.lang.String,java.lang.Throwable)"},{"p":"opennlp.tools.util","c":"InvalidFormatException","l":"InvalidFormatException(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.util","c":"InvalidFormatException","l":"InvalidFormatException(Throwable)","url":"%3Cinit%3E(java.lang.Throwable)"},{"p":"opennlp.tools.ml","c":"ArrayMath","l":"invL2norm(double[])"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"IRISH"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument","l":"IrishSentenceBankDocument()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument.IrishSentenceBankFlex","l":"IrishSentenceBankFlex(String, String[])","url":"%3Cinit%3E(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument.IrishSentenceBankSentence","l":"IrishSentenceBankSentence(String, String, String, Span[], IrishSentenceBankDocument.IrishSentenceBankFlex[])","url":"%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String,opennlp.tools.util.Span[],opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument.IrishSentenceBankFlex[])"},{"p":"opennlp.tools.stemmer.snowball","c":"irishStemmer","l":"irishStemmer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"isAllCapitalLetter()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"isAllDigit()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"isAllHiragana()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"isAllKatakana()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"isAllLetter()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"isAllLowerCaseLetter()"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"isCaseSensitive()"},{"p":"opennlp.tools.postag","c":"TagDictionary","l":"isCaseSensitive()"},{"p":"opennlp.tools.parser","c":"Parse","l":"isChunk()"},{"p":"opennlp.tools.parser","c":"Parse","l":"isChunk(boolean)"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"isClearAdaptiveDataSet()"},{"p":"opennlp.tools.util","c":"StringUtil","l":"isEmpty(CharSequence)","url":"isEmpty(java.lang.CharSequence)"},{"p":"opennlp.tools.parser","c":"Parse","l":"isFlat()"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"isInitialCapitalLetter()"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"isLarger(Probability<T>)","url":"isLarger(opennlp.tools.ml.naivebayes.Probability)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"isLarger(Probability<T>)","url":"isLarger(opennlp.tools.ml.naivebayes.Probability)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Leaf","l":"isLeaf()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.TreeElement","l":"isLeaf()"},{"p":"opennlp.tools.util.model","c":"ArtifactProvider","l":"isLoadedFromSerialized()"},{"p":"opennlp.tools.util.model","c":"BaseModel","l":"isLoadedFromSerialized()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentence","l":"isNewDocument()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentence","l":"isNewParagraph()"},{"p":"opennlp.tools.parser","c":"Parse","l":"isPosTag()"},{"p":"opennlp.tools.util","c":"Version","l":"isSnapshot()"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"isSortAndMerge()"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"isSortAndMerge()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"isSortAndMerge()"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesTrainer","l":"isSortAndMerge()"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"isSortAndMerge()"},{"p":"opennlp.tools.tokenize","c":"TokenizerFactory","l":"isUseAlphaNumericOptimization()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"isUseTokenEnd()"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"isValid()"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"isValid()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"isValid()"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"isValid()"},{"p":"opennlp.tools.ml.perceptron","c":"SimplePerceptronSequenceTrainer","l":"isValid()"},{"p":"opennlp.tools.ml","c":"TrainerFactory","l":"isValid(TrainingParameters)","url":"isValid(opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.util","c":"StringUtil","l":"isWhitespace(char)"},{"p":"opennlp.tools.util","c":"StringUtil","l":"isWhitespace(int)"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream.LANGUAGE","l":"IT"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"ITALIAN"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"ITERATIONS_DEFAULT"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"ITERATIONS_DEFAULT_VALUE"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"ITERATIONS_PARAM"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"ITERATIONS_PARAM"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"iterator()"},{"p":"opennlp.tools.dictionary.serializer","c":"Attributes","l":"iterator()"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"iterator()"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"iterator()"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"iterator()"},{"p":"opennlp.tools.util","c":"StringList","l":"iterator()"},{"p":"opennlp.tools.sentdetect.lang","c":"Factory","l":"jpnEosCharacters"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"L1COST_DEFAULT"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"L1COST_DEFAULT"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"L1COST_PARAM"},{"p":"opennlp.tools.ml","c":"ArrayMath","l":"l1norm(double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"L2COST_DEFAULT"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"L2COST_DEFAULT"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"L2COST_PARAM"},{"p":"opennlp.tools.ml","c":"ArrayMath","l":"l2norm(double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer.L2RegFunction","l":"L2RegFunction(Function, double)","url":"%3Cinit%3E(opennlp.tools.ml.maxent.quasinewton.Function,double)"},{"p":"opennlp.tools.parser","c":"GapLabeler","l":"labelGaps(Stack<Constituent>)","url":"labelGaps(java.util.Stack)"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules","l":"labelGaps(Stack<Constituent>)","url":"labelGaps(java.util.Stack)"},{"p":"opennlp.tools.parser.lang.es","c":"AncoraSpanishHeadRules","l":"labelGaps(Stack<Constituent>)","url":"labelGaps(java.util.Stack)"},{"p":"opennlp.tools.langdetect","c":"Language","l":"Language(String, double)","url":"%3Cinit%3E(java.lang.String,double)"},{"p":"opennlp.tools.langdetect","c":"Language","l":"Language(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"LanguageDetectorConfig()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorConverterTool","l":"LanguageDetectorConverterTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorCrossValidator","l":"LanguageDetectorCrossValidator(TrainingParameters, LanguageDetectorFactory, LanguageDetectorEvaluationMonitor...)","url":"%3Cinit%3E(opennlp.tools.util.TrainingParameters,opennlp.tools.langdetect.LanguageDetectorFactory,opennlp.tools.langdetect.LanguageDetectorEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorCrossValidatorTool","l":"LanguageDetectorCrossValidatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorEvaluationErrorListener","l":"LanguageDetectorEvaluationErrorListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorEvaluationErrorListener","l":"LanguageDetectorEvaluationErrorListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorEvaluator","l":"LanguageDetectorEvaluator(LanguageDetector, LanguageDetectorEvaluationMonitor...)","url":"%3Cinit%3E(opennlp.tools.langdetect.LanguageDetector,opennlp.tools.langdetect.LanguageDetectorEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorEvaluatorTool","l":"LanguageDetectorEvaluatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorEventStream","l":"LanguageDetectorEventStream(ObjectStream<LanguageSample>, LanguageDetectorContextGenerator)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.langdetect.LanguageDetectorContextGenerator)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorFactory","l":"LanguageDetectorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorFineGrainedReportListener","l":"LanguageDetectorFineGrainedReportListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorFineGrainedReportListener","l":"LanguageDetectorFineGrainedReportListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorME","l":"LanguageDetectorME(LanguageDetectorModel)","url":"%3Cinit%3E(opennlp.tools.langdetect.LanguageDetectorModel)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorModel","l":"LanguageDetectorModel(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorModel","l":"LanguageDetectorModel(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorModel","l":"LanguageDetectorModel(MaxentModel, Map<String, String>, LanguageDetectorFactory)","url":"%3Cinit%3E(opennlp.tools.ml.model.MaxentModel,java.util.Map,opennlp.tools.langdetect.LanguageDetectorFactory)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorModel","l":"LanguageDetectorModel(URL)","url":"%3Cinit%3E(java.net.URL)"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorModelLoader","l":"LanguageDetectorModelLoader()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorSampleStream","l":"LanguageDetectorSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorTool","l":"LanguageDetectorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorTrainerTool","l":"LanguageDetectorTrainerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.langdetect","c":"LanguageSample","l":"LanguageSample(Language, CharSequence)","url":"%3Cinit%3E(opennlp.tools.langdetect.Language,java.lang.CharSequence)"},{"p":"opennlp.tools.namefind","c":"BilouCodec","l":"LAST"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Leaf","l":"Leaf()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats.leipzig","c":"LeipzigLanguageSampleStream","l":"LeipzigLanguageSampleStream(File, int, int)","url":"%3Cinit%3E(java.io.File,int,int)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"LEMMA_NUMBER"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmaEvaluationErrorListener","l":"LemmaEvaluationErrorListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmaEvaluationErrorListener","l":"LemmaEvaluationErrorListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSample","l":"LemmaSample(List<String>, List<String>, List<String>)","url":"%3Cinit%3E(java.util.List,java.util.List,java.util.List)"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSample","l":"LemmaSample(String[], String[], String[])","url":"%3Cinit%3E(java.lang.String[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSampleEventStream","l":"LemmaSampleEventStream(ObjectStream<LemmaSample>, LemmatizerContextGenerator)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.lemmatizer.LemmatizerContextGenerator)"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSampleSequenceStream","l":"LemmaSampleSequenceStream(ObjectStream<LemmaSample>, LemmatizerContextGenerator)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.lemmatizer.LemmatizerContextGenerator)"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSampleStream","l":"LemmaSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.lemmatizer","c":"DictionaryLemmatizer","l":"lemmatize(List<String>, List<String>)","url":"lemmatize(java.util.List,java.util.List)"},{"p":"opennlp.tools.lemmatizer","c":"Lemmatizer","l":"lemmatize(List<String>, List<String>)","url":"lemmatize(java.util.List,java.util.List)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"lemmatize(List<String>, List<String>)","url":"lemmatize(java.util.List,java.util.List)"},{"p":"opennlp.tools.lemmatizer","c":"DictionaryLemmatizer","l":"lemmatize(String[], String[])","url":"lemmatize(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.lemmatizer","c":"Lemmatizer","l":"lemmatize(String[], String[])","url":"lemmatize(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"lemmatize(String[], String[])","url":"lemmatize(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerEvaluator","l":"LemmatizerEvaluator(Lemmatizer, LemmatizerEvaluationMonitor...)","url":"%3Cinit%3E(opennlp.tools.lemmatizer.Lemmatizer,opennlp.tools.lemmatizer.LemmatizerEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerEvaluatorTool","l":"LemmatizerEvaluatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerFactory","l":"LemmatizerFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerFineGrainedReportListener","l":"LemmatizerFineGrainedReportListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerFineGrainedReportListener","l":"LemmatizerFineGrainedReportListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"LemmatizerME(LemmatizerModel)","url":"%3Cinit%3E(opennlp.tools.lemmatizer.LemmatizerModel)"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerMETool","l":"LemmatizerMETool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerModel","l":"LemmatizerModel(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerModel","l":"LemmatizerModel(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerModel","l":"LemmatizerModel(Path)","url":"%3Cinit%3E(java.nio.file.Path)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerModel","l":"LemmatizerModel(String, MaxentModel, int, Map<String, String>, LemmatizerFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,int,java.util.Map,opennlp.tools.lemmatizer.LemmatizerFactory)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerModel","l":"LemmatizerModel(String, MaxentModel, LemmatizerFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,opennlp.tools.lemmatizer.LemmatizerFactory)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerModel","l":"LemmatizerModel(String, MaxentModel, Map<String, String>, LemmatizerFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,java.util.Map,opennlp.tools.lemmatizer.LemmatizerFactory)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerModel","l":"LemmatizerModel(String, SequenceClassificationModel<String>, Map<String, String>, LemmatizerFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.SequenceClassificationModel,java.util.Map,opennlp.tools.lemmatizer.LemmatizerFactory)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerModel","l":"LemmatizerModel(URL)","url":"%3Cinit%3E(java.net.URL)"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerModelLoader","l":"LemmatizerModelLoader()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerTrainerTool","l":"LemmatizerTrainerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util","c":"Span","l":"length()"},{"p":"opennlp.tools.formats.letsmt","c":"LetsmtDocument.LetsmtDocumentHandler","l":"LetsmtDocumentHandler()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats.letsmt","c":"LetsmtDocument.LetsmtSentence","l":"LetsmtSentence()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util","c":"StringUtil","l":"levenshteinDistance(String, String)","url":"levenshteinDistance(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch","l":"LineSearch()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"LineSearchResult(double, double, double, double[], double[], double[], double[], double[], double[], int)","url":"%3Cinit%3E(double,double,double,double[],double[],double[],double[],double[],double[],int)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"LineSearchResult(double, double, double, double[], double[], double[], double[], int)","url":"%3Cinit%3E(double,double,double,double[],double[],double[],double[],int)"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"LinkedSpan(ArrayList<T>, int, int, String, double)","url":"%3Cinit%3E(java.util.ArrayList,int,int,java.lang.String,double)"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"LinkedSpan(ArrayList<T>, int, int, String)","url":"%3Cinit%3E(java.util.ArrayList,int,int,java.lang.String)"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"LinkedSpan(ArrayList<T>, int, int)","url":"%3Cinit%3E(java.util.ArrayList,int,int)"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"LinkedSpan(ArrayList<T>, Span, int)","url":"%3Cinit%3E(java.util.ArrayList,opennlp.tools.util.Span,int)"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderTrainerTool","l":"loadResources(File, File)","url":"loadResources(java.io.File,java.io.File)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"LOG_LIKELIHOOD_THRESHOLD_DEFAULT"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"LOG_LIKELIHOOD_THRESHOLD_PARAM"},{"p":"opennlp.tools.ml.model","c":"Prior","l":"logPrior(double[], Context[], float[])","url":"logPrior(double[],opennlp.tools.ml.model.Context[],float[])"},{"p":"opennlp.tools.ml.model","c":"UniformPrior","l":"logPrior(double[], Context[], float[])","url":"logPrior(double[],opennlp.tools.ml.model.Context[],float[])"},{"p":"opennlp.tools.ml.model","c":"Prior","l":"logPrior(double[], int[], float[])","url":"logPrior(double[],int[],float[])"},{"p":"opennlp.tools.ml.model","c":"UniformPrior","l":"logPrior(double[], int[], float[])","url":"logPrior(double[],int[],float[])"},{"p":"opennlp.tools.ml.model","c":"Prior","l":"logPrior(double[], int[])","url":"logPrior(double[],int[])"},{"p":"opennlp.tools.ml.model","c":"UniformPrior","l":"logPrior(double[], int[])","url":"logPrior(double[],int[])"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbabilities","l":"LogProbabilities()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"LogProbability(T)","url":"%3Cinit%3E(T)"},{"p":"opennlp.tools.ml","c":"ArrayMath","l":"logSumOfExps(double[])"},{"p":"opennlp.tools.util.featuregen","c":"BrownCluster","l":"lookupToken(String)","url":"lookupToken(java.lang.String)"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterDictionary","l":"lookupToken(String)","url":"lookupToken(java.lang.String)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"M_DEFAULT"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"M_DEFAULT"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"M_PARAM"},{"p":"opennlp.tools.util","c":"MarkableFileInputStreamFactory","l":"MarkableFileInputStreamFactory(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.formats.masc","c":"MascNamedEntitySampleStreamFactory","l":"MASC_FORMAT"},{"p":"opennlp.tools.formats.masc","c":"MascPOSSampleStreamFactory","l":"MASC_FORMAT"},{"p":"opennlp.tools.formats.masc","c":"MascSentenceSampleStreamFactory","l":"MASC_FORMAT"},{"p":"opennlp.tools.formats.masc","c":"MascTokenSampleStreamFactory","l":"MASC_FORMAT"},{"p":"opennlp.tools.formats.masc","c":"MascDocument","l":"MascDocument(String, List<MascSentence>)","url":"%3Cinit%3E(java.lang.String,java.util.List)"},{"p":"opennlp.tools.formats.masc","c":"MascDocumentStream","l":"MascDocumentStream(File, boolean, FileFilter)","url":"%3Cinit%3E(java.io.File,boolean,java.io.FileFilter)"},{"p":"opennlp.tools.formats.masc","c":"MascDocumentStream","l":"MascDocumentStream(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.formats.masc","c":"MascNamedEntityParser","l":"MascNamedEntityParser()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats.masc","c":"MascNamedEntitySampleStream","l":"MascNamedEntitySampleStream(ObjectStream<MascDocument>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats.masc","c":"MascPennTagParser","l":"MascPennTagParser()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats.masc","c":"MascPOSSampleStream","l":"MascPOSSampleStream(ObjectStream<MascDocument>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats.masc","c":"MascSentence","l":"MascSentence(int, int, String, List<MascWord>, List<MascWord>)","url":"%3Cinit%3E(int,int,java.lang.String,java.util.List,java.util.List)"},{"p":"opennlp.tools.formats.masc","c":"MascSentenceSampleStream","l":"MascSentenceSampleStream(ObjectStream<MascDocument>, int)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.formats.masc","c":"MascToken","l":"MascToken(int, int, int, String, String, MascWord[])","url":"%3Cinit%3E(int,int,int,java.lang.String,java.lang.String,opennlp.tools.formats.masc.MascWord[])"},{"p":"opennlp.tools.formats.masc","c":"MascTokenSampleStream","l":"MascTokenSampleStream(ObjectStream<MascDocument>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats.masc","c":"MascWord","l":"MascWord(int, int, int)","url":"%3Cinit%3E(int,int,int)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"MAX_FCT_EVAL_DEFAULT"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"MAX_FCT_EVAL_DEFAULT"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"MAX_FCT_EVAL_PARAM"},{"p":"opennlp.tools.ml","c":"ArrayMath","l":"max(double[])"},{"p":"opennlp.tools.ml.model","c":"AbstractModel.ModelType","l":"Maxent"},{"p":"opennlp.tools.util.model","c":"ModelType","l":"MAXENT"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"MAXENT_QN_VALUE"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"MAXENT_VALUE"},{"p":"opennlp.tools.ml.model","c":"AbstractModel.ModelType","l":"MaxentQn"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"ArrayMath","l":"maxIdx(double[])"},{"p":"opennlp.tools.util.eval","c":"Mean","l":"mean()"},{"p":"opennlp.tools.util.eval","c":"Mean","l":"Mean()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize","c":"Detokenizer.DetokenizationOperation","l":"MERGE_BOTH"},{"p":"opennlp.tools.tokenize","c":"Detokenizer.DetokenizationOperation","l":"MERGE_TO_LEFT"},{"p":"opennlp.tools.tokenize","c":"Detokenizer.DetokenizationOperation","l":"MERGE_TO_RIGHT"},{"p":"opennlp.tools.util.eval","c":"FMeasure","l":"mergeInto(FMeasure)","url":"mergeInto(opennlp.tools.util.eval.FMeasure)"},{"p":"opennlp.tools.parser.chunking","c":"Parser","l":"mergeReportIntoManifest(Map<String, String>, Map<String, String>, String)","url":"mergeReportIntoManifest(java.util.Map,java.util.Map,java.lang.String)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.Sentence","l":"META_LABEL_FINAL"},{"p":"opennlp.tools.stemmer.snowball","c":"indonesianStemmer","l":"methodObject"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory.DEFAULT_REGEX_NAME_FINDER","l":"MGRS"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"MIN_STEP_SIZE"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"minimize(Function)","url":"minimize(opennlp.tools.ml.maxent.quasinewton.Function)"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkEvaluationErrorListener","l":"misclassified(ChunkSample, ChunkSample)","url":"misclassified(opennlp.tools.chunker.ChunkSample,opennlp.tools.chunker.ChunkSample)"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatEvaluationErrorListener","l":"misclassified(DocumentSample, DocumentSample)","url":"misclassified(opennlp.tools.doccat.DocumentSample,opennlp.tools.doccat.DocumentSample)"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatFineGrainedReportListener","l":"misclassified(DocumentSample, DocumentSample)","url":"misclassified(opennlp.tools.doccat.DocumentSample,opennlp.tools.doccat.DocumentSample)"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorEvaluationErrorListener","l":"misclassified(LanguageSample, LanguageSample)","url":"misclassified(opennlp.tools.langdetect.LanguageSample,opennlp.tools.langdetect.LanguageSample)"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorFineGrainedReportListener","l":"misclassified(LanguageSample, LanguageSample)","url":"misclassified(opennlp.tools.langdetect.LanguageSample,opennlp.tools.langdetect.LanguageSample)"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmaEvaluationErrorListener","l":"misclassified(LemmaSample, LemmaSample)","url":"misclassified(opennlp.tools.lemmatizer.LemmaSample,opennlp.tools.lemmatizer.LemmaSample)"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerFineGrainedReportListener","l":"misclassified(LemmaSample, LemmaSample)","url":"misclassified(opennlp.tools.lemmatizer.LemmaSample,opennlp.tools.lemmatizer.LemmaSample)"},{"p":"opennlp.tools.cmdline.namefind","c":"NameEvaluationErrorListener","l":"misclassified(NameSample, NameSample)","url":"misclassified(opennlp.tools.namefind.NameSample,opennlp.tools.namefind.NameSample)"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderFineGrainedReportListener","l":"misclassified(NameSample, NameSample)","url":"misclassified(opennlp.tools.namefind.NameSample,opennlp.tools.namefind.NameSample)"},{"p":"opennlp.tools.cmdline.postag","c":"POSEvaluationErrorListener","l":"misclassified(POSSample, POSSample)","url":"misclassified(opennlp.tools.postag.POSSample,opennlp.tools.postag.POSSample)"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerFineGrainedReportListener","l":"misclassified(POSSample, POSSample)","url":"misclassified(opennlp.tools.postag.POSSample,opennlp.tools.postag.POSSample)"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceEvaluationErrorListener","l":"misclassified(SentenceSample, SentenceSample)","url":"misclassified(opennlp.tools.sentdetect.SentenceSample,opennlp.tools.sentdetect.SentenceSample)"},{"p":"opennlp.tools.util.eval","c":"EvaluationMonitor","l":"misclassified(T, T)","url":"misclassified(T,T)"},{"p":"opennlp.tools.cmdline.tokenizer","c":"DetokenEvaluationErrorListener","l":"misclassified(TokenSample, TokenSample)","url":"misclassified(opennlp.tools.tokenize.TokenSample,opennlp.tools.tokenize.TokenSample)"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenEvaluationErrorListener","l":"misclassified(TokenSample, TokenSample)","url":"misclassified(opennlp.tools.tokenize.TokenSample,opennlp.tools.tokenize.TokenSample)"},{"p":"opennlp.tools.formats.moses","c":"MosesSentenceSampleStream","l":"MosesSentenceSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary.Operation","l":"MOVE_BOTH"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary.Operation","l":"MOVE_LEFT"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary.Operation","l":"MOVE_RIGHT"},{"p":"opennlp.tools.formats.muc","c":"MucNameContentHandler","l":"MucNameContentHandler(Tokenizer, List<NameSample>)","url":"%3Cinit%3E(opennlp.tools.tokenize.Tokenizer,java.util.List)"},{"p":"opennlp.tools.ml.model","c":"MutableContext","l":"MutableContext(int[], double[])","url":"%3Cinit%3E(int[],double[])"},{"p":"opennlp.tools.util","c":"MutableInt","l":"MutableInt(int)","url":"%3Cinit%3E(int)"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesTrainer","l":"NAIVE_BAYES_VALUE"},{"p":"opennlp.tools.ml.model","c":"AbstractModel.ModelType","l":"NaiveBayes"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesEvalParameters","l":"NaiveBayesEvalParameters(Context[], int, double[], long)","url":"%3Cinit%3E(opennlp.tools.ml.model.Context[],int,double[],long)"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModel","l":"NaiveBayesModel(Context[], String[], String[])","url":"%3Cinit%3E(opennlp.tools.ml.model.Context[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModelReader","l":"NaiveBayesModelReader(DataReader)","url":"%3Cinit%3E(opennlp.tools.ml.model.DataReader)"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModelReader","l":"NaiveBayesModelReader(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModelWriter","l":"NaiveBayesModelWriter(AbstractModel)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel)"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesTrainer","l":"NaiveBayesTrainer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesTrainer","l":"NaiveBayesTrainer(TrainingParameters)","url":"%3Cinit%3E(opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.ml.model","c":"ComparablePredicate","l":"name"},{"p":"opennlp.tools.util","c":"DownloadUtil.ModelType","l":"NAME_FINDER"},{"p":"opennlp.tools.cmdline.namefind","c":"NameEvaluationErrorListener","l":"NameEvaluationErrorListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.namefind","c":"NameEvaluationErrorListener","l":"NameEvaluationErrorListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.formats","c":"NameFinderCensus90NameStream","l":"NameFinderCensus90NameStream(InputStreamFactory, Charset)","url":"%3Cinit%3E(opennlp.tools.util.InputStreamFactory,java.nio.charset.Charset)"},{"p":"opennlp.tools.formats","c":"NameFinderCensus90NameStream","l":"NameFinderCensus90NameStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.namefind","c":"NameFinderEventStream","l":"NameFinderEventStream(ObjectStream<NameSample>, String, NameContextGenerator, SequenceCodec<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,java.lang.String,opennlp.tools.namefind.NameContextGenerator,opennlp.tools.util.SequenceCodec)"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"NameFinderME(TokenNameFinderModel)","url":"%3Cinit%3E(opennlp.tools.namefind.TokenNameFinderModel)"},{"p":"opennlp.tools.namefind","c":"NameFinderSequenceValidator","l":"NameFinderSequenceValidator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"NameSample(String, String[], Span[], String[][], boolean)","url":"%3Cinit%3E(java.lang.String,java.lang.String[],opennlp.tools.util.Span[],java.lang.String[][],boolean)"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"NameSample(String[], Span[], boolean)","url":"%3Cinit%3E(java.lang.String[],opennlp.tools.util.Span[],boolean)"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"NameSample(String[], Span[], String[][], boolean)","url":"%3Cinit%3E(java.lang.String[],opennlp.tools.util.Span[],java.lang.String[][],boolean)"},{"p":"opennlp.tools.namefind","c":"NameSampleDataStream","l":"NameSampleDataStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.namefind","c":"NameSampleSequenceStream","l":"NameSampleSequenceStream(ObjectStream<NameSample>, AdaptiveFeatureGenerator, boolean)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.util.featuregen.AdaptiveFeatureGenerator,boolean)"},{"p":"opennlp.tools.namefind","c":"NameSampleSequenceStream","l":"NameSampleSequenceStream(ObjectStream<NameSample>, AdaptiveFeatureGenerator)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.util.featuregen.AdaptiveFeatureGenerator)"},{"p":"opennlp.tools.namefind","c":"NameSampleSequenceStream","l":"NameSampleSequenceStream(ObjectStream<NameSample>, NameContextGenerator, boolean, SequenceCodec<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.namefind.NameContextGenerator,boolean,opennlp.tools.util.SequenceCodec)"},{"p":"opennlp.tools.namefind","c":"NameSampleSequenceStream","l":"NameSampleSequenceStream(ObjectStream<NameSample>, NameContextGenerator, boolean)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.namefind.NameContextGenerator,boolean)"},{"p":"opennlp.tools.namefind","c":"NameSampleSequenceStream","l":"NameSampleSequenceStream(ObjectStream<NameSample>, NameContextGenerator)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.namefind.NameContextGenerator)"},{"p":"opennlp.tools.namefind","c":"NameSampleSequenceStream","l":"NameSampleSequenceStream(ObjectStream<NameSample>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.namefind","c":"NameSampleTypeFilter","l":"NameSampleTypeFilter(Set<String>, ObjectStream<NameSample>)","url":"%3Cinit%3E(java.util.Set,opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.namefind","c":"NameSampleTypeFilter","l":"NameSampleTypeFilter(String[], ObjectStream<NameSample>)","url":"%3Cinit%3E(java.lang.String[],opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats.convert","c":"NameToSentenceSampleStream","l":"NameToSentenceSampleStream(Detokenizer, ObjectStream<NameSample>, int)","url":"%3Cinit%3E(opennlp.tools.tokenize.Detokenizer,opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.formats.convert","c":"NameToTokenSampleStream","l":"NameToTokenSampleStream(Detokenizer, ObjectStream<NameSample>)","url":"%3Cinit%3E(opennlp.tools.tokenize.Detokenizer,opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"NegLogLikelihood","l":"NegLogLikelihood(DataIndexer)","url":"%3Cinit%3E(opennlp.tools.ml.model.DataIndexer)"},{"p":"opennlp.tools.sentdetect","c":"NewlineSentenceDetector","l":"NewlineSentenceDetector()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGenerator","l":"NEXT_PREFIX"},{"p":"opennlp.tools.tokenize.lang.en","c":"TokenSampleStream","l":"next()"},{"p":"opennlp.tools.util","c":"ReverseListIterator","l":"next()"},{"p":"opennlp.tools.util.eval","c":"CrossValidationPartitioner","l":"next()"},{"p":"opennlp.tools.ml.perceptron","c":"SimplePerceptronSequenceTrainer","l":"nextIteration(int)"},{"p":"opennlp.tools.ml.maxent","c":"DataStream","l":"nextToken()"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"NGramCharModel()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.doccat","c":"NGramFeatureGenerator","l":"NGramFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.doccat","c":"NGramFeatureGenerator","l":"NGramFeatureGenerator(int, int)","url":"%3Cinit%3E(int,int)"},{"p":"opennlp.tools.ngram","c":"NGramGenerator","l":"NGramGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.languagemodel","c":"NGramLanguageModel","l":"NGramLanguageModel()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.languagemodel","c":"NGramLanguageModel","l":"NGramLanguageModel(InputStream, int)","url":"%3Cinit%3E(java.io.InputStream,int)"},{"p":"opennlp.tools.languagemodel","c":"NGramLanguageModel","l":"NGramLanguageModel(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.languagemodel","c":"NGramLanguageModel","l":"NGramLanguageModel(int)","url":"%3Cinit%3E(int)"},{"p":"opennlp.tools.cmdline.languagemodel","c":"NGramLanguageModelTool","l":"NGramLanguageModelTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"NGramModel()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"NGramModel(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.ngram","c":"NGramUtils","l":"NGramUtils()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.chunker","c":"ChunkSample","l":"nicePrint()"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream.LANGUAGE","l":"NLD"},{"p":"opennlp.tools.tokenize","c":"Detokenizer.DetokenizationOperation","l":"NO_OPERATION"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorME","l":"NO_SPLIT"},{"p":"opennlp.tools.tokenize","c":"TokenizerME","l":"NO_SPLIT"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Node","l":"Node()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser.treeinsert","c":"Parser","l":"NON_ATTACH"},{"p":"opennlp.tools.util.normalizer","c":"AggregateCharSequenceNormalizer","l":"normalize(CharSequence)","url":"normalize(java.lang.CharSequence)"},{"p":"opennlp.tools.util.normalizer","c":"CharSequenceNormalizer","l":"normalize(CharSequence)","url":"normalize(java.lang.CharSequence)"},{"p":"opennlp.tools.util.normalizer","c":"EmojiCharSequenceNormalizer","l":"normalize(CharSequence)","url":"normalize(java.lang.CharSequence)"},{"p":"opennlp.tools.util.normalizer","c":"NumberCharSequenceNormalizer","l":"normalize(CharSequence)","url":"normalize(java.lang.CharSequence)"},{"p":"opennlp.tools.util.normalizer","c":"ShrinkCharSequenceNormalizer","l":"normalize(CharSequence)","url":"normalize(java.lang.CharSequence)"},{"p":"opennlp.tools.util.normalizer","c":"TwitterCharSequenceNormalizer","l":"normalize(CharSequence)","url":"normalize(java.lang.CharSequence)"},{"p":"opennlp.tools.util.normalizer","c":"UrlCharSequenceNormalizer","l":"normalize(CharSequence)","url":"normalize(java.lang.CharSequence)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"NORWEGIAN"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"NUM_ITERATIONS_DEFAULT"},{"p":"opennlp.tools.util.normalizer","c":"NumberCharSequenceNormalizer","l":"NumberCharSequenceNormalizer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"numberOfGrams()"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"numberOfGrams()"},{"p":"opennlp.tools.ml.model","c":"ObjectDataReader","l":"ObjectDataReader(ObjectInputStream)","url":"%3Cinit%3E(java.io.ObjectInputStream)"},{"p":"opennlp.tools.util","c":"ObjectStreamUtils","l":"ObjectStreamUtils()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"OLD_LL_THRESHOLD_PARAM"},{"p":"opennlp.tools.ml.model","c":"OnePassDataIndexer","l":"OnePassDataIndexer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.model","c":"OnePassRealValueDataIndexer","l":"OnePassRealValueDataIndexer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesNameSampleStream","l":"OntoNotesNameSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesNameSampleStreamFactory","l":"OntoNotesNameSampleStreamFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesParseSampleStream","l":"OntoNotesParseSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderTrainerTool","l":"openFeatureGeneratorBytes(File)","url":"openFeatureGeneratorBytes(java.io.File)"},{"p":"opennlp.tools.formats.ad","c":"ADChunkSampleStream","l":"OTHER"},{"p":"opennlp.tools.namefind","c":"BilouCodec","l":"OTHER"},{"p":"opennlp.tools.namefind","c":"BioCodec","l":"OTHER"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"OTHER"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"OTHER"},{"p":"opennlp.tools.ml.model","c":"ComparableEvent","l":"outcome"},{"p":"opennlp.tools.util.featuregen","c":"OutcomePriorFeatureGenerator","l":"OutcomePriorFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.model","c":"ComparablePredicate","l":"outcomes"},{"p":"opennlp.tools.util","c":"ParagraphStream","l":"ParagraphStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"ParallelNegLogLikelihood","l":"ParallelNegLogLikelihood(DataIndexer, int)","url":"%3Cinit%3E(opennlp.tools.ml.model.DataIndexer,int)"},{"p":"opennlp.tools.ml.model","c":"ComparablePredicate","l":"params"},{"p":"opennlp.tools.formats.brat","c":"BratDocumentParser","l":"parse(BratDocument)","url":"parse(opennlp.tools.formats.brat.BratDocument)"},{"p":"opennlp.tools.formats.brat","c":"AnnotationConfiguration","l":"parse(File)","url":"parse(java.io.File)"},{"p":"opennlp.tools.formats.brat","c":"AnnotationConfiguration","l":"parse(InputStream)","url":"parse(java.io.InputStream)"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankDocument","l":"parse(InputStream)","url":"parse(java.io.InputStream)"},{"p":"opennlp.tools.formats.nkjp","c":"NKJPSegmentationDocument","l":"parse(InputStream)","url":"parse(java.io.InputStream)"},{"p":"opennlp.tools.formats.nkjp","c":"NKJPTextDocument","l":"parse(InputStream)","url":"parse(java.io.InputStream)"},{"p":"opennlp.tools.util.wordvector","c":"Glove","l":"parse(InputStream)","url":"parse(java.io.InputStream)"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"parse(Parse, int)","url":"parse(opennlp.tools.parser.Parse,int)"},{"p":"opennlp.tools.parser","c":"Parser","l":"parse(Parse, int)","url":"parse(opennlp.tools.parser.Parse,int)"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"parse(Parse)","url":"parse(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.parser","c":"Parser","l":"parse(Parse)","url":"parse(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.formats.muc","c":"SgmlParser","l":"parse(Reader, SgmlParser.ContentHandler)","url":"parse(java.io.Reader,opennlp.tools.formats.muc.SgmlParser.ContentHandler)"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"parse(String, boolean)","url":"parse(java.lang.String,boolean)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser","l":"parse(String, int, boolean, boolean)","url":"parse(java.lang.String,int,boolean,boolean)"},{"p":"opennlp.tools.parser","c":"Parse","l":"Parse(String, Span, String, double, int)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.util.Span,java.lang.String,double,int)"},{"p":"opennlp.tools.parser","c":"Parse","l":"Parse(String, Span, String, double, Parse)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.util.Span,java.lang.String,double,opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"parse(String, String, boolean)","url":"parse(java.lang.String,java.lang.String,boolean)"},{"p":"opennlp.tools.tokenize","c":"TokenSample","l":"parse(String, String)","url":"parse(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.parser","c":"ParserType","l":"parse(String)","url":"parse(java.lang.String)"},{"p":"opennlp.tools.postag","c":"POSSample","l":"parse(String)","url":"parse(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary.Operation","l":"parse(String)","url":"parse(java.lang.String)"},{"p":"opennlp.tools.util","c":"Version","l":"parse(String)","url":"parse(java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"RealValueFileEventStream","l":"parseContexts(String[])","url":"parseContexts(java.lang.String[])"},{"p":"opennlp.tools.formats.brat","c":"BratDocument","l":"parseDocument(AnnotationConfiguration, String, InputStream, InputStream)","url":"parseDocument(opennlp.tools.formats.brat.AnnotationConfiguration,java.lang.String,java.io.InputStream,java.io.InputStream)"},{"p":"opennlp.tools.formats.masc","c":"MascDocument","l":"parseDocument(String, InputStream, InputStream, InputStream, InputStream, InputStream)","url":"parseDocument(java.lang.String,java.io.InputStream,java.io.InputStream,java.io.InputStream,java.io.InputStream,java.io.InputStream)"},{"p":"opennlp.tools.cmdline.parser","c":"ParserTool","l":"parseLine(String, Parser, int)","url":"parseLine(java.lang.String,opennlp.tools.parser.Parser,int)"},{"p":"opennlp.tools.cmdline.parser","c":"ParserTool","l":"parseLine(String, Parser, Tokenizer, int)","url":"parseLine(java.lang.String,opennlp.tools.parser.Parser,opennlp.tools.tokenize.Tokenizer,int)"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"parseOneEntryPerLine(Reader)","url":"parseOneEntryPerLine(java.io.Reader)"},{"p":"opennlp.tools.parser","c":"Parse","l":"parseParse(String, GapLabeler)","url":"parseParse(java.lang.String,opennlp.tools.parser.GapLabeler)"},{"p":"opennlp.tools.parser","c":"Parse","l":"parseParse(String)","url":"parseParse(java.lang.String)"},{"p":"opennlp.tools.util","c":"DownloadUtil.ModelType","l":"PARSER"},{"p":"opennlp.tools.parser.chunking","c":"Parser","l":"Parser(ParserModel, int, double)","url":"%3Cinit%3E(opennlp.tools.parser.ParserModel,int,double)"},{"p":"opennlp.tools.parser.treeinsert","c":"Parser","l":"Parser(ParserModel, int, double)","url":"%3Cinit%3E(opennlp.tools.parser.ParserModel,int,double)"},{"p":"opennlp.tools.parser.chunking","c":"Parser","l":"Parser(ParserModel)","url":"%3Cinit%3E(opennlp.tools.parser.ParserModel)"},{"p":"opennlp.tools.parser.treeinsert","c":"Parser","l":"Parser(ParserModel)","url":"%3Cinit%3E(opennlp.tools.parser.ParserModel)"},{"p":"opennlp.tools.parser","c":"ParserChunkerFactory","l":"ParserChunkerFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser","c":"ParserChunkerSequenceValidator","l":"ParserChunkerSequenceValidator(String[])","url":"%3Cinit%3E(java.lang.String[])"},{"p":"opennlp.tools.cmdline.parser","c":"ParserConverterTool","l":"ParserConverterTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser","c":"ParserCrossValidator","l":"ParserCrossValidator(String, TrainingParameters, HeadRules, ParserType, ParserEvaluationMonitor...)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.util.TrainingParameters,opennlp.tools.parser.HeadRules,opennlp.tools.parser.ParserType,opennlp.tools.parser.ParserEvaluationMonitor...)"},{"p":"opennlp.tools.parser","c":"ParserEvaluator","l":"ParserEvaluator(Parser, ParserEvaluationMonitor...)","url":"%3Cinit%3E(opennlp.tools.parser.Parser,opennlp.tools.parser.ParserEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.parser","c":"ParserEvaluatorTool","l":"ParserEvaluatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser.chunking","c":"ParserEventStream","l":"ParserEventStream(ObjectStream<Parse>, HeadRules, ParserEventTypeEnum, Dictionary)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.parser.ParserEventTypeEnum,opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.parser.treeinsert","c":"ParserEventStream","l":"ParserEventStream(ObjectStream<Parse>, HeadRules, ParserEventTypeEnum, Dictionary)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.parser.ParserEventTypeEnum,opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.parser.chunking","c":"ParserEventStream","l":"ParserEventStream(ObjectStream<Parse>, HeadRules, ParserEventTypeEnum)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.parser.ParserEventTypeEnum)"},{"p":"opennlp.tools.parser.treeinsert","c":"ParserEventStream","l":"ParserEventStream(ObjectStream<Parse>, HeadRules, ParserEventTypeEnum)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.parser.ParserEventTypeEnum)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"ParserModel(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"ParserModel(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"ParserModel(Path)","url":"%3Cinit%3E(java.nio.file.Path)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"ParserModel(String, MaxentModel, MaxentModel, MaxentModel, POSModel, ChunkerModel, HeadRules, ParserType, Map<String, String>)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,opennlp.tools.ml.model.MaxentModel,opennlp.tools.ml.model.MaxentModel,opennlp.tools.postag.POSModel,opennlp.tools.chunker.ChunkerModel,opennlp.tools.parser.HeadRules,opennlp.tools.parser.ParserType,java.util.Map)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"ParserModel(String, MaxentModel, MaxentModel, MaxentModel, POSModel, ChunkerModel, HeadRules, ParserType)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,opennlp.tools.ml.model.MaxentModel,opennlp.tools.ml.model.MaxentModel,opennlp.tools.postag.POSModel,opennlp.tools.chunker.ChunkerModel,opennlp.tools.parser.HeadRules,opennlp.tools.parser.ParserType)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"ParserModel(String, MaxentModel, MaxentModel, POSModel, ChunkerModel, HeadRules, ParserType, Map<String, String>)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,opennlp.tools.ml.model.MaxentModel,opennlp.tools.postag.POSModel,opennlp.tools.chunker.ChunkerModel,opennlp.tools.parser.HeadRules,opennlp.tools.parser.ParserType,java.util.Map)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"ParserModel(URL)","url":"%3Cinit%3E(java.net.URL)"},{"p":"opennlp.tools.cmdline.parser","c":"ParserModelLoader","l":"ParserModelLoader()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.parser","c":"ParserTool","l":"ParserTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.parser","c":"ParserTrainerTool","l":"ParserTrainerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser","c":"ParseSampleStream","l":"ParseSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats.convert","c":"ParseToPOSSampleStream","l":"ParseToPOSSampleStream(ObjectStream<Parse>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.util.featuregen","c":"BrownTokenClasses","l":"pathLengths"},{"p":"opennlp.tools.ml.model","c":"AbstractModel.ModelType","l":"Perceptron"},{"p":"opennlp.tools.util.model","c":"ModelType","l":"PERCEPTRON"},{"p":"opennlp.tools.util.model","c":"ModelType","l":"PERCEPTRON_SEQUENCE"},{"p":"opennlp.tools.ml.perceptron","c":"SimplePerceptronSequenceTrainer","l":"PERCEPTRON_SEQUENCE_VALUE"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"PERCEPTRON_VALUE"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModel","l":"PerceptronModel(Context[], String[], String[])","url":"%3Cinit%3E(opennlp.tools.ml.model.Context[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModelReader","l":"PerceptronModelReader(DataReader)","url":"%3Cinit%3E(opennlp.tools.ml.model.DataReader)"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModelReader","l":"PerceptronModelReader(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModelWriter","l":"PerceptronModelWriter(AbstractModel)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel)"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"PerceptronTrainer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"PerceptronTrainer(TrainingParameters)","url":"%3Cinit%3E(opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.ml.maxent.io","c":"GISModelWriter","l":"persist()"},{"p":"opennlp.tools.ml.maxent.io","c":"QNModelWriter","l":"persist()"},{"p":"opennlp.tools.ml.model","c":"AbstractModelWriter","l":"persist()"},{"p":"opennlp.tools.ml.model","c":"GenericModelWriter","l":"persist()"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesModelWriter","l":"persist()"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronModelWriter","l":"persist()"},{"p":"opennlp.tools.chunker","c":"ChunkSample","l":"phrasesAsSpanList(String[], String[], String[])","url":"phrasesAsSpanList(java.lang.String[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.util","c":"PlainTextByLineStream","l":"PlainTextByLineStream(InputStreamFactory, Charset)","url":"%3Cinit%3E(opennlp.tools.util.InputStreamFactory,java.nio.charset.Charset)"},{"p":"opennlp.tools.util","c":"PlainTextByLineStream","l":"PlainTextByLineStream(InputStreamFactory, String)","url":"%3Cinit%3E(opennlp.tools.util.InputStreamFactory,java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"PlainTextFileDataReader","l":"PlainTextFileDataReader(BufferedReader)","url":"%3Cinit%3E(java.io.BufferedReader)"},{"p":"opennlp.tools.ml.model","c":"PlainTextFileDataReader","l":"PlainTextFileDataReader(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.model","c":"PlainTextFileDataReader","l":"PlainTextFileDataReader(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.ml.naivebayes","c":"PlainTextNaiveBayesModelReader","l":"PlainTextNaiveBayesModelReader(BufferedReader)","url":"%3Cinit%3E(java.io.BufferedReader)"},{"p":"opennlp.tools.ml.naivebayes","c":"PlainTextNaiveBayesModelReader","l":"PlainTextNaiveBayesModelReader(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.naivebayes","c":"PlainTextNaiveBayesModelWriter","l":"PlainTextNaiveBayesModelWriter(AbstractModel, BufferedWriter)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.BufferedWriter)"},{"p":"opennlp.tools.ml.naivebayes","c":"PlainTextNaiveBayesModelWriter","l":"PlainTextNaiveBayesModelWriter(AbstractModel, File)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel,java.io.File)"},{"p":"opennlp.tools.formats.nkjp","c":"NKJPSegmentationDocument.Pointer","l":"Pointer(String, String, int, int, boolean)","url":"%3Cinit%3E(java.lang.String,java.lang.String,int,int,boolean)"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"populatePOSDictionary(ObjectStream<POSSample>, MutableTagDictionary, int)","url":"populatePOSDictionary(opennlp.tools.util.ObjectStream,opennlp.tools.postag.MutableTagDictionary,int)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"PORTER"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"PorterStemmer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"PORTUGUESE"},{"p":"opennlp.tools.formats.ad","c":"PortugueseContractionUtility","l":"PortugueseContractionUtility()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util","c":"DownloadUtil.ModelType","l":"POS"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"POSDictionary()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"POSDictionary(boolean)","url":"%3Cinit%3E(boolean)"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory.POSDictionarySerializer","l":"POSDictionarySerializer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.postag","c":"POSEvaluationErrorListener","l":"POSEvaluationErrorListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.postag","c":"POSEvaluationErrorListener","l":"POSEvaluationErrorListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.postag","c":"POSEvaluator","l":"POSEvaluator(POSTagger, POSTaggerEvaluationMonitor...)","url":"%3Cinit%3E(opennlp.tools.postag.POSTagger,opennlp.tools.postag.POSTaggerEvaluationMonitor...)"},{"p":"opennlp.tools.postag","c":"POSModel","l":"POSModel(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.postag","c":"POSModel","l":"POSModel(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.postag","c":"POSModel","l":"POSModel(Path)","url":"%3Cinit%3E(java.nio.file.Path)"},{"p":"opennlp.tools.postag","c":"POSModel","l":"POSModel(String, MaxentModel, int, Map<String, String>, POSTaggerFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,int,java.util.Map,opennlp.tools.postag.POSTaggerFactory)"},{"p":"opennlp.tools.postag","c":"POSModel","l":"POSModel(String, MaxentModel, Map<String, String>, POSTaggerFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,java.util.Map,opennlp.tools.postag.POSTaggerFactory)"},{"p":"opennlp.tools.postag","c":"POSModel","l":"POSModel(String, SequenceClassificationModel<String>, Map<String, String>, POSTaggerFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.SequenceClassificationModel,java.util.Map,opennlp.tools.postag.POSTaggerFactory)"},{"p":"opennlp.tools.postag","c":"POSModel","l":"POSModel(URL)","url":"%3Cinit%3E(java.net.URL)"},{"p":"opennlp.tools.cmdline.postag","c":"POSModelLoader","l":"POSModelLoader()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.model","c":"POSModelSerializer","l":"POSModelSerializer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.postag","c":"POSSample","l":"POSSample(List<String>, List<String>, String[][])","url":"%3Cinit%3E(java.util.List,java.util.List,java.lang.String[][])"},{"p":"opennlp.tools.postag","c":"POSSample","l":"POSSample(List<String>, List<String>)","url":"%3Cinit%3E(java.util.List,java.util.List)"},{"p":"opennlp.tools.postag","c":"POSSample","l":"POSSample(String[], String[], String[][])","url":"%3Cinit%3E(java.lang.String[],java.lang.String[],java.lang.String[][])"},{"p":"opennlp.tools.postag","c":"POSSample","l":"POSSample(String[], String[])","url":"%3Cinit%3E(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.postag","c":"POSSampleEventStream","l":"POSSampleEventStream(ObjectStream<POSSample>, POSContextGenerator)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.postag.POSContextGenerator)"},{"p":"opennlp.tools.postag","c":"POSSampleEventStream","l":"POSSampleEventStream(ObjectStream<POSSample>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.postag","c":"POSSampleSequenceStream","l":"POSSampleSequenceStream(ObjectStream<POSSample>, POSContextGenerator)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.postag.POSContextGenerator)"},{"p":"opennlp.tools.postag","c":"POSSampleSequenceStream","l":"POSSampleSequenceStream(ObjectStream<POSSample>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.parser","c":"PosSampleStream","l":"PosSampleStream(ObjectStream<Parse>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerConverterTool","l":"POSTaggerConverterTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.postag","c":"POSTaggerCrossValidator","l":"POSTaggerCrossValidator(String, TrainingParameters, File, byte[], Map<String, Object>, Integer, String, POSTaggerEvaluationMonitor...)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.util.TrainingParameters,java.io.File,byte[],java.util.Map,java.lang.Integer,java.lang.String,opennlp.tools.postag.POSTaggerEvaluationMonitor...)"},{"p":"opennlp.tools.postag","c":"POSTaggerCrossValidator","l":"POSTaggerCrossValidator(String, TrainingParameters, POSTaggerFactory, POSTaggerEvaluationMonitor...)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.util.TrainingParameters,opennlp.tools.postag.POSTaggerFactory,opennlp.tools.postag.POSTaggerEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerCrossValidatorTool","l":"POSTaggerCrossValidatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerEvaluatorTool","l":"POSTaggerEvaluatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"POSTaggerFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"POSTaggerFactory(byte[], Map<String, Object>, TagDictionary)","url":"%3Cinit%3E(byte[],java.util.Map,opennlp.tools.postag.TagDictionary)"},{"p":"opennlp.tools.util.featuregen","c":"PosTaggerFeatureGenerator","l":"PosTaggerFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"PosTaggerFeatureGeneratorFactory","l":"PosTaggerFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerFineGrainedReportListener","l":"POSTaggerFineGrainedReportListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerFineGrainedReportListener","l":"POSTaggerFineGrainedReportListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"POSTaggerME(POSModel)","url":"%3Cinit%3E(opennlp.tools.postag.POSModel)"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"POSTaggerME(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.util.featuregen","c":"POSTaggerNameFeatureGenerator","l":"POSTaggerNameFeatureGenerator(POSModel)","url":"%3Cinit%3E(opennlp.tools.postag.POSModel)"},{"p":"opennlp.tools.util.featuregen","c":"POSTaggerNameFeatureGenerator","l":"POSTaggerNameFeatureGenerator(POSTagger)","url":"%3Cinit%3E(opennlp.tools.postag.POSTagger)"},{"p":"opennlp.tools.util.featuregen","c":"POSTaggerNameFeatureGeneratorFactory","l":"POSTaggerNameFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerTool","l":"POSTaggerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerTrainerTool","l":"POSTaggerTrainerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats.convert","c":"POSToSentenceSampleStream","l":"POSToSentenceSampleStream(Detokenizer, ObjectStream<POSSample>, int)","url":"%3Cinit%3E(opennlp.tools.tokenize.Detokenizer,opennlp.tools.util.ObjectStream,int)"},{"p":"opennlp.tools.formats.convert","c":"POSToTokenSampleStream","l":"POSToTokenSampleStream(Detokenizer, ObjectStream<POSSample>)","url":"%3Cinit%3E(opennlp.tools.tokenize.Detokenizer,opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.util.eval","c":"FMeasure","l":"precision(Object[], Object[])","url":"precision(java.lang.Object[],java.lang.Object[])"},{"p":"opennlp.tools.langdetect","c":"LanguageDetector","l":"predictLanguage(CharSequence)","url":"predictLanguage(java.lang.CharSequence)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorME","l":"predictLanguage(CharSequence)","url":"predictLanguage(java.lang.CharSequence)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetector","l":"predictLanguages(CharSequence)","url":"predictLanguages(java.lang.CharSequence)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorME","l":"predictLanguages(CharSequence)","url":"predictLanguages(java.lang.CharSequence)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"predictLemmas(int, String[], String[])","url":"predictLemmas(int,java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.languagemodel","c":"LanguageModel","l":"predictNextTokens(String...)","url":"predictNextTokens(java.lang.String...)"},{"p":"opennlp.tools.languagemodel","c":"NGramLanguageModel","l":"predictNextTokens(String...)","url":"predictNextTokens(java.lang.String...)"},{"p":"opennlp.tools.languagemodel","c":"LanguageModel","l":"predictNextTokens(StringList)","url":"predictNextTokens(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.languagemodel","c":"NGramLanguageModel","l":"predictNextTokens(StringList)","url":"predictNextTokens(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"predictSES(String[], String[])","url":"predictSES(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.ml.model","c":"ComparableEvent","l":"predIndexes"},{"p":"opennlp.tools.util.featuregen","c":"PrefixFeatureGenerator","l":"PrefixFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"PrefixFeatureGenerator","l":"PrefixFeatureGenerator(int)","url":"%3Cinit%3E(int)"},{"p":"opennlp.tools.util.featuregen","c":"PrefixFeatureGeneratorFactory","l":"PrefixFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGenerator","l":"PREV_PREFIX"},{"p":"opennlp.tools.util.featuregen","c":"PreviousMapFeatureGenerator","l":"PreviousMapFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"PreviousMapFeatureGeneratorFactory","l":"PreviousMapFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"PreviousTwoMapFeatureGenerator","l":"PreviousTwoMapFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.namefind","c":"NameSampleCountersStream","l":"printSummary()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"Probabilities()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"Probability(T)","url":"%3Cinit%3E(T)"},{"p":"opennlp.tools.langdetect","c":"ProbingLanguageDetectionResult","l":"ProbingLanguageDetectionResult(Language[], int)","url":"%3Cinit%3E(opennlp.tools.langdetect.Language[],int)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorME","l":"probingPredictLanguages(CharSequence, LanguageDetectorConfig)","url":"probingPredictLanguages(java.lang.CharSequence,opennlp.tools.langdetect.LanguageDetectorConfig)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorME","l":"probingPredictLanguages(CharSequence)","url":"probingPredictLanguages(java.lang.CharSequence)"},{"p":"opennlp.tools.chunker","c":"ChunkerME","l":"probs()"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"probs()"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"probs()"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"probs()"},{"p":"opennlp.tools.chunker","c":"ChunkerME","l":"probs(double[])"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"probs(double[])"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"probs(double[])"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"probs(double[])"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"probs(Span[])","url":"probs(opennlp.tools.util.Span[])"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerEvaluator","l":"processSample(DocumentSample)","url":"processSample(opennlp.tools.doccat.DocumentSample)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorEvaluator","l":"processSample(LanguageSample)","url":"processSample(opennlp.tools.langdetect.LanguageSample)"},{"p":"opennlp.tools.parser","c":"Parse","l":"pruneParse(Parse)","url":"pruneParse(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.sentdetect.lang","c":"Factory","l":"ptEosCharacters"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"put(String, boolean)","url":"put(java.lang.String,boolean)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"put(String, double)","url":"put(java.lang.String,double)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"put(String, int)","url":"put(java.lang.String,int)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"put(String, String, boolean)","url":"put(java.lang.String,java.lang.String,boolean)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"put(String, String, double)","url":"put(java.lang.String,java.lang.String,double)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"put(String, String, int)","url":"put(java.lang.String,java.lang.String,int)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"put(String, String, String)","url":"put(java.lang.String,java.lang.String,java.lang.String)"},{"p":"opennlp.tools.postag","c":"MutableTagDictionary","l":"put(String, String...)","url":"put(java.lang.String,java.lang.String...)"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"put(String, String...)","url":"put(java.lang.String,java.lang.String...)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"put(String, String)","url":"put(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"put(StringList)","url":"put(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"putIfAbsent(String, boolean)","url":"putIfAbsent(java.lang.String,boolean)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"putIfAbsent(String, double)","url":"putIfAbsent(java.lang.String,double)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"putIfAbsent(String, int)","url":"putIfAbsent(java.lang.String,int)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"putIfAbsent(String, String, boolean)","url":"putIfAbsent(java.lang.String,java.lang.String,boolean)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"putIfAbsent(String, String, double)","url":"putIfAbsent(java.lang.String,java.lang.String,double)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"putIfAbsent(String, String, int)","url":"putIfAbsent(java.lang.String,java.lang.String,int)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"putIfAbsent(String, String, String)","url":"putIfAbsent(java.lang.String,java.lang.String,java.lang.String)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"putIfAbsent(String, String)","url":"putIfAbsent(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"QNMinimizer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"QNMinimizer(double, double, int, int, int, boolean)","url":"%3Cinit%3E(double,double,int,int,int,boolean)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"QNMinimizer(double, double, int, int, int)","url":"%3Cinit%3E(double,double,int,int,int)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"QNMinimizer(double, double, int)","url":"%3Cinit%3E(double,double,int)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"QNMinimizer(double, double)","url":"%3Cinit%3E(double,double)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNModel","l":"QNModel(Context[], String[], String[])","url":"%3Cinit%3E(opennlp.tools.ml.model.Context[],java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.ml.maxent.io","c":"QNModelReader","l":"QNModelReader(DataReader)","url":"%3Cinit%3E(opennlp.tools.ml.model.DataReader)"},{"p":"opennlp.tools.ml.maxent.io","c":"QNModelReader","l":"QNModelReader(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.maxent.io","c":"QNModelWriter","l":"QNModelWriter(AbstractModel)","url":"%3Cinit%3E(opennlp.tools.ml.model.AbstractModel)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"QNTrainer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"QNTrainer(boolean)","url":"%3Cinit%3E(boolean)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"QNTrainer(int, boolean)","url":"%3Cinit%3E(int,boolean)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"QNTrainer(int, int, boolean)","url":"%3Cinit%3E(int,int,boolean)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"QNTrainer(int)","url":"%3Cinit%3E(int)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"QNTrainer(TrainingParameters)","url":"%3Cinit%3E(opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.chunker","c":"ChunkSampleSequenceStream","l":"read()"},{"p":"opennlp.tools.chunker","c":"ChunkSampleStream","l":"read()"},{"p":"opennlp.tools.cmdline.namefind","c":"NameSampleCountersStream","l":"read()"},{"p":"opennlp.tools.doccat","c":"DocumentSampleStream","l":"read()"},{"p":"opennlp.tools.formats","c":"BioNLP2004NameSampleStream","l":"read()"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream","l":"read()"},{"p":"opennlp.tools.formats","c":"Conll03NameSampleStream","l":"read()"},{"p":"opennlp.tools.formats","c":"ConllXPOSSampleStream","l":"read()"},{"p":"opennlp.tools.formats","c":"DirectorySampleStream","l":"read()"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream","l":"read()"},{"p":"opennlp.tools.formats","c":"NameFinderCensus90NameStream","l":"read()"},{"p":"opennlp.tools.formats","c":"TwentyNewsgroupSampleStream","l":"read()"},{"p":"opennlp.tools.formats.ad","c":"ADChunkSampleStream","l":"read()"},{"p":"opennlp.tools.formats.ad","c":"ADNameSampleStream","l":"read()"},{"p":"opennlp.tools.formats.ad","c":"ADPOSSampleStream","l":"read()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceSampleStream","l":"read()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream","l":"read()"},{"p":"opennlp.tools.formats.brat","c":"BratAnnotationStream","l":"read()"},{"p":"opennlp.tools.formats.brat","c":"BratDocumentStream","l":"read()"},{"p":"opennlp.tools.formats.brat","c":"SegmenterObjectStream","l":"read()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluLemmaSampleStream","l":"read()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluPOSSampleStream","l":"read()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentenceSampleStream","l":"read()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluStream","l":"read()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluTokenSampleStream","l":"read()"},{"p":"opennlp.tools.formats.convert","c":"AbstractToSentenceSampleStream","l":"read()"},{"p":"opennlp.tools.formats.convert","c":"FileToByteArraySampleStream","l":"read()"},{"p":"opennlp.tools.formats.convert","c":"FileToStringSampleStream","l":"read()"},{"p":"opennlp.tools.formats.convert","c":"NameToTokenSampleStream","l":"read()"},{"p":"opennlp.tools.formats.convert","c":"POSToTokenSampleStream","l":"read()"},{"p":"opennlp.tools.formats.convert","c":"ParseToPOSSampleStream","l":"read()"},{"p":"opennlp.tools.formats.frenchtreebank","c":"ConstitParseSampleStream","l":"read()"},{"p":"opennlp.tools.formats.leipzig","c":"LeipzigLanguageSampleStream","l":"read()"},{"p":"opennlp.tools.formats.letsmt","c":"DetokenizeSentenceSampleStream","l":"read()"},{"p":"opennlp.tools.formats.masc","c":"MascDocument","l":"read()"},{"p":"opennlp.tools.formats.masc","c":"MascDocumentStream","l":"read()"},{"p":"opennlp.tools.formats.masc","c":"MascNamedEntitySampleStream","l":"read()"},{"p":"opennlp.tools.formats.masc","c":"MascPOSSampleStream","l":"read()"},{"p":"opennlp.tools.formats.masc","c":"MascSentenceSampleStream","l":"read()"},{"p":"opennlp.tools.formats.masc","c":"MascTokenSampleStream","l":"read()"},{"p":"opennlp.tools.formats.moses","c":"MosesSentenceSampleStream","l":"read()"},{"p":"opennlp.tools.formats.muc","c":"MucNameSampleStream","l":"read()"},{"p":"opennlp.tools.formats.nkjp","c":"NKJPSentenceSampleStream","l":"read()"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesNameSampleStream","l":"read()"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesParseSampleStream","l":"read()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorSampleStream","l":"read()"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSampleSequenceStream","l":"read()"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSampleStream","l":"read()"},{"p":"opennlp.tools.ml.maxent","c":"RealBasicEventStream","l":"read()"},{"p":"opennlp.tools.ml.model","c":"FileEventStream","l":"read()"},{"p":"opennlp.tools.ml.model","c":"HashSumEventStream","l":"read()"},{"p":"opennlp.tools.ml.model","c":"RealValueFileEventStream","l":"read()"},{"p":"opennlp.tools.ml.model","c":"SequenceStreamEventStream","l":"read()"},{"p":"opennlp.tools.namefind","c":"NameSampleDataStream","l":"read()"},{"p":"opennlp.tools.namefind","c":"NameSampleSequenceStream","l":"read()"},{"p":"opennlp.tools.namefind","c":"NameSampleTypeFilter","l":"read()"},{"p":"opennlp.tools.parser","c":"ChunkSampleStream","l":"read()"},{"p":"opennlp.tools.parser","c":"ParseSampleStream","l":"read()"},{"p":"opennlp.tools.parser","c":"PosSampleStream","l":"read()"},{"p":"opennlp.tools.postag","c":"POSSampleSequenceStream","l":"read()"},{"p":"opennlp.tools.postag","c":"WordTagSampleStream","l":"read()"},{"p":"opennlp.tools.sentdetect","c":"EmptyLinePreprocessorStream","l":"read()"},{"p":"opennlp.tools.sentdetect","c":"SentenceSampleStream","l":"read()"},{"p":"opennlp.tools.tokenize","c":"TokenSampleStream","l":"read()"},{"p":"opennlp.tools.tokenize","c":"TokenizerStream","l":"read()"},{"p":"opennlp.tools.tokenize","c":"WhitespaceTokenStream","l":"read()"},{"p":"opennlp.tools.util","c":"AbstractEventStream","l":"read()"},{"p":"opennlp.tools.util","c":"AbstractObjectStream","l":"read()"},{"p":"opennlp.tools.util","c":"CollectionObjectStream","l":"read()"},{"p":"opennlp.tools.util","c":"EventTraceStream","l":"read()"},{"p":"opennlp.tools.util","c":"ObjectStream","l":"read()"},{"p":"opennlp.tools.util","c":"ParagraphStream","l":"read()"},{"p":"opennlp.tools.util","c":"PlainTextByLineStream","l":"read()"},{"p":"opennlp.tools.util.eval","c":"CrossValidationPartitioner.TrainingSampleStream","l":"read()"},{"p":"opennlp.tools.util.model","c":"ModelUtil","l":"read(InputStream)","url":"read(java.io.InputStream)"},{"p":"opennlp.tools.ml.model","c":"AbstractModelReader","l":"readDouble()"},{"p":"opennlp.tools.ml.model","c":"BinaryFileDataReader","l":"readDouble()"},{"p":"opennlp.tools.ml.model","c":"DataReader","l":"readDouble()"},{"p":"opennlp.tools.ml.model","c":"ObjectDataReader","l":"readDouble()"},{"p":"opennlp.tools.ml.model","c":"PlainTextFileDataReader","l":"readDouble()"},{"p":"opennlp.tools.ml.model","c":"AbstractModelReader","l":"readInt()"},{"p":"opennlp.tools.ml.model","c":"BinaryFileDataReader","l":"readInt()"},{"p":"opennlp.tools.ml.model","c":"DataReader","l":"readInt()"},{"p":"opennlp.tools.ml.model","c":"ObjectDataReader","l":"readInt()"},{"p":"opennlp.tools.ml.model","c":"PlainTextFileDataReader","l":"readInt()"},{"p":"opennlp.tools.ml.model","c":"AbstractModelReader","l":"readUTF()"},{"p":"opennlp.tools.ml.model","c":"BinaryFileDataReader","l":"readUTF()"},{"p":"opennlp.tools.ml.model","c":"DataReader","l":"readUTF()"},{"p":"opennlp.tools.ml.model","c":"ObjectDataReader","l":"readUTF()"},{"p":"opennlp.tools.ml.model","c":"PlainTextFileDataReader","l":"readUTF()"},{"p":"opennlp.tools.ml.model","c":"ModelParameterChunker","l":"readUTF(DataInputStream)","url":"readUTF(java.io.DataInputStream)"},{"p":"opennlp.tools.ml.maxent","c":"RealBasicEventStream","l":"RealBasicEventStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.ml.model","c":"RealValueFileEventStream","l":"RealValueFileEventStream(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.ml.model","c":"RealValueFileEventStream","l":"RealValueFileEventStream(String, String)","url":"%3Cinit%3E(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"RealValueFileEventStream","l":"RealValueFileEventStream(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.util.eval","c":"FMeasure","l":"recall(Object[], Object[])","url":"recall(java.lang.Object[],java.lang.Object[])"},{"p":"opennlp.tools.util.featuregen","c":"StringPattern","l":"recognize(String)","url":"recognize(java.lang.String)"},{"p":"opennlp.tools.parser.chunking","c":"ParserEventStream","l":"reduceChunks(Parse[], int, Parse)","url":"reduceChunks(opennlp.tools.parser.Parse[],int,opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.namefind","c":"RegexNameFinder","l":"RegexNameFinder(Map<String, Pattern[]>)","url":"%3Cinit%3E(java.util.Map)"},{"p":"opennlp.tools.namefind","c":"RegexNameFinder","l":"RegexNameFinder(Pattern[], String)","url":"%3Cinit%3E(java.util.regex.Pattern[],java.lang.String)"},{"p":"opennlp.tools.namefind","c":"RegexNameFinder","l":"RegexNameFinder(Pattern[])","url":"%3Cinit%3E(java.util.regex.Pattern[])"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory","l":"RegexNameFinderFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.model","c":"GenericModelSerializer","l":"register(Map<String, ArtifactSerializer<?>>)","url":"register(java.util.Map)"},{"p":"opennlp.tools.formats","c":"BioNLP2004NameSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"ChunkerSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"Conll03NameSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"ConllXPOSSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"ConllXSentenceSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"ConllXTokenSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"DocumentSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"LanguageDetectorSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"LemmatizerSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"NameSampleDataStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"ParseSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"SentenceSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"TokenSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"TwentyNewsgroupSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats","c":"WordTagSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.ad","c":"ADChunkSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.ad","c":"ADNameSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.ad","c":"ADPOSSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.ad","c":"ADTokenSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.brat","c":"BratNameSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluLemmaSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluPOSSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluSentenceSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluTokenSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.convert","c":"NameToSentenceSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.convert","c":"NameToTokenSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.convert","c":"POSToSentenceSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.convert","c":"POSToTokenSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.convert","c":"ParseToPOSSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.convert","c":"ParseToSentenceSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.convert","c":"ParseToTokenSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.frenchtreebank","c":"ConstitParseSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankSentenceStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.irishsentencebank","c":"IrishSentenceBankTokenSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.leipzig","c":"LeipzigLanguageSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.letsmt","c":"LetsmtSentenceStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.masc","c":"MascNamedEntitySampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.masc","c":"MascPOSSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.masc","c":"MascSentenceSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.masc","c":"MascTokenSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.moses","c":"MosesSentenceSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.muc","c":"Muc6NameSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.nkjp","c":"NKJPSentenceSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesNameSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesPOSSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.formats.ontonotes","c":"OntoNotesParseSampleStreamFactory","l":"registerFactory()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"REL_GRAD_NORM_TOL"},{"p":"opennlp.tools.formats.brat","c":"AnnotationConfiguration","l":"RELATION_TYPE"},{"p":"opennlp.tools.tokenize.lang.en","c":"TokenSampleStream","l":"remove()"},{"p":"opennlp.tools.util","c":"ReverseListIterator","l":"remove()"},{"p":"opennlp.tools.parser","c":"Parse","l":"remove(int)"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"remove(String)","url":"remove(java.lang.String)"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"remove(StringList)","url":"remove(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"remove(StringList)","url":"remove(opennlp.tools.util.StringList)"},{"p":"opennlp.tools.sentdetect","c":"SentenceSampleStream","l":"replaceNewLineEscapeTags(String)","url":"replaceNewLineEscapeTags(java.lang.String)"},{"p":"opennlp.tools.chunker","c":"ChunkSampleSequenceStream","l":"reset()"},{"p":"opennlp.tools.cmdline.namefind","c":"NameSampleCountersStream","l":"reset()"},{"p":"opennlp.tools.formats","c":"BioNLP2004NameSampleStream","l":"reset()"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream","l":"reset()"},{"p":"opennlp.tools.formats","c":"Conll03NameSampleStream","l":"reset()"},{"p":"opennlp.tools.formats","c":"DirectorySampleStream","l":"reset()"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream","l":"reset()"},{"p":"opennlp.tools.formats","c":"NameFinderCensus90NameStream","l":"reset()"},{"p":"opennlp.tools.formats","c":"TwentyNewsgroupSampleStream","l":"reset()"},{"p":"opennlp.tools.formats.ad","c":"ADChunkSampleStream","l":"reset()"},{"p":"opennlp.tools.formats.ad","c":"ADNameSampleStream","l":"reset()"},{"p":"opennlp.tools.formats.ad","c":"ADPOSSampleStream","l":"reset()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceSampleStream","l":"reset()"},{"p":"opennlp.tools.formats.brat","c":"BratAnnotationStream","l":"reset()"},{"p":"opennlp.tools.formats.brat","c":"BratDocumentStream","l":"reset()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluStream","l":"reset()"},{"p":"opennlp.tools.formats.leipzig","c":"LeipzigLanguageSampleStream","l":"reset()"},{"p":"opennlp.tools.formats.masc","c":"MascDocument","l":"reset()"},{"p":"opennlp.tools.formats.masc","c":"MascDocumentStream","l":"reset()"},{"p":"opennlp.tools.formats.masc","c":"MascNamedEntitySampleStream","l":"reset()"},{"p":"opennlp.tools.formats.masc","c":"MascPOSSampleStream","l":"reset()"},{"p":"opennlp.tools.formats.masc","c":"MascSentenceSampleStream","l":"reset()"},{"p":"opennlp.tools.formats.masc","c":"MascTokenSampleStream","l":"reset()"},{"p":"opennlp.tools.formats.nkjp","c":"NKJPSentenceSampleStream","l":"reset()"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSampleSequenceStream","l":"reset()"},{"p":"opennlp.tools.ml.maxent","c":"RealBasicEventStream","l":"reset()"},{"p":"opennlp.tools.ml.model","c":"FileEventStream","l":"reset()"},{"p":"opennlp.tools.ml.model","c":"SequenceStreamEventStream","l":"reset()"},{"p":"opennlp.tools.namefind","c":"NameSampleSequenceStream","l":"reset()"},{"p":"opennlp.tools.postag","c":"POSSampleSequenceStream","l":"reset()"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"reset()"},{"p":"opennlp.tools.tokenize","c":"TokenizerStream","l":"reset()"},{"p":"opennlp.tools.util","c":"AbstractEventStream","l":"reset()"},{"p":"opennlp.tools.util","c":"AbstractObjectStream","l":"reset()"},{"p":"opennlp.tools.util","c":"CollectionObjectStream","l":"reset()"},{"p":"opennlp.tools.util","c":"FilterObjectStream","l":"reset()"},{"p":"opennlp.tools.util","c":"ObjectStream","l":"reset()"},{"p":"opennlp.tools.util","c":"PlainTextByLineStream","l":"reset()"},{"p":"opennlp.tools.util","c":"ResetableIterator","l":"reset()"},{"p":"opennlp.tools.util.eval","c":"CrossValidationPartitioner.TrainingSampleStream","l":"reset()"},{"p":"opennlp.tools.util","c":"ReverseListIterator","l":"ReverseListIterator(List<T>)","url":"%3Cinit%3E(java.util.List)"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary.Operation","l":"RIGHT_LEFT_MATCHING"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"ROMANIAN"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerCrossValidatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerEvaluatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerTrainerTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatCrossValidatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatEvaluatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatTrainerTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorCrossValidatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorEvaluatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorTrainerTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerEvaluatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerTrainerTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderCrossValidatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderEvaluatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderTrainerTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.parser","c":"ParserEvaluatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.parser","c":"ParserTrainerTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerCrossValidatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerEvaluatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerTrainerTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorCrossValidatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorEvaluatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorTrainerTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerCrossValidatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerMEEvaluatorTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerTrainerTool","l":"run(String, String[])","url":"run(java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.cmdline.chunker","c":"ChunkerMETool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.dictionary","c":"DictionaryBuilderTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.entitylinker","c":"EntityLinkerTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.languagemodel","c":"NGramLanguageModelTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerMETool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.namefind","c":"CensusDictionaryCreatorTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.parser","c":"ParserTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.parser","c":"TaggerModelReplacerTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.tokenizer","c":"DictionaryDetokenizerTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.tokenizer","c":"SimpleTokenizerTool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerMETool","l":"run(String[])","url":"run(java.lang.String[])"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"RUSSIAN"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizer","l":"scoreMap(String[])","url":"scoreMap(java.lang.String[])"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerME","l":"scoreMap(String[])","url":"scoreMap(java.lang.String[])"},{"p":"opennlp.tools.sentdetect","c":"SDCrossValidator","l":"SDCrossValidator(String, TrainingParameters, SentenceDetectorFactory, SentenceDetectorEvaluationMonitor...)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.util.TrainingParameters,opennlp.tools.sentdetect.SentenceDetectorFactory,opennlp.tools.sentdetect.SentenceDetectorEvaluationMonitor...)"},{"p":"opennlp.tools.sentdetect","c":"SDEventStream","l":"SDEventStream(ObjectStream<SentenceSample>, SDContextGenerator, EndOfSentenceScanner)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,opennlp.tools.sentdetect.SDContextGenerator,opennlp.tools.sentdetect.EndOfSentenceScanner)"},{"p":"opennlp.tools.ml.model","c":"ComparableEvent","l":"seen"},{"p":"opennlp.tools.formats.brat","c":"SegmenterObjectStream","l":"SegmenterObjectStream(ObjectStream<S>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.sentdetect","c":"NewlineSentenceDetector","l":"sentDetect(CharSequence)","url":"sentDetect(java.lang.CharSequence)"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetector","l":"sentDetect(CharSequence)","url":"sentDetect(java.lang.CharSequence)"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorME","l":"sentDetect(CharSequence)","url":"sentDetect(java.lang.CharSequence)"},{"p":"opennlp.tools.util","c":"DownloadUtil.ModelType","l":"SENTENCE_DETECTOR"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.Sentence","l":"Sentence()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.sentdetect.lang.th","c":"SentenceContextGenerator","l":"SentenceContextGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorConverterTool","l":"SentenceDetectorConverterTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorCrossValidatorTool","l":"SentenceDetectorCrossValidatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorEvaluator","l":"SentenceDetectorEvaluator(SentenceDetector, SentenceDetectorEvaluationMonitor...)","url":"%3Cinit%3E(opennlp.tools.sentdetect.SentenceDetector,opennlp.tools.sentdetect.SentenceDetectorEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorEvaluatorTool","l":"SentenceDetectorEvaluatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"SentenceDetectorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"SentenceDetectorFactory(String, boolean, Dictionary, char[])","url":"%3Cinit%3E(java.lang.String,boolean,opennlp.tools.dictionary.Dictionary,char[])"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorME","l":"SentenceDetectorME(SentenceModel, Factory)","url":"%3Cinit%3E(opennlp.tools.sentdetect.SentenceModel,opennlp.tools.sentdetect.lang.Factory)"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorME","l":"SentenceDetectorME(SentenceModel)","url":"%3Cinit%3E(opennlp.tools.sentdetect.SentenceModel)"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorME","l":"SentenceDetectorME(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorTool","l":"SentenceDetectorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceDetectorTrainerTool","l":"SentenceDetectorTrainerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceEvaluationErrorListener","l":"SentenceEvaluationErrorListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.sentdetect","c":"SentenceEvaluationErrorListener","l":"SentenceEvaluationErrorListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.util.featuregen","c":"SentenceFeatureGenerator","l":"SentenceFeatureGenerator(boolean, boolean)","url":"%3Cinit%3E(boolean,boolean)"},{"p":"opennlp.tools.util.featuregen","c":"SentenceFeatureGeneratorFactory","l":"SentenceFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"SentenceModel(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"SentenceModel(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"SentenceModel(Path)","url":"%3Cinit%3E(java.nio.file.Path)"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"SentenceModel(String, MaxentModel, boolean, Dictionary, char[], Map<String, String>)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,boolean,opennlp.tools.dictionary.Dictionary,char[],java.util.Map)"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"SentenceModel(String, MaxentModel, boolean, Dictionary, char[])","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,boolean,opennlp.tools.dictionary.Dictionary,char[])"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"SentenceModel(String, MaxentModel, boolean, Dictionary, Map<String, String>)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,boolean,opennlp.tools.dictionary.Dictionary,java.util.Map)"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"SentenceModel(String, MaxentModel, boolean, Dictionary)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,boolean,opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"SentenceModel(String, MaxentModel, Map<String, String>, SentenceDetectorFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,java.util.Map,opennlp.tools.sentdetect.SentenceDetectorFactory)"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"SentenceModel(URL)","url":"%3Cinit%3E(java.net.URL)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser","l":"SentenceParser()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.sentdetect","c":"SentenceSample","l":"SentenceSample(CharSequence, Span...)","url":"%3Cinit%3E(java.lang.CharSequence,opennlp.tools.util.Span...)"},{"p":"opennlp.tools.sentdetect","c":"SentenceSample","l":"SentenceSample(Detokenizer, String[][])","url":"%3Cinit%3E(opennlp.tools.tokenize.Detokenizer,java.lang.String[][])"},{"p":"opennlp.tools.sentdetect","c":"SentenceSampleStream","l":"SentenceSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.sentdetect","c":"NewlineSentenceDetector","l":"sentPosDetect(CharSequence)","url":"sentPosDetect(java.lang.CharSequence)"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetector","l":"sentPosDetect(CharSequence)","url":"sentPosDetect(java.lang.CharSequence)"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorME","l":"sentPosDetect(CharSequence)","url":"sentPosDetect(java.lang.CharSequence)"},{"p":"opennlp.tools.ml","c":"TrainerFactory.TrainerType","l":"SEQUENCE_TRAINER"},{"p":"opennlp.tools.ml","c":"EventModelSequenceTrainer","l":"SEQUENCE_VALUE"},{"p":"opennlp.tools.ml","c":"SequenceTrainer","l":"SEQUENCE_VALUE"},{"p":"opennlp.tools.util","c":"Sequence","l":"Sequence()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.model","c":"Sequence","l":"Sequence(Event[], T)","url":"%3Cinit%3E(opennlp.tools.ml.model.Event[],T)"},{"p":"opennlp.tools.util","c":"Sequence","l":"Sequence(List<String>)","url":"%3Cinit%3E(java.util.List)"},{"p":"opennlp.tools.util","c":"Sequence","l":"Sequence(Sequence, String, double)","url":"%3Cinit%3E(opennlp.tools.util.Sequence,java.lang.String,double)"},{"p":"opennlp.tools.util","c":"Sequence","l":"Sequence(Sequence)","url":"%3Cinit%3E(opennlp.tools.util.Sequence)"},{"p":"opennlp.tools.ml.model","c":"SequenceStreamEventStream","l":"SequenceStreamEventStream(SequenceStream<Event>)","url":"%3Cinit%3E(opennlp.tools.ml.model.SequenceStream)"},{"p":"opennlp.tools.util.model","c":"GenericModelSerializer","l":"serialize(AbstractModel, OutputStream)","url":"serialize(opennlp.tools.ml.model.AbstractModel,java.io.OutputStream)"},{"p":"opennlp.tools.parser.lang.es","c":"AncoraSpanishHeadRules.HeadRulesSerializer","l":"serialize(AncoraSpanishHeadRules, OutputStream)","url":"serialize(opennlp.tools.parser.lang.es.AncoraSpanishHeadRules,java.io.OutputStream)"},{"p":"opennlp.tools.util.featuregen","c":"BrownCluster.BrownClusterSerializer","l":"serialize(BrownCluster, OutputStream)","url":"serialize(opennlp.tools.util.featuregen.BrownCluster,java.io.OutputStream)"},{"p":"opennlp.tools.util.model","c":"ByteArraySerializer","l":"serialize(byte[], OutputStream)","url":"serialize(byte[],java.io.OutputStream)"},{"p":"opennlp.tools.util.model","c":"ChunkerModelSerializer","l":"serialize(ChunkerModel, OutputStream)","url":"serialize(opennlp.tools.chunker.ChunkerModel,java.io.OutputStream)"},{"p":"opennlp.tools.util.model","c":"DictionarySerializer","l":"serialize(Dictionary, OutputStream)","url":"serialize(opennlp.tools.dictionary.Dictionary,java.io.OutputStream)"},{"p":"opennlp.tools.util.model","c":"BaseModel","l":"serialize(File)","url":"serialize(java.io.File)"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules.HeadRulesSerializer","l":"serialize(HeadRules, OutputStream)","url":"serialize(opennlp.tools.parser.lang.en.HeadRules,java.io.OutputStream)"},{"p":"opennlp.tools.dictionary.serializer","c":"DictionaryEntryPersistor","l":"serialize(OutputStream, Iterator<Entry>, boolean)","url":"serialize(java.io.OutputStream,java.util.Iterator,boolean)"},{"p":"opennlp.tools.dictionary.serializer","c":"DictionaryEntryPersistor","l":"serialize(OutputStream, Iterator<Entry>)","url":"serialize(java.io.OutputStream,java.util.Iterator)"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"serialize(OutputStream)","url":"serialize(java.io.OutputStream)"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"serialize(OutputStream)","url":"serialize(java.io.OutputStream)"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"serialize(OutputStream)","url":"serialize(java.io.OutputStream)"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary","l":"serialize(OutputStream)","url":"serialize(java.io.OutputStream)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"serialize(OutputStream)","url":"serialize(java.io.OutputStream)"},{"p":"opennlp.tools.util.featuregen","c":"BrownCluster","l":"serialize(OutputStream)","url":"serialize(java.io.OutputStream)"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterDictionary","l":"serialize(OutputStream)","url":"serialize(java.io.OutputStream)"},{"p":"opennlp.tools.util.model","c":"BaseModel","l":"serialize(OutputStream)","url":"serialize(java.io.OutputStream)"},{"p":"opennlp.tools.util.model","c":"BaseModel","l":"serialize(Path)","url":"serialize(java.nio.file.Path)"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory.POSDictionarySerializer","l":"serialize(POSDictionary, OutputStream)","url":"serialize(opennlp.tools.postag.POSDictionary,java.io.OutputStream)"},{"p":"opennlp.tools.util.model","c":"POSModelSerializer","l":"serialize(POSModel, OutputStream)","url":"serialize(opennlp.tools.postag.POSModel,java.io.OutputStream)"},{"p":"opennlp.tools.util.model","c":"ArtifactSerializer","l":"serialize(T, OutputStream)","url":"serialize(T,java.io.OutputStream)"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterDictionary.WordClusterDictionarySerializer","l":"serialize(WordClusterDictionary, OutputStream)","url":"serialize(opennlp.tools.util.featuregen.WordClusterDictionary,java.io.OutputStream)"},{"p":"opennlp.tools.parser.lang.en","c":"HeadRules","l":"serialize(Writer)","url":"serialize(java.io.Writer)"},{"p":"opennlp.tools.parser.lang.es","c":"AncoraSpanishHeadRules","l":"serialize(Writer)","url":"serialize(java.io.Writer)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"set(double)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"set(double)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"set(Probability<T>)","url":"set(opennlp.tools.ml.naivebayes.Probability)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"set(Probability<T>)","url":"set(opennlp.tools.ml.naivebayes.Probability)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbabilities","l":"set(T, double)","url":"set(T,double)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"set(T, double)","url":"set(T,double)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbabilities","l":"set(T, Probability<T>)","url":"set(T,opennlp.tools.ml.naivebayes.Probability)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"set(T, Probability<T>)","url":"set(T,opennlp.tools.ml.naivebayes.Probability)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setAll(double, double, double, double[], double[], double[], double[], double[], double[], int)","url":"setAll(double,double,double,double[],double[],double[],double[],double[],double[],int)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setAll(double, double, double, double[], double[], double[], double[], int)","url":"setAll(double,double,double,double[],double[],double[],double[],int)"},{"p":"opennlp.tools.parser","c":"Parse","l":"setChild(int, String)","url":"setChild(int,java.lang.String)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"setChunkSize(int)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"setConfidence(double)"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"setCount(String, int)","url":"setCount(java.lang.String,int)"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"setCount(StringList, int)","url":"setCount(opennlp.tools.util.StringList,int)"},{"p":"opennlp.tools.util.featuregen","c":"AdditionalContextFeatureGenerator","l":"setCurrentContext(String[][])","url":"setCurrentContext(java.lang.String[][])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setCurrPoint(double[])"},{"p":"opennlp.tools.parser","c":"Parse","l":"setDerivation(StringBuffer)","url":"setDerivation(java.lang.StringBuffer)"},{"p":"opennlp.tools.util.featuregen","c":"DictionaryFeatureGenerator","l":"setDictionary(Dictionary)","url":"setDictionary(opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.util.featuregen","c":"DictionaryFeatureGenerator","l":"setDictionary(String, Dictionary)","url":"setDictionary(java.lang.String,opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.formats.ad","c":"ADChunkSampleStream","l":"setEnd(int)"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"setErrorReporting(boolean)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer","l":"setEvaluator(QNMinimizer.Evaluator)","url":"setEvaluator(opennlp.tools.ml.maxent.quasinewton.QNMinimizer.Evaluator)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setFctEvalCount(int)"},{"p":"opennlp.tools.doccat","c":"DoccatFactory","l":"setFeatureGenerators(FeatureGenerator[])","url":"setFeatureGenerators(opennlp.tools.doccat.FeatureGenerator[])"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Leaf","l":"setFunctionalTag(String)","url":"setFunctionalTag(java.lang.String)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"setGaussianSigma(double)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setGradAtCurr(double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setGradAtNext(double[])"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"setIfLarger(double)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"setIfLarger(double)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"setIfLarger(Probability<T>)","url":"setIfLarger(opennlp.tools.ml.naivebayes.Probability)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"setIfLarger(Probability<T>)","url":"setIfLarger(opennlp.tools.ml.naivebayes.Probability)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbabilities","l":"setIfLarger(T, double)","url":"setIfLarger(T,double)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"setIfLarger(T, double)","url":"setIfLarger(T,double)"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"setItemID(String)","url":"setItemID(java.lang.String)"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"setItemName(String)","url":"setItemName(java.lang.String)"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"setItemParentID(String)","url":"setItemParentID(java.lang.String)"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"setItemType(String)","url":"setItemType(java.lang.String)"},{"p":"opennlp.tools.parser","c":"Constituent","l":"setLabel(String)","url":"setLabel(java.lang.String)"},{"p":"opennlp.tools.parser","c":"Parse","l":"setLabel(String)","url":"setLabel(java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"Prior","l":"setLabels(String[], String[])","url":"setLabels(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.ml.model","c":"UniformPrior","l":"setLabels(String[], String[])","url":"setLabels(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Leaf","l":"setLemma(String)","url":"setLemma(java.lang.String)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.TreeElement","l":"setLevel(int)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Leaf","l":"setLexeme(String)","url":"setLexeme(java.lang.String)"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"setLinkedEntries(ArrayList<T>)","url":"setLinkedEntries(java.util.ArrayList)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"setLog(double)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"setLog(double)"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbabilities","l":"setLog(T, double)","url":"setLog(T,double)"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"setLog(T, double)","url":"setLog(T,double)"},{"p":"opennlp.tools.namefind","c":"RegexNameFinder","l":"setMatchingPatterns(Pattern[])","url":"setMatchingPatterns(java.util.regex.Pattern[])"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"setMaxLength(int)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.Sentence","l":"setMetadata(String)","url":"setMetadata(java.lang.String)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"setMinConsecImprovements(int)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorConfig","l":"setMinDiff(double)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.TreeElement","l":"setMorphologicalTag(String)","url":"setMorphologicalTag(java.lang.String)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setNextPoint(double[])"},{"p":"opennlp.tools.parser","c":"Parse","l":"setNextPunctuation(Collection<Parse>)","url":"setNextPunctuation(java.util.Collection)"},{"p":"opennlp.tools.formats.brat","c":"BratAnnotation","l":"setNote(String)","url":"setNote(java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"MutableContext","l":"setParameter(int, double)","url":"setParameter(int,double)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"setParams(String[])","url":"setParams(java.lang.String[])"},{"p":"opennlp.tools.parser","c":"Parse","l":"setParent(Parse)","url":"setParent(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"setParents(Parse)","url":"setParents(opennlp.tools.parser.Parse)"},{"p":"opennlp.tools.parser","c":"Parse","l":"setPrevPunctuation(Collection<Parse>)","url":"setPrevPunctuation(java.util.Collection)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setPseudoGradAtNext(double[])"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.Sentence","l":"setRoot(ADSentenceStream.SentenceParser.Node)","url":"setRoot(opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.Node)"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"setScoreMap(Map<String, Double>)","url":"setScoreMap(java.util.Map)"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"setSearchTerm(String)","url":"setSearchTerm(java.lang.String)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Leaf","l":"setSecondaryTag(String)","url":"setSecondaryTag(java.lang.String)"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"setSentenceid(int)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setSignVector(double[])"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"setSkippedAveraging(boolean)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"setSmoothing(boolean)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"setSmoothingObservation(double)"},{"p":"opennlp.tools.namefind","c":"RegexNameFinder","l":"setSpanType(String)","url":"setSpanType(java.lang.String)"},{"p":"opennlp.tools.formats.ad","c":"ADChunkSampleStream","l":"setStart(int)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setStepSize(double)"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"setStepSizeDecrease(double)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.TreeElement","l":"setSyntacticTag(String)","url":"setSyntacticTag(java.lang.String)"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"setTagDictionary(TagDictionary)","url":"setTagDictionary(opennlp.tools.postag.TagDictionary)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.Sentence","l":"setText(String)","url":"setText(java.lang.String)"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"setTolerance(double)"},{"p":"opennlp.tools.parser","c":"Parse","l":"setType(String)","url":"setType(java.lang.String)"},{"p":"opennlp.tools.dictionary.serializer","c":"Attributes","l":"setValue(String, String)","url":"setValue(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setValueAtCurr(double)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"LineSearch.LineSearchResult","l":"setValueAtNext(double)"},{"p":"opennlp.tools.formats.muc","c":"SgmlParser","l":"SgmlParser()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser","c":"Parse","l":"show()"},{"p":"opennlp.tools.parser","c":"Parse","l":"show(StringBuffer)","url":"show(java.lang.StringBuffer)"},{"p":"opennlp.tools.parser","c":"Parse","l":"showCodeTree()"},{"p":"opennlp.tools.util.normalizer","c":"ShrinkCharSequenceNormalizer","l":"ShrinkCharSequenceNormalizer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.model","c":"ModelParameterChunker","l":"SIGNATURE_CHUNKED_PARAMS"},{"p":"opennlp.tools.ml.perceptron","c":"SimplePerceptronSequenceTrainer","l":"SimplePerceptronSequenceTrainer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize","c":"SimpleTokenizer","l":"SimpleTokenizer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"SimpleTokenizerTool","l":"SimpleTokenizerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.commons","c":"Internal","l":"since()"},{"p":"opennlp.tools.commons","c":"ThreadSafe","l":"since()"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"size()"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"size()"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"size()"},{"p":"opennlp.tools.util","c":"StringList","l":"size()"},{"p":"opennlp.tools.util.wordvector","c":"WordVectorTable","l":"size()"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer","l":"SnowballStemmer(SnowballStemmer.ALGORITHM, int)","url":"%3Cinit%3E(opennlp.tools.stemmer.snowball.SnowballStemmer.ALGORITHM,int)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer","l":"SnowballStemmer(SnowballStemmer.ALGORITHM)","url":"%3Cinit%3E(opennlp.tools.stemmer.snowball.SnowballStemmer.ALGORITHM)"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"SORT_DEFAULT"},{"p":"opennlp.tools.ml.model","c":"AbstractDataIndexer","l":"SORT_PARAM"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizer","l":"sortedScoreMap(String[])","url":"sortedScoreMap(java.lang.String[])"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerME","l":"sortedScoreMap(String[])","url":"sortedScoreMap(java.lang.String[])"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream.LANGUAGE","l":"SPA"},{"p":"opennlp.tools.formats.brat","c":"AnnotationConfiguration","l":"SPAN_TYPE"},{"p":"opennlp.tools.util","c":"Span","l":"Span(int, int, double)","url":"%3Cinit%3E(int,int,double)"},{"p":"opennlp.tools.util","c":"Span","l":"Span(int, int, String, double)","url":"%3Cinit%3E(int,int,java.lang.String,double)"},{"p":"opennlp.tools.util","c":"Span","l":"Span(int, int, String)","url":"%3Cinit%3E(int,int,java.lang.String)"},{"p":"opennlp.tools.util","c":"Span","l":"Span(int, int)","url":"%3Cinit%3E(int,int)"},{"p":"opennlp.tools.util","c":"Span","l":"Span(Span, double)","url":"%3Cinit%3E(opennlp.tools.util.Span,double)"},{"p":"opennlp.tools.util","c":"Span","l":"Span(Span, int)","url":"%3Cinit%3E(opennlp.tools.util.Span,int)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"SPANISH"},{"p":"opennlp.tools.util","c":"Span","l":"spansToStrings(Span[], CharSequence)","url":"spansToStrings(opennlp.tools.util.Span[],java.lang.CharSequence)"},{"p":"opennlp.tools.util","c":"Span","l":"spansToStrings(Span[], String[])","url":"spansToStrings(opennlp.tools.util.Span[],java.lang.String[])"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorME","l":"SPLIT"},{"p":"opennlp.tools.tokenize","c":"TokenizerME","l":"SPLIT"},{"p":"opennlp.tools.namefind","c":"BilouCodec","l":"START"},{"p":"opennlp.tools.namefind","c":"BioCodec","l":"START"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"START"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"START"},{"p":"opennlp.tools.namefind","c":"NameSampleDataStream","l":"START_TAG"},{"p":"opennlp.tools.namefind","c":"NameSampleDataStream","l":"START_TAG_PREFIX"},{"p":"opennlp.tools.formats.muc","c":"MucNameContentHandler","l":"startElement(String, Map<String, String>)","url":"startElement(java.lang.String,java.util.Map)"},{"p":"opennlp.tools.formats.muc","c":"SgmlParser.ContentHandler","l":"startElement(String, Map<String, String>)","url":"startElement(java.lang.String,java.util.Map)"},{"p":"opennlp.tools.formats.masc","c":"MascNamedEntityParser","l":"startElement(String, String, String, Attributes)","url":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"},{"p":"opennlp.tools.formats.masc","c":"MascPennTagParser","l":"startElement(String, String, String, Attributes)","url":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"},{"p":"opennlp.tools.util","c":"Span","l":"startsWith(Span)","url":"startsWith(opennlp.tools.util.Span)"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"stem()"},{"p":"opennlp.tools.stemmer.snowball","c":"arabicStemmer","l":"stem()"},{"p":"opennlp.tools.stemmer.snowball","c":"catalanStemmer","l":"stem()"},{"p":"opennlp.tools.stemmer.snowball","c":"greekStemmer","l":"stem()"},{"p":"opennlp.tools.stemmer.snowball","c":"indonesianStemmer","l":"stem()"},{"p":"opennlp.tools.stemmer.snowball","c":"irishStemmer","l":"stem()"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"stem(char[], int, int)","url":"stem(char[],int,int)"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"stem(char[], int)","url":"stem(char[],int)"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"stem(char[])"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"stem(CharSequence)","url":"stem(java.lang.CharSequence)"},{"p":"opennlp.tools.stemmer","c":"Stemmer","l":"stem(CharSequence)","url":"stem(java.lang.CharSequence)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer","l":"stem(CharSequence)","url":"stem(java.lang.CharSequence)"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"stem(int)"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"stem(String)","url":"stem(java.lang.String)"},{"p":"opennlp.tools.util","c":"StringList","l":"StringList(String...)","url":"%3Cinit%3E(java.lang.String...)"},{"p":"opennlp.tools.util","c":"StringList","l":"StringList(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.util","c":"StringUtil","l":"StringUtil()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"SuffixFeatureGenerator","l":"SuffixFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"SuffixFeatureGenerator","l":"SuffixFeatureGenerator(int)","url":"%3Cinit%3E(int)"},{"p":"opennlp.tools.util.featuregen","c":"SuffixFeatureGeneratorFactory","l":"SuffixFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml","c":"ArrayMath","l":"sumFeatures(Context[], float[], double[])","url":"sumFeatures(opennlp.tools.ml.model.Context[],float[],double[])"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"SWEDISH"},{"p":"opennlp.tools.parser","c":"ParserEventTypeEnum","l":"TAG"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"tag(int, String[])","url":"tag(int,java.lang.String[])"},{"p":"opennlp.tools.postag","c":"POSTagger","l":"tag(String[], Object[])","url":"tag(java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"tag(String[], Object[])","url":"tag(java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.postag","c":"POSTagger","l":"tag(String[])","url":"tag(java.lang.String[])"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"tag(String[])","url":"tag(java.lang.String[])"},{"p":"opennlp.tools.cmdline.parser","c":"TaggerModelReplacerTool","l":"TaggerModelReplacerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.sentdetect.lang","c":"Factory","l":"thEosCharacters"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"THREADS_DEFAULT"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"THREADS_PARAM"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"THREADS_PARAM"},{"p":"opennlp.tools.formats.ad","c":"PortugueseContractionUtility","l":"toContraction(String, String)","url":"toContraction(java.lang.String,java.lang.String)"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"toDictionary()"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"toDictionary(boolean)"},{"p":"opennlp.tools.ml","c":"ArrayMath","l":"toDoubleArray(List<Double>)","url":"toDoubleArray(java.util.List)"},{"p":"opennlp.tools.util.wordvector","c":"WordVector","l":"toDoubleBuffer()"},{"p":"opennlp.tools.util.wordvector","c":"WordVector","l":"toFloatBuffer()"},{"p":"opennlp.tools.ml","c":"ArrayMath","l":"toIntArray(List<Integer>)","url":"toIntArray(java.util.List)"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"TOK_NODE"},{"p":"opennlp.tools.util.featuregen","c":"TokenClassFeatureGenerator","l":"TokenClassFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"TokenClassFeatureGenerator","l":"TokenClassFeatureGenerator(boolean)","url":"%3Cinit%3E(boolean)"},{"p":"opennlp.tools.util.featuregen","c":"TokenClassFeatureGeneratorFactory","l":"TokenClassFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenEvaluationErrorListener","l":"TokenEvaluationErrorListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenEvaluationErrorListener","l":"TokenEvaluationErrorListener(OutputStream)","url":"%3Cinit%3E(java.io.OutputStream)"},{"p":"opennlp.tools.util.featuregen","c":"FeatureGeneratorUtil","l":"tokenFeature(String)","url":"tokenFeature(java.lang.String)"},{"p":"opennlp.tools.util.featuregen","c":"TokenFeatureGenerator","l":"TokenFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"TokenFeatureGenerator","l":"TokenFeatureGenerator(boolean)","url":"%3Cinit%3E(boolean)"},{"p":"opennlp.tools.util.featuregen","c":"TokenFeatureGeneratorFactory","l":"TokenFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize","c":"Tokenizer","l":"tokenize(String)","url":"tokenize(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"WordpieceTokenizer","l":"tokenize(String)","url":"tokenize(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"SimpleTokenizer","l":"tokenizePos(String)","url":"tokenizePos(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"Tokenizer","l":"tokenizePos(String)","url":"tokenizePos(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"TokenizerME","l":"tokenizePos(String)","url":"tokenizePos(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"WhitespaceTokenizer","l":"tokenizePos(String)","url":"tokenizePos(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"WordpieceTokenizer","l":"tokenizePos(String)","url":"tokenizePos(java.lang.String)"},{"p":"opennlp.tools.util","c":"DownloadUtil.ModelType","l":"TOKENIZER"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerConverterTool","l":"TokenizerConverterTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize","c":"TokenizerCrossValidator","l":"TokenizerCrossValidator(TrainingParameters, TokenizerFactory, TokenizerEvaluationMonitor...)","url":"%3Cinit%3E(opennlp.tools.util.TrainingParameters,opennlp.tools.tokenize.TokenizerFactory,opennlp.tools.tokenize.TokenizerEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerCrossValidatorTool","l":"TokenizerCrossValidatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize","c":"TokenizerEvaluator","l":"TokenizerEvaluator(Tokenizer, TokenizerEvaluationMonitor...)","url":"%3Cinit%3E(opennlp.tools.tokenize.Tokenizer,opennlp.tools.tokenize.TokenizerEvaluationMonitor...)"},{"p":"opennlp.tools.tokenize","c":"TokenizerFactory","l":"TokenizerFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize","c":"TokenizerFactory","l":"TokenizerFactory(String, Dictionary, boolean, Pattern)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.dictionary.Dictionary,boolean,java.util.regex.Pattern)"},{"p":"opennlp.tools.tokenize","c":"TokenizerME","l":"TokenizerME(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"TokenizerME","l":"TokenizerME(TokenizerModel, Factory)","url":"%3Cinit%3E(opennlp.tools.tokenize.TokenizerModel,opennlp.tools.tokenize.lang.Factory)"},{"p":"opennlp.tools.tokenize","c":"TokenizerME","l":"TokenizerME(TokenizerModel)","url":"%3Cinit%3E(opennlp.tools.tokenize.TokenizerModel)"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerMEEvaluatorTool","l":"TokenizerMEEvaluatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerMETool","l":"TokenizerMETool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize","c":"TokenizerModel","l":"TokenizerModel(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.tokenize","c":"TokenizerModel","l":"TokenizerModel(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.tokenize","c":"TokenizerModel","l":"TokenizerModel(MaxentModel, Map<String, String>, TokenizerFactory)","url":"%3Cinit%3E(opennlp.tools.ml.model.MaxentModel,java.util.Map,opennlp.tools.tokenize.TokenizerFactory)"},{"p":"opennlp.tools.tokenize","c":"TokenizerModel","l":"TokenizerModel(Path)","url":"%3Cinit%3E(java.nio.file.Path)"},{"p":"opennlp.tools.tokenize","c":"TokenizerModel","l":"TokenizerModel(URL)","url":"%3Cinit%3E(java.net.URL)"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerModelLoader","l":"TokenizerModelLoader()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize","c":"TokenizerStream","l":"TokenizerStream(Tokenizer, ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.tokenize.Tokenizer,opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.cmdline.tokenizer","c":"TokenizerTrainerTool","l":"TokenizerTrainerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderConverterTool","l":"TokenNameFinderConverterTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderCrossValidator","l":"TokenNameFinderCrossValidator(String, String, TrainingParameters, byte[], Map<String, Object>, SequenceCodec<String>, TokenNameFinderEvaluationMonitor...)","url":"%3Cinit%3E(java.lang.String,java.lang.String,opennlp.tools.util.TrainingParameters,byte[],java.util.Map,opennlp.tools.util.SequenceCodec,opennlp.tools.namefind.TokenNameFinderEvaluationMonitor...)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderCrossValidator","l":"TokenNameFinderCrossValidator(String, String, TrainingParameters, byte[], Map<String, Object>, TokenNameFinderEvaluationMonitor...)","url":"%3Cinit%3E(java.lang.String,java.lang.String,opennlp.tools.util.TrainingParameters,byte[],java.util.Map,opennlp.tools.namefind.TokenNameFinderEvaluationMonitor...)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderCrossValidator","l":"TokenNameFinderCrossValidator(String, String, TrainingParameters, TokenNameFinderFactory, TokenNameFinderEvaluationMonitor...)","url":"%3Cinit%3E(java.lang.String,java.lang.String,opennlp.tools.util.TrainingParameters,opennlp.tools.namefind.TokenNameFinderFactory,opennlp.tools.namefind.TokenNameFinderEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderCrossValidatorTool","l":"TokenNameFinderCrossValidatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderDetailedFMeasureListener","l":"TokenNameFinderDetailedFMeasureListener()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderEvaluator","l":"TokenNameFinderEvaluator(TokenNameFinder, TokenNameFinderEvaluationMonitor...)","url":"%3Cinit%3E(opennlp.tools.namefind.TokenNameFinder,opennlp.tools.namefind.TokenNameFinderEvaluationMonitor...)"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderEvaluatorTool","l":"TokenNameFinderEvaluatorTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderFactory","l":"TokenNameFinderFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderFactory","l":"TokenNameFinderFactory(byte[], Map<String, Object>, SequenceCodec<String>)","url":"%3Cinit%3E(byte[],java.util.Map,opennlp.tools.util.SequenceCodec)"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderFineGrainedReportListener","l":"TokenNameFinderFineGrainedReportListener(SequenceCodec<String>, OutputStream)","url":"%3Cinit%3E(opennlp.tools.util.SequenceCodec,java.io.OutputStream)"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderFineGrainedReportListener","l":"TokenNameFinderFineGrainedReportListener(SequenceCodec<String>)","url":"%3Cinit%3E(opennlp.tools.util.SequenceCodec)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"TokenNameFinderModel(File)","url":"%3Cinit%3E(java.io.File)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"TokenNameFinderModel(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"TokenNameFinderModel(Path)","url":"%3Cinit%3E(java.nio.file.Path)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"TokenNameFinderModel(String, MaxentModel, byte[], Map<String, Object>, Map<String, String>)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,byte[],java.util.Map,java.util.Map)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"TokenNameFinderModel(String, MaxentModel, int, byte[], Map<String, Object>, Map<String, String>, SequenceCodec<String>, TokenNameFinderFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,int,byte[],java.util.Map,java.util.Map,opennlp.tools.util.SequenceCodec,opennlp.tools.namefind.TokenNameFinderFactory)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"TokenNameFinderModel(String, MaxentModel, int, byte[], Map<String, Object>, Map<String, String>)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,int,byte[],java.util.Map,java.util.Map)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"TokenNameFinderModel(String, MaxentModel, Map<String, Object>, Map<String, String>)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.MaxentModel,java.util.Map,java.util.Map)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"TokenNameFinderModel(String, SequenceClassificationModel<String>, byte[], Map<String, Object>, Map<String, String>, SequenceCodec<String>, TokenNameFinderFactory)","url":"%3Cinit%3E(java.lang.String,opennlp.tools.ml.model.SequenceClassificationModel,byte[],java.util.Map,java.util.Map,opennlp.tools.util.SequenceCodec,opennlp.tools.namefind.TokenNameFinderFactory)"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderModel","l":"TokenNameFinderModel(URL)","url":"%3Cinit%3E(java.net.URL)"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderModelLoader","l":"TokenNameFinderModelLoader()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderTool","l":"TokenNameFinderTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderTrainerTool","l":"TokenNameFinderTrainerTool()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"TokenPatternFeatureGenerator","l":"TokenPatternFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"TokenPatternFeatureGenerator","l":"TokenPatternFeatureGenerator(Tokenizer)","url":"%3Cinit%3E(opennlp.tools.tokenize.Tokenizer)"},{"p":"opennlp.tools.util.featuregen","c":"TokenPatternFeatureGeneratorFactory","l":"TokenPatternFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.wordvector","c":"WordVectorTable","l":"tokens()"},{"p":"opennlp.tools.tokenize","c":"TokenSample","l":"TokenSample(Detokenizer, String[])","url":"%3Cinit%3E(opennlp.tools.tokenize.Detokenizer,java.lang.String[])"},{"p":"opennlp.tools.tokenize","c":"TokenSample","l":"TokenSample(String, Span[])","url":"%3Cinit%3E(java.lang.String,opennlp.tools.util.Span[])"},{"p":"opennlp.tools.tokenize.lang.en","c":"TokenSampleStream","l":"TokenSampleStream(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.tokenize","c":"TokenSampleStream","l":"TokenSampleStream(ObjectStream<String>, String)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"TokenSampleStream","l":"TokenSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.util","c":"TokenTag","l":"TokenTag(String, String, String[])","url":"%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String[])"},{"p":"opennlp.tools.tokenize","c":"TokSpanEventStream","l":"TokSpanEventStream(ObjectStream<TokenSample>, boolean, Pattern, TokenContextGenerator)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,boolean,java.util.regex.Pattern,opennlp.tools.tokenize.TokenContextGenerator)"},{"p":"opennlp.tools.tokenize","c":"TokSpanEventStream","l":"TokSpanEventStream(ObjectStream<TokenSample>, boolean, TokenContextGenerator)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,boolean,opennlp.tools.tokenize.TokenContextGenerator)"},{"p":"opennlp.tools.tokenize","c":"TokSpanEventStream","l":"TokSpanEventStream(ObjectStream<TokenSample>, boolean)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream,boolean)"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"TOLERANCE_DEFAULT"},{"p":"opennlp.tools.ml.model","c":"FileEventStream","l":"toLine(Event)","url":"toLine(opennlp.tools.ml.model.Event)"},{"p":"opennlp.tools.util","c":"StringUtil","l":"toLowerCase(CharSequence)","url":"toLowerCase(java.lang.CharSequence)"},{"p":"opennlp.tools.parser","c":"AbstractBottomUpParser","l":"TOP_NODE"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"topKLemmaClasses(String[], String[], double)","url":"topKLemmaClasses(java.lang.String[],java.lang.String[],double)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"topKLemmaClasses(String[], String[])","url":"topKLemmaClasses(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.postag","c":"POSTagger","l":"topKSequences(String[], Object[])","url":"topKSequences(java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"topKSequences(String[], Object[])","url":"topKSequences(java.lang.String[],java.lang.Object[])"},{"p":"opennlp.tools.chunker","c":"Chunker","l":"topKSequences(String[], String[], double)","url":"topKSequences(java.lang.String[],java.lang.String[],double)"},{"p":"opennlp.tools.chunker","c":"ChunkerME","l":"topKSequences(String[], String[], double)","url":"topKSequences(java.lang.String[],java.lang.String[],double)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"topKSequences(String[], String[], double)","url":"topKSequences(java.lang.String[],java.lang.String[],double)"},{"p":"opennlp.tools.chunker","c":"Chunker","l":"topKSequences(String[], String[])","url":"topKSequences(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.chunker","c":"ChunkerME","l":"topKSequences(String[], String[])","url":"topKSequences(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"topKSequences(String[], String[])","url":"topKSequences(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.postag","c":"POSTagger","l":"topKSequences(String[])","url":"topKSequences(java.lang.String[])"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"topKSequences(String[])","url":"topKSequences(java.lang.String[])"},{"p":"opennlp.tools.formats.nkjp","c":"NKJPSegmentationDocument.Pointer","l":"toSpan()"},{"p":"opennlp.tools.chunker","c":"ChunkSample","l":"toString()"},{"p":"opennlp.tools.dictionary","c":"Dictionary","l":"toString()"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerEvaluator","l":"toString()"},{"p":"opennlp.tools.doccat","c":"DocumentSample","l":"toString()"},{"p":"opennlp.tools.entitylinker","c":"BaseLink","l":"toString()"},{"p":"opennlp.tools.entitylinker","c":"LinkedSpan","l":"toString()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Leaf","l":"toString()"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.Node","l":"toString()"},{"p":"opennlp.tools.formats.brat","c":"AttributeAnnotation","l":"toString()"},{"p":"opennlp.tools.formats.brat","c":"BratAnnotation","l":"toString()"},{"p":"opennlp.tools.formats.brat","c":"RelationAnnotation","l":"toString()"},{"p":"opennlp.tools.formats.brat","c":"SpanAnnotation","l":"toString()"},{"p":"opennlp.tools.formats.nkjp","c":"NKJPSegmentationDocument.Pointer","l":"toString()"},{"p":"opennlp.tools.langdetect","c":"Language","l":"toString()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorEvaluator","l":"toString()"},{"p":"opennlp.tools.langdetect","c":"LanguageSample","l":"toString()"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSample","l":"toString()"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerEvaluator","l":"toString()"},{"p":"opennlp.tools.ml.model","c":"ComparableEvent","l":"toString()"},{"p":"opennlp.tools.ml.model","c":"ComparablePredicate","l":"toString()"},{"p":"opennlp.tools.ml.model","c":"Event","l":"toString()"},{"p":"opennlp.tools.ml.naivebayes","c":"LogProbability","l":"toString()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probabilities","l":"toString()"},{"p":"opennlp.tools.ml.naivebayes","c":"Probability","l":"toString()"},{"p":"opennlp.tools.namefind","c":"NameSample","l":"toString()"},{"p":"opennlp.tools.ngram","c":"NGramCharModel","l":"toString()"},{"p":"opennlp.tools.ngram","c":"NGramModel","l":"toString()"},{"p":"opennlp.tools.parser","c":"Parse","l":"toString()"},{"p":"opennlp.tools.postag","c":"POSDictionary","l":"toString()"},{"p":"opennlp.tools.postag","c":"POSEvaluator","l":"toString()"},{"p":"opennlp.tools.postag","c":"POSSample","l":"toString()"},{"p":"opennlp.tools.sentdetect","c":"SentenceSample","l":"toString()"},{"p":"opennlp.tools.stemmer","c":"PorterStemmer","l":"toString()"},{"p":"opennlp.tools.tokenize","c":"TokenSample","l":"toString()"},{"p":"opennlp.tools.util","c":"Sequence","l":"toString()"},{"p":"opennlp.tools.util","c":"Span","l":"toString()"},{"p":"opennlp.tools.util","c":"StringList","l":"toString()"},{"p":"opennlp.tools.util","c":"TokenTag","l":"toString()"},{"p":"opennlp.tools.util","c":"Version","l":"toString()"},{"p":"opennlp.tools.util.eval","c":"CrossValidationPartitioner","l":"toString()"},{"p":"opennlp.tools.util.eval","c":"FMeasure","l":"toString()"},{"p":"opennlp.tools.util.eval","c":"Mean","l":"toString()"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGenerator","l":"toString()"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGenerator","l":"toString()"},{"p":"opennlp.tools.util","c":"StringUtil","l":"toUpperCase(CharSequence)","url":"toUpperCase(java.lang.CharSequence)"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"train(DataIndexer)","url":"train(opennlp.tools.ml.model.DataIndexer)"},{"p":"opennlp.tools.ml","c":"EventTrainer","l":"train(DataIndexer)","url":"train(opennlp.tools.ml.model.DataIndexer)"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"train(ObjectStream<Event>)","url":"train(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.ml","c":"EventTrainer","l":"train(ObjectStream<Event>)","url":"train(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorME","l":"train(ObjectStream<LanguageSample>, TrainingParameters, LanguageDetectorFactory)","url":"train(opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.langdetect.LanguageDetectorFactory)"},{"p":"opennlp.tools.tokenize","c":"TokenizerME","l":"train(ObjectStream<TokenSample>, TokenizerFactory, TrainingParameters)","url":"train(opennlp.tools.util.ObjectStream,opennlp.tools.tokenize.TokenizerFactory,opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.ml","c":"AbstractEventModelSequenceTrainer","l":"train(SequenceStream<Event>)","url":"train(opennlp.tools.ml.model.SequenceStream)"},{"p":"opennlp.tools.ml","c":"EventModelSequenceTrainer","l":"train(SequenceStream<T>)","url":"train(opennlp.tools.ml.model.SequenceStream)"},{"p":"opennlp.tools.ml","c":"SequenceTrainer","l":"train(SequenceStream<T>)","url":"train(opennlp.tools.ml.model.SequenceStream)"},{"p":"opennlp.tools.chunker","c":"ChunkerME","l":"train(String, ObjectStream<ChunkSample>, TrainingParameters, ChunkerFactory)","url":"train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.chunker.ChunkerFactory)"},{"p":"opennlp.tools.doccat","c":"DocumentCategorizerME","l":"train(String, ObjectStream<DocumentSample>, TrainingParameters, DoccatFactory)","url":"train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.doccat.DoccatFactory)"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerME","l":"train(String, ObjectStream<LemmaSample>, TrainingParameters, LemmatizerFactory)","url":"train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.lemmatizer.LemmatizerFactory)"},{"p":"opennlp.tools.parser.treeinsert","c":"Parser","l":"train(String, ObjectStream<Parse>, HeadRules, int, int)","url":"train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,int,int)"},{"p":"opennlp.tools.parser.chunking","c":"Parser","l":"train(String, ObjectStream<Parse>, HeadRules, TrainingParameters)","url":"train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.parser.treeinsert","c":"Parser","l":"train(String, ObjectStream<Parse>, HeadRules, TrainingParameters)","url":"train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.postag","c":"POSTaggerME","l":"train(String, ObjectStream<POSSample>, TrainingParameters, POSTaggerFactory)","url":"train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.postag.POSTaggerFactory)"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorME","l":"train(String, ObjectStream<SentenceSample>, boolean, Dictionary, TrainingParameters)","url":"train(java.lang.String,opennlp.tools.util.ObjectStream,boolean,opennlp.tools.dictionary.Dictionary,opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorME","l":"train(String, ObjectStream<SentenceSample>, boolean, Dictionary)","url":"train(java.lang.String,opennlp.tools.util.ObjectStream,boolean,opennlp.tools.dictionary.Dictionary)"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorME","l":"train(String, ObjectStream<SentenceSample>, SentenceDetectorFactory, TrainingParameters)","url":"train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.sentdetect.SentenceDetectorFactory,opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.namefind","c":"NameFinderME","l":"train(String, String, ObjectStream<NameSample>, TrainingParameters, TokenNameFinderFactory)","url":"train(java.lang.String,java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.namefind.TokenNameFinderFactory)"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"TRAINER_TYPE_PARAM"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"TRAINER_TYPE_PARAM"},{"p":"opennlp.tools.ml","c":"TrainerFactory","l":"TrainerFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.model","c":"BaseModel","l":"TRAINING_CUTOFF_PROPERTY"},{"p":"opennlp.tools.util.model","c":"BaseModel","l":"TRAINING_EVENTHASH_PROPERTY"},{"p":"opennlp.tools.util.model","c":"BaseModel","l":"TRAINING_ITERATIONS_PROPERTY"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"TrainingParameters()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"TrainingParameters(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"TrainingParameters(Map<String, Object>)","url":"%3Cinit%3E(java.util.Map)"},{"p":"opennlp.tools.util","c":"TrainingParameters","l":"TrainingParameters(TrainingParameters)","url":"%3Cinit%3E(opennlp.tools.util.TrainingParameters)"},{"p":"opennlp.tools.ml.naivebayes","c":"NaiveBayesTrainer","l":"trainModel(DataIndexer)","url":"trainModel(opennlp.tools.ml.model.DataIndexer)"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"trainModel(int, DataIndexer, int, boolean)","url":"trainModel(int,opennlp.tools.ml.model.DataIndexer,int,boolean)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"trainModel(int, DataIndexer, int)","url":"trainModel(int,opennlp.tools.ml.model.DataIndexer,int)"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"trainModel(int, DataIndexer, int)","url":"trainModel(int,opennlp.tools.ml.model.DataIndexer,int)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"trainModel(int, DataIndexer, Prior, int)","url":"trainModel(int,opennlp.tools.ml.model.DataIndexer,opennlp.tools.ml.model.Prior,int)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"trainModel(int, DataIndexer)","url":"trainModel(int,opennlp.tools.ml.model.DataIndexer)"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"trainModel(int, DataIndexer)","url":"trainModel(int,opennlp.tools.ml.model.DataIndexer)"},{"p":"opennlp.tools.ml.perceptron","c":"SimplePerceptronSequenceTrainer","l":"trainModel(int, SequenceStream<Event>, int, boolean)","url":"trainModel(int,opennlp.tools.ml.model.SequenceStream,int,boolean)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"trainModel(ObjectStream<Event>, int, int)","url":"trainModel(opennlp.tools.util.ObjectStream,int,int)"},{"p":"opennlp.tools.ml.maxent","c":"GISTrainer","l":"trainModel(ObjectStream<Event>)","url":"trainModel(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.formats.ad","c":"ADSentenceStream.SentenceParser.TreeElement","l":"TreeElement()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.parser","c":"ParserType","l":"TREEINSERT"},{"p":"opennlp.tools.util.featuregen","c":"TrigramNameFeatureGenerator","l":"TrigramNameFeatureGenerator()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"TrigramNameFeatureGeneratorFactory","l":"TrigramNameFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util","c":"Span","l":"trim(CharSequence)","url":"trim(java.lang.CharSequence)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"TURKISH"},{"p":"opennlp.tools.util.normalizer","c":"TwitterCharSequenceNormalizer","l":"TwitterCharSequenceNormalizer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.ml.model","c":"TwoPassDataIndexer","l":"TwoPassDataIndexer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluTagset","l":"U"},{"p":"opennlp.tools.util.model","c":"UncloseableInputStream","l":"UncloseableInputStream(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.ml.model","c":"UniformPrior","l":"UniformPrior()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"BilouCodec","l":"UNIT"},{"p":"opennlp.tools.namefind","c":"DefaultNameContextGenerator","l":"updateAdaptiveData(String[], String[])","url":"updateAdaptiveData(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.namefind","c":"NameContextGenerator","l":"updateAdaptiveData(String[], String[])","url":"updateAdaptiveData(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"AdaptiveFeatureGenerator","l":"updateAdaptiveData(String[], String[])","url":"updateAdaptiveData(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"AggregatedFeatureGenerator","l":"updateAdaptiveData(String[], String[])","url":"updateAdaptiveData(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"CachedFeatureGenerator","l":"updateAdaptiveData(String[], String[])","url":"updateAdaptiveData(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"PreviousMapFeatureGenerator","l":"updateAdaptiveData(String[], String[])","url":"updateAdaptiveData(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"PreviousTwoMapFeatureGenerator","l":"updateAdaptiveData(String[], String[])","url":"updateAdaptiveData(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGenerator","l":"updateAdaptiveData(String[], String[])","url":"updateAdaptiveData(java.lang.String[],java.lang.String[])"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"updateBuildModel(MaxentModel)","url":"updateBuildModel(opennlp.tools.ml.model.MaxentModel)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"updateCheckModel(MaxentModel)","url":"updateCheckModel(opennlp.tools.ml.model.MaxentModel)"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"updateChunkerModel(ChunkerModel)","url":"updateChunkerModel(opennlp.tools.chunker.ChunkerModel)"},{"p":"opennlp.tools.chunker","c":"ChunkSampleSequenceStream","l":"updateContext(Sequence<ChunkSample>, AbstractModel)","url":"updateContext(opennlp.tools.ml.model.Sequence,opennlp.tools.ml.model.AbstractModel)"},{"p":"opennlp.tools.lemmatizer","c":"LemmaSampleSequenceStream","l":"updateContext(Sequence<LemmaSample>, AbstractModel)","url":"updateContext(opennlp.tools.ml.model.Sequence,opennlp.tools.ml.model.AbstractModel)"},{"p":"opennlp.tools.namefind","c":"NameSampleSequenceStream","l":"updateContext(Sequence<NameSample>, AbstractModel)","url":"updateContext(opennlp.tools.ml.model.Sequence,opennlp.tools.ml.model.AbstractModel)"},{"p":"opennlp.tools.postag","c":"POSSampleSequenceStream","l":"updateContext(Sequence<POSSample>, AbstractModel)","url":"updateContext(opennlp.tools.ml.model.Sequence,opennlp.tools.ml.model.AbstractModel)"},{"p":"opennlp.tools.ml.model","c":"SequenceStream","l":"updateContext(Sequence<S>, AbstractModel)","url":"updateContext(opennlp.tools.ml.model.Sequence,opennlp.tools.ml.model.AbstractModel)"},{"p":"opennlp.tools.parser","c":"Parse","l":"updateHeads(HeadRules)","url":"updateHeads(opennlp.tools.parser.HeadRules)"},{"p":"opennlp.tools.ml.model","c":"MutableContext","l":"updateParameter(int, double)","url":"updateParameter(int,double)"},{"p":"opennlp.tools.util.eval","c":"FMeasure","l":"updateScores(Object[], Object[])","url":"updateScores(java.lang.Object[],java.lang.Object[])"},{"p":"opennlp.tools.parser","c":"Parse","l":"updateSpan()"},{"p":"opennlp.tools.parser","c":"ParserModel","l":"updateTaggerModel(POSModel)","url":"updateTaggerModel(opennlp.tools.postag.POSModel)"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory.DEFAULT_REGEX_NAME_FINDER","l":"URL"},{"p":"opennlp.tools.util.normalizer","c":"UrlCharSequenceNormalizer","l":"UrlCharSequenceNormalizer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory.DEFAULT_REGEX_NAME_FINDER","l":"USA_PHONE_NUM"},{"p":"opennlp.tools.tokenize","c":"TokenizerME","l":"useAlphaNumericOptimization()"},{"p":"opennlp.tools.tokenize","c":"TokenizerModel","l":"useAlphaNumericOptimization()"},{"p":"opennlp.tools.parser","c":"Parse","l":"useFunctionTags(boolean)"},{"p":"opennlp.tools.sentdetect","c":"SentenceModel","l":"useTokenEnd()"},{"p":"opennlp.tools.ml","c":"AbstractEventTrainer","l":"validate()"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"validate()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNTrainer","l":"validate()"},{"p":"opennlp.tools.ml.perceptron","c":"PerceptronTrainer","l":"validate()"},{"p":"opennlp.tools.ml.perceptron","c":"SimplePerceptronSequenceTrainer","l":"validate()"},{"p":"opennlp.tools.chunker","c":"ChunkerFactory","l":"validateArtifactMap()"},{"p":"opennlp.tools.doccat","c":"DoccatFactory","l":"validateArtifactMap()"},{"p":"opennlp.tools.langdetect","c":"LanguageDetectorFactory","l":"validateArtifactMap()"},{"p":"opennlp.tools.lemmatizer","c":"LemmatizerFactory","l":"validateArtifactMap()"},{"p":"opennlp.tools.namefind","c":"TokenNameFinderFactory","l":"validateArtifactMap()"},{"p":"opennlp.tools.postag","c":"POSTaggerFactory","l":"validateArtifactMap()"},{"p":"opennlp.tools.sentdetect","c":"SentenceDetectorFactory","l":"validateArtifactMap()"},{"p":"opennlp.tools.tokenize","c":"TokenizerFactory","l":"validateArtifactMap()"},{"p":"opennlp.tools.util","c":"BaseToolFactory","l":"validateArtifactMap()"},{"p":"opennlp.tools.util.model","c":"ModelUtil","l":"validateOutcomes(MaxentModel, String...)","url":"validateOutcomes(opennlp.tools.ml.model.MaxentModel,java.lang.String...)"},{"p":"opennlp.tools.lemmatizer","c":"DefaultLemmatizerSequenceValidator","l":"validSequence(int, String[], String[], String)","url":"validSequence(int,java.lang.String[],java.lang.String[],java.lang.String)"},{"p":"opennlp.tools.namefind","c":"BilouNameFinderSequenceValidator","l":"validSequence(int, String[], String[], String)","url":"validSequence(int,java.lang.String[],java.lang.String[],java.lang.String)"},{"p":"opennlp.tools.namefind","c":"NameFinderSequenceValidator","l":"validSequence(int, String[], String[], String)","url":"validSequence(int,java.lang.String[],java.lang.String[],java.lang.String)"},{"p":"opennlp.tools.parser","c":"ParserChunkerSequenceValidator","l":"validSequence(int, String[], String[], String)","url":"validSequence(int,java.lang.String[],java.lang.String[],java.lang.String)"},{"p":"opennlp.tools.postag","c":"DefaultPOSSequenceValidator","l":"validSequence(int, String[], String[], String)","url":"validSequence(int,java.lang.String[],java.lang.String[],java.lang.String)"},{"p":"opennlp.tools.util","c":"SequenceValidator","l":"validSequence(int, T[], String[], String)","url":"validSequence(int,T[],java.lang.String[],java.lang.String)"},{"p":"opennlp.tools.chunker","c":"DefaultChunkerSequenceValidator","l":"validSequence(int, TokenTag[], String[], String)","url":"validSequence(int,opennlp.tools.util.TokenTag[],java.lang.String[],java.lang.String)"},{"p":"opennlp.tools.parser","c":"ParserChunkerSequenceValidator","l":"validSequence(int, TokenTag[], String[], String)","url":"validSequence(int,opennlp.tools.util.TokenTag[],java.lang.String[],java.lang.String)"},{"p":"opennlp.tools.commons","c":"Internal","l":"value()"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"Function","l":"valueAt(double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"NegLogLikelihood","l":"valueAt(double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"ParallelNegLogLikelihood","l":"valueAt(double[])"},{"p":"opennlp.tools.ml.maxent.quasinewton","c":"QNMinimizer.L2RegFunction","l":"valueAt(double[])"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream.LANGUAGE","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.formats","c":"Conll03NameSampleStream.LANGUAGE","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream.LANGUAGE","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.formats.conllu","c":"ConlluTagset","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.ml","c":"TrainerFactory.TrainerType","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"AbstractModel.ModelType","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory.DEFAULT_REGEX_NAME_FINDER","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.parser","c":"ParserEventTypeEnum","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.parser","c":"ParserType","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary.Operation","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.tokenize","c":"Detokenizer.DetokenizationOperation","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.util","c":"DownloadUtil.ModelType","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.util.model","c":"ModelType","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.util.wordvector","c":"WordVectorType","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"ComparableEvent","l":"values"},{"p":"opennlp.tools.formats","c":"Conll02NameSampleStream.LANGUAGE","l":"values()"},{"p":"opennlp.tools.formats","c":"Conll03NameSampleStream.LANGUAGE","l":"values()"},{"p":"opennlp.tools.formats","c":"EvalitaNameSampleStream.LANGUAGE","l":"values()"},{"p":"opennlp.tools.formats.conllu","c":"ConlluTagset","l":"values()"},{"p":"opennlp.tools.ml","c":"TrainerFactory.TrainerType","l":"values()"},{"p":"opennlp.tools.ml.model","c":"AbstractModel.ModelType","l":"values()"},{"p":"opennlp.tools.namefind","c":"RegexNameFinderFactory.DEFAULT_REGEX_NAME_FINDER","l":"values()"},{"p":"opennlp.tools.parser","c":"ParserEventTypeEnum","l":"values()"},{"p":"opennlp.tools.parser","c":"ParserType","l":"values()"},{"p":"opennlp.tools.stemmer.snowball","c":"SnowballStemmer.ALGORITHM","l":"values()"},{"p":"opennlp.tools.tokenize","c":"DetokenizationDictionary.Operation","l":"values()"},{"p":"opennlp.tools.tokenize","c":"Detokenizer.DetokenizationOperation","l":"values()"},{"p":"opennlp.tools.util","c":"DownloadUtil.ModelType","l":"values()"},{"p":"opennlp.tools.util.model","c":"ModelType","l":"values()"},{"p":"opennlp.tools.util.wordvector","c":"WordVectorType","l":"values()"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"VERBOSE_DEFAULT"},{"p":"opennlp.tools.ml","c":"AbstractTrainer","l":"VERBOSE_PARAM"},{"p":"opennlp.tools.util","c":"Version","l":"Version(int, int, int, boolean)","url":"%3Cinit%3E(int,int,int,boolean)"},{"p":"opennlp.tools.util","c":"Version","l":"Version(int, int, int)","url":"%3Cinit%3E(int,int,int)"},{"p":"opennlp.tools.tokenize","c":"WhitespaceTokenStream","l":"WhitespaceTokenStream(ObjectStream<TokenSample>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGenerator","l":"WindowFeatureGenerator(AdaptiveFeatureGenerator, int, int)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator,int,int)"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGenerator","l":"WindowFeatureGenerator(AdaptiveFeatureGenerator...)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator...)"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGenerator","l":"WindowFeatureGenerator(AdaptiveFeatureGenerator)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.AdaptiveFeatureGenerator)"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGenerator","l":"WindowFeatureGenerator(int, int, AdaptiveFeatureGenerator...)","url":"%3Cinit%3E(int,int,opennlp.tools.util.featuregen.AdaptiveFeatureGenerator...)"},{"p":"opennlp.tools.util.featuregen","c":"WindowFeatureGeneratorFactory","l":"WindowFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterDictionary","l":"WordClusterDictionary(InputStream)","url":"%3Cinit%3E(java.io.InputStream)"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterDictionary.WordClusterDictionarySerializer","l":"WordClusterDictionarySerializer()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterFeatureGenerator","l":"WordClusterFeatureGenerator(WordClusterDictionary, String, boolean)","url":"%3Cinit%3E(opennlp.tools.util.featuregen.WordClusterDictionary,java.lang.String,boolean)"},{"p":"opennlp.tools.util.featuregen","c":"WordClusterFeatureGeneratorFactory","l":"WordClusterFeatureGeneratorFactory()","url":"%3Cinit%3E()"},{"p":"opennlp.tools.tokenize","c":"WordpieceTokenizer","l":"WordpieceTokenizer(Set<String>, int)","url":"%3Cinit%3E(java.util.Set,int)"},{"p":"opennlp.tools.tokenize","c":"WordpieceTokenizer","l":"WordpieceTokenizer(Set<String>)","url":"%3Cinit%3E(java.util.Set)"},{"p":"opennlp.tools.postag","c":"WordTagSampleStream","l":"WordTagSampleStream(ObjectStream<String>)","url":"%3Cinit%3E(opennlp.tools.util.ObjectStream)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryGISModelWriter","l":"writeDouble(double)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryQNModelWriter","l":"writeDouble(double)"},{"p":"opennlp.tools.ml.model","c":"AbstractModelWriter","l":"writeDouble(double)"},{"p":"opennlp.tools.ml.model","c":"GenericModelWriter","l":"writeDouble(double)"},{"p":"opennlp.tools.ml.naivebayes","c":"BinaryNaiveBayesModelWriter","l":"writeDouble(double)"},{"p":"opennlp.tools.ml.naivebayes","c":"PlainTextNaiveBayesModelWriter","l":"writeDouble(double)"},{"p":"opennlp.tools.ml.perceptron","c":"BinaryPerceptronModelWriter","l":"writeDouble(double)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryGISModelWriter","l":"writeInt(int)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryQNModelWriter","l":"writeInt(int)"},{"p":"opennlp.tools.ml.model","c":"AbstractModelWriter","l":"writeInt(int)"},{"p":"opennlp.tools.ml.model","c":"GenericModelWriter","l":"writeInt(int)"},{"p":"opennlp.tools.ml.naivebayes","c":"BinaryNaiveBayesModelWriter","l":"writeInt(int)"},{"p":"opennlp.tools.ml.naivebayes","c":"PlainTextNaiveBayesModelWriter","l":"writeInt(int)"},{"p":"opennlp.tools.ml.perceptron","c":"BinaryPerceptronModelWriter","l":"writeInt(int)"},{"p":"opennlp.tools.util.model","c":"ModelUtil","l":"writeModel(MaxentModel, OutputStream)","url":"writeModel(opennlp.tools.ml.model.MaxentModel,java.io.OutputStream)"},{"p":"opennlp.tools.cmdline.doccat","c":"DoccatFineGrainedReportListener","l":"writeReport()"},{"p":"opennlp.tools.cmdline.langdetect","c":"LanguageDetectorFineGrainedReportListener","l":"writeReport()"},{"p":"opennlp.tools.cmdline.lemmatizer","c":"LemmatizerFineGrainedReportListener","l":"writeReport()"},{"p":"opennlp.tools.cmdline.namefind","c":"TokenNameFinderFineGrainedReportListener","l":"writeReport()"},{"p":"opennlp.tools.cmdline.postag","c":"POSTaggerFineGrainedReportListener","l":"writeReport()"},{"p":"opennlp.tools.ml.model","c":"ModelParameterChunker","l":"writeUTF(DataOutputStream, String)","url":"writeUTF(java.io.DataOutputStream,java.lang.String)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryGISModelWriter","l":"writeUTF(String)","url":"writeUTF(java.lang.String)"},{"p":"opennlp.tools.ml.maxent.io","c":"BinaryQNModelWriter","l":"writeUTF(String)","url":"writeUTF(java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"AbstractModelWriter","l":"writeUTF(String)","url":"writeUTF(java.lang.String)"},{"p":"opennlp.tools.ml.model","c":"GenericModelWriter","l":"writeUTF(String)","url":"writeUTF(java.lang.String)"},{"p":"opennlp.tools.ml.naivebayes","c":"BinaryNaiveBayesModelWriter","l":"writeUTF(String)","url":"writeUTF(java.lang.String)"},{"p":"opennlp.tools.ml.naivebayes","c":"PlainTextNaiveBayesModelWriter","l":"writeUTF(String)","url":"writeUTF(java.lang.String)"},{"p":"opennlp.tools.ml.perceptron","c":"BinaryPerceptronModelWriter","l":"writeUTF(String)","url":"writeUTF(java.lang.String)"},{"p":"opennlp.tools.formats.conllu","c":"ConlluTagset","l":"X"},{"p":"opennlp.tools.util","c":"XmlUtil","l":"XmlUtil()","url":"%3Cinit%3E()"}]